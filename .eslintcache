[{"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/index.tsx":"1","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/i18n.js":"2","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/serviceWorker.js":"3","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/App.tsx":"4","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/newTheme.js":"5","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/BackgroundGlows.js":"6","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/config.ts":"7","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useNetworkPrompt.ts":"8","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/Updaters.tsx":"9","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Raffle/index.js":"10","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Home/index.js":"11","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Roadmap/index.js":"12","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/index.js":"13","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Help/index.js":"14","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/index.js":"15","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Stats/index.js":"16","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Strategies/index.js":"17","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Rebates/index.js":"18","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/NFTRaffle/index.js":"19","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Loader/index.js":"20","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/index.ts":"21","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/theme/index.ts":"22","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/NetworkVerifier/index.ts":"23","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/RefreshContext/index.ts":"24","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/GrapeFinanceProvider/index.ts":"25","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Banks/index.ts":"26","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Modals/index.ts":"27","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Popups/index.tsx":"28","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Leaderboard/index.tsx":"29","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/application/updater.ts":"30","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/transactions/updater.tsx":"31","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Home/Home.js":"32","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Rebates/Cemetery.js":"33","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Loader/Loader.js":"34","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/application/reducer.ts":"35","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/transactions/reducer.ts":"36","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/theme/colors.ts":"37","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/services/event.ts":"38","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/Dashboard.tsx":"39","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Roadmap/Roadmap.tsx":"40","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/Bond.tsx":"41","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Raffle/Raffle.tsx":"42","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Help/Help.tsx":"43","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Stats/Stats.tsx":"44","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Strategies/Strategies.tsx":"45","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/NFTRaffle/NFTRaffle.tsx":"46","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Banks/context.ts":"47","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/NetworkVerifier/NetworkVerifier.tsx":"48","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/GrapeFinanceProvider/GrapeFinanceProvider.tsx":"49","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/RefreshContext/RefreshContextProvider.tsx":"50","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Modals/Modals.tsx":"51","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Banks/Banks.tsx":"52","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/txEvent.js":"53","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/utils/convertTime.ts":"54","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/utils/provider.ts":"55","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/application/actions.ts":"56","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/transactions/actions.ts":"57","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/application/hooks.ts":"58","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Button/AnimatedButton.tsx":"59","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGrapeFinance.ts":"60","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useRaffleBalance.ts":"61","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/BondEstimatorModal.js":"62","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCashPriceInLastTWAP.ts":"63","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/DashboardTop.tsx":"64","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/transactions/hooks.tsx":"65","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/ether-utils.ts":"66","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/0x.ts":"67","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/NFTRaffle/components/ExchangeCard.tsx":"68","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/constants.ts":"69","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/utils/formatBalance.ts":"70","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useBondsPurchasable.ts":"71","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useTokenBalance.ts":"72","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useBondStats.ts":"73","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Raffle/components/ExchangeCard.tsx":"74","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useBanks.ts":"75","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/components/ExchangeCard.tsx":"76","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/components/ExchangeStat.tsx":"77","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/Presses.tsx":"78","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/TokenSymbol/index.ts":"79","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/BoardroomCard.tsx":"80","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/Farms.tsx":"81","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/LaunchCountdown/index.ts":"82","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Chart/index.js":"83","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useRefresh.ts":"84","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/index.ts":"85","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useLpStats.ts":"86","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/UnlockWallet/index.ts":"87","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/index.ts":"88","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/utils/constants.ts":"89","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/config.ts":"90","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/DashboardNFTBox.tsx":"91","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Spacer/index.ts":"92","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useModal.ts":"93","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/NFTRaffle/components/ExchangeModal.tsx":"94","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGrapeMimSWTotalNode.ts":"95","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWineTotalNodes.ts":"96","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGrapeTotalNodes.ts":"97","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Raffle/components/ExchangeModal.tsx":"98","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useApprove.ts":"99","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCatchError.ts":"100","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWineStats.ts":"101","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useHarvestFromBoardroom.ts":"102","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useEarningsOnBoardroom.ts":"103","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakeToBoardroom.ts":"104","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useTreasuryAllocationTimes.ts":"105","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGrapeStats.ts":"106","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWithdrawFromBoardroom.ts":"107","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakedTokenPriceInDollars.ts":"108","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/boardroom/useUnstakeTimerBoardroom.ts":"109","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/boardroom/useClaimRewardTimerBoardroom.ts":"110","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/SolerapressCard.tsx":"111","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/SodapressCard.tsx":"112","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/WinepressCard.tsx":"113","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/components/ExchangeModal.tsx":"114","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Chart/Chart.js":"115","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/FarmCard.tsx":"116","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/GrapeFinance.ts":"117","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/LaunchCountdown/LaunchCountdown.tsx":"118","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/Page.tsx":"119","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/UnlockWallet/UnlockWallet.tsx":"120","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Label/index.ts":"121","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/CardContent/index.ts":"122","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Spacer/Spacer.tsx":"123","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useAllowance.ts":"124","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useHandleTransactionReceipt.ts":"125","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useBurnGrapePress.ts":"126","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useAssassinatePress.ts":"127","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGetPressUsersNearAssassination.ts":"128","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStatsForPool.ts":"129","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/ERC20.ts":"130","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/PressClaimModal.jsx":"131","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bank/components/ZapModal.tsx":"132","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/PriceItems.tsx":"133","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/AccountButton.tsx":"134","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/ModalTitle/index.ts":"135","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/TokenInput/index.ts":"136","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Button/index.ts":"137","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/ModalActions/index.ts":"138","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Label/Label.tsx":"139","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Modal/index.ts":"140","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/CardContent/CardContent.tsx":"141","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useApproveZapper.ts":"142","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useENS.ts":"143","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/AccountModal.tsx":"144","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/TokenInput/TokenInput.tsx":"145","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Button/Button.tsx":"146","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/ModalActions/ModalActions.tsx":"147","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/ModalTitle/ModalTitle.tsx":"148","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Modal/Modal.tsx":"149","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Input/index.ts":"150","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Container/index.ts":"151","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Card/index.ts":"152","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Input/Input.tsx":"153","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Card/Card.tsx":"154","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Container/Container.tsx":"155","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useXGrapePrice.ts":"156","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGetBurntGrape.ts":"157","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useVintagePrice.ts":"158","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useEagerConnect.js":"159","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWithdraw.ts":"160","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useZap.ts":"161","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStake.ts":"162","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakedBalance.ts":"163","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useHarvest.ts":"164","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useEarnings.ts":"165","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/WalletProviderModal/index.js":"166","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useZapStakePress.ts":"167","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/usePoolBalance.ts":"168","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/usePressLottoInfo.ts":"169","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWinepressUserInfo.ts":"170","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Footer/index.js":"171","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakePress.ts":"172","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCompoundPress.ts":"173","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useClaimPress.ts":"174","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/ProgressCountdown.tsx":"175","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/WalletProviderModal/WalletProviderModal.js":"176","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Footer/Footer.js":"177","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/WalletProviderModal/WalletCard.js":"178","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useSodapressUserInfo.ts":"179","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useSolerapressUserInfo.ts":"180","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/boardroom/useWithdrawCheck.ts":"181","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/boardroom/useClaimRewardCheck.ts":"182","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useFetchBoardroomAPR.ts":"183","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCashPriceInEstimatedTWAP.ts":"184","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useTotalStakedOnBoardroom.ts":"185","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCurrentEpoch.ts":"186","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGetBoardroomPrintRate.ts":"187","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakedBalanceOnBoardroom.ts":"188","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useRedeemOnBoardroom.ts":"189","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/TokenSymbol/TokenSymbol.tsx":"190","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useNodesRewardBalance.ts":"191","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWalletNodesAndNFTs.ts":"192","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useSVintagePrice.ts":"193","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWalletStats.ts":"194","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Winery/components/ProgressCountdown.tsx":"195","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/DashboardTokenBox.tsx":"196","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useRebateTreasury.js":"197","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Rebates/CemeteryCard.js":"198","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Home/HomeCard.js":"199","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useLpStatsBTC.ts":"200","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useTotalValueLocked.ts":"201","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useIsWindowVisible.ts":"202","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useDebounce.ts":"203","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Rebates/components/DepositModal.tsx":"204","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Popups/PopupItem.tsx":"205","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/InfoCard/index.ts":"206","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/LPInfoCard/index.ts":"207","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useFantomPrice.ts":"208","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Popups/ErrorPopup.tsx":"209","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Popups/TransactionPopup.tsx":"210","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/LPInfoCard/LPInfoCard.tsx":"211","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/InfoCard/InfoCard.tsx":"212"},{"size":553,"mtime":1686653087253,"results":"213","hashOfConfig":"214"},{"size":1451,"mtime":1686653087253,"results":"215","hashOfConfig":"214"},{"size":5047,"mtime":1686653087254,"results":"216","hashOfConfig":"214"},{"size":4390,"mtime":1686653087175,"results":"217","hashOfConfig":"214"},{"size":864,"mtime":1686653087254,"results":"218","hashOfConfig":"214"},{"size":642,"mtime":1686653087255,"results":"219","hashOfConfig":"214"},{"size":14632,"mtime":1686653087242,"results":"220","hashOfConfig":"214"},{"size":1317,"mtime":1686653087250,"results":"221","hashOfConfig":"214"},{"size":260,"mtime":1686653087254,"results":"222","hashOfConfig":"214"},{"size":34,"mtime":1686653087259,"results":"223","hashOfConfig":"214"},{"size":32,"mtime":1686653087258,"results":"224","hashOfConfig":"214"},{"size":35,"mtime":1686653087260,"results":"225","hashOfConfig":"214"},{"size":37,"mtime":1686653087258,"results":"226","hashOfConfig":"214"},{"size":32,"mtime":1686653087258,"results":"227","hashOfConfig":"214"},{"size":32,"mtime":1686653087256,"results":"228","hashOfConfig":"214"},{"size":33,"mtime":1686653087260,"results":"229","hashOfConfig":"214"},{"size":38,"mtime":1686653087260,"results":"230","hashOfConfig":"214"},{"size":38,"mtime":1686653087260,"results":"231","hashOfConfig":"214"},{"size":37,"mtime":1686653087259,"results":"232","hashOfConfig":"214"},{"size":55,"mtime":1686653087238,"results":"233","hashOfConfig":"214"},{"size":646,"mtime":1686653087254,"results":"234","hashOfConfig":"214"},{"size":463,"mtime":1686653087255,"results":"235","hashOfConfig":"214"},{"size":43,"mtime":1686653087238,"results":"236","hashOfConfig":"214"},{"size":81,"mtime":1686653087243,"results":"237","hashOfConfig":"214"},{"size":81,"mtime":1686653087242,"results":"238","hashOfConfig":"214"},{"size":79,"mtime":1686653087242,"results":"239","hashOfConfig":"214"},{"size":43,"mtime":1686653087243,"results":"240","hashOfConfig":"214"},{"size":1644,"mtime":1686653087240,"results":"241","hashOfConfig":"214"},{"size":4290,"mtime":1686653087259,"results":"242","hashOfConfig":"214"},{"size":2062,"mtime":1686653087254,"results":"243","hashOfConfig":"214"},{"size":3231,"mtime":1686653087255,"results":"244","hashOfConfig":"214"},{"size":13533,"mtime":1686653087258,"results":"245","hashOfConfig":"214"},{"size":6303,"mtime":1686653087260,"results":"246","hashOfConfig":"214"},{"size":688,"mtime":1686653087238,"results":"247","hashOfConfig":"214"},{"size":1726,"mtime":1686653087254,"results":"248","hashOfConfig":"214"},{"size":1912,"mtime":1686653087255,"results":"249","hashOfConfig":"214"},{"size":648,"mtime":1686653087255,"results":"250","hashOfConfig":"214"},{"size":470,"mtime":1686653087254,"results":"251","hashOfConfig":"214"},{"size":8911,"mtime":1686653087257,"results":"252","hashOfConfig":"214"},{"size":7899,"mtime":1686653087260,"results":"253","hashOfConfig":"214"},{"size":7909,"mtime":1686653087256,"results":"254","hashOfConfig":"214"},{"size":6157,"mtime":1686653087259,"results":"255","hashOfConfig":"214"},{"size":2975,"mtime":1686653087258,"results":"256","hashOfConfig":"214"},{"size":571,"mtime":1686653087260,"results":"257","hashOfConfig":"214"},{"size":2250,"mtime":1686653087260,"results":"258","hashOfConfig":"214"},{"size":5996,"mtime":1686653087259,"results":"259","hashOfConfig":"214"},{"size":220,"mtime":1686653087242,"results":"260","hashOfConfig":"214"},{"size":1012,"mtime":1686653087238,"results":"261","hashOfConfig":"214"},{"size":974,"mtime":1686653087242,"results":"262","hashOfConfig":"214"},{"size":893,"mtime":1686653087243,"results":"263","hashOfConfig":"214"},{"size":1673,"mtime":1686653087243,"results":"264","hashOfConfig":"214"},{"size":1616,"mtime":1686653087242,"results":"265","hashOfConfig":"214"},{"size":397,"mtime":1686653087255,"results":"266","hashOfConfig":"214"},{"size":585,"mtime":1686653087255,"results":"267","hashOfConfig":"214"},{"size":403,"mtime":1686653087255,"results":"268","hashOfConfig":"214"},{"size":697,"mtime":1686653087254,"results":"269","hashOfConfig":"214"},{"size":993,"mtime":1686653087255,"results":"270","hashOfConfig":"214"},{"size":1863,"mtime":1686653087254,"results":"271","hashOfConfig":"214"},{"size":974,"mtime":1686653087235,"results":"272","hashOfConfig":"214"},{"size":230,"mtime":1686653087250,"results":"273","hashOfConfig":"214"},{"size":718,"mtime":1686653087251,"results":"274","hashOfConfig":"214"},{"size":5800,"mtime":1686653087256,"results":"275","hashOfConfig":"214"},{"size":811,"mtime":1686653087249,"results":"276","hashOfConfig":"214"},{"size":23231,"mtime":1686653087257,"results":"277","hashOfConfig":"214"},{"size":3125,"mtime":1686653087255,"results":"278","hashOfConfig":"214"},{"size":753,"mtime":1686653087247,"results":"279","hashOfConfig":"214"},{"size":820,"mtime":1686653087175,"results":"280","hashOfConfig":"214"},{"size":3300,"mtime":1686653087259,"results":"281","hashOfConfig":"214"},{"size":197,"mtime":1686653087245,"results":"282","hashOfConfig":"214"},{"size":762,"mtime":1686653087255,"results":"283","hashOfConfig":"214"},{"size":593,"mtime":1686653087248,"results":"284","hashOfConfig":"214"},{"size":950,"mtime":1686653087252,"results":"285","hashOfConfig":"214"},{"size":641,"mtime":1686653087248,"results":"286","hashOfConfig":"214"},{"size":3307,"mtime":1686653087259,"results":"287","hashOfConfig":"214"},{"size":210,"mtime":1686653087248,"results":"288","hashOfConfig":"214"},{"size":4982,"mtime":1686653087256,"results":"289","hashOfConfig":"214"},{"size":1005,"mtime":1686653087256,"results":"290","hashOfConfig":"214"},{"size":872,"mtime":1686653087258,"results":"291","hashOfConfig":"214"},{"size":39,"mtime":1686653087241,"results":"292","hashOfConfig":"214"},{"size":26098,"mtime":1686653087257,"results":"293","hashOfConfig":"214"},{"size":855,"mtime":1686653087257,"results":"294","hashOfConfig":"214"},{"size":82,"mtime":1686653087237,"results":"295","hashOfConfig":"214"},{"size":52,"mtime":1686653087236,"results":"296","hashOfConfig":"214"},{"size":252,"mtime":1686653087251,"results":"297","hashOfConfig":"214"},{"size":115,"mtime":1686653087247,"results":"298","hashOfConfig":"214"},{"size":659,"mtime":1686653087250,"results":"299","hashOfConfig":"214"},{"size":40,"mtime":1686653087241,"results":"300","hashOfConfig":"214"},{"size":32,"mtime":1686653087239,"results":"301","hashOfConfig":"214"},{"size":1469,"mtime":1686653087255,"results":"302","hashOfConfig":"214"},{"size":854,"mtime":1686653087245,"results":"303","hashOfConfig":"214"},{"size":1134,"mtime":1686653087257,"results":"304","hashOfConfig":"214"},{"size":34,"mtime":1686653087240,"results":"305","hashOfConfig":"214"},{"size":354,"mtime":1686653087250,"results":"306","hashOfConfig":"214"},{"size":1634,"mtime":1686653087259,"results":"307","hashOfConfig":"214"},{"size":809,"mtime":1686653087250,"results":"308","hashOfConfig":"214"},{"size":793,"mtime":1686653087253,"results":"309","hashOfConfig":"214"},{"size":796,"mtime":1686653087250,"results":"310","hashOfConfig":"214"},{"size":1634,"mtime":1686653087259,"results":"311","hashOfConfig":"214"},{"size":2023,"mtime":1686653087248,"results":"312","hashOfConfig":"214"},{"size":705,"mtime":1686653087249,"results":"313","hashOfConfig":"214"},{"size":646,"mtime":1686653087253,"results":"314","hashOfConfig":"214"},{"size":579,"mtime":1686653087250,"results":"315","hashOfConfig":"214"},{"size":746,"mtime":1686653087249,"results":"316","hashOfConfig":"214"},{"size":609,"mtime":1686653087252,"results":"317","hashOfConfig":"214"},{"size":624,"mtime":1686653087252,"results":"318","hashOfConfig":"214"},{"size":646,"mtime":1686653087250,"results":"319","hashOfConfig":"214"},{"size":663,"mtime":1686653087253,"results":"320","hashOfConfig":"214"},{"size":1131,"mtime":1686653087252,"results":"321","hashOfConfig":"214"},{"size":524,"mtime":1686653087248,"results":"322","hashOfConfig":"214"},{"size":536,"mtime":1686653087248,"results":"323","hashOfConfig":"214"},{"size":47301,"mtime":1686653087258,"results":"324","hashOfConfig":"214"},{"size":47482,"mtime":1686653087258,"results":"325","hashOfConfig":"214"},{"size":47749,"mtime":1686653087258,"results":"326","hashOfConfig":"214"},{"size":1634,"mtime":1686653087256,"results":"327","hashOfConfig":"214"},{"size":261,"mtime":1686653087236,"results":"328","hashOfConfig":"214"},{"size":22085,"mtime":1686653087257,"results":"329","hashOfConfig":"214"},{"size":79078,"mtime":1686653087245,"results":"330","hashOfConfig":"214"},{"size":1652,"mtime":1686653087237,"results":"331","hashOfConfig":"214"},{"size":60070,"mtime":1686653087239,"results":"332","hashOfConfig":"214"},{"size":318,"mtime":1686653087241,"results":"333","hashOfConfig":"214"},{"size":33,"mtime":1686653087237,"results":"334","hashOfConfig":"214"},{"size":39,"mtime":1686653087235,"results":"335","hashOfConfig":"214"},{"size":693,"mtime":1686653087240,"results":"336","hashOfConfig":"214"},{"size":814,"mtime":1686653087248,"results":"337","hashOfConfig":"214"},{"size":1269,"mtime":1686653087250,"results":"338","hashOfConfig":"214"},{"size":714,"mtime":1686653087249,"results":"339","hashOfConfig":"214"},{"size":719,"mtime":1686653087248,"results":"340","hashOfConfig":"214"},{"size":792,"mtime":1686653087250,"results":"341","hashOfConfig":"214"},{"size":1000,"mtime":1686653087252,"results":"342","hashOfConfig":"214"},{"size":7196,"mtime":1686653087245,"results":"343","hashOfConfig":"214"},{"size":1531,"mtime":1686653087257,"results":"344","hashOfConfig":"214"},{"size":8235,"mtime":1686653087256,"results":"345","hashOfConfig":"214"},{"size":3549,"mtime":1686653087239,"results":"346","hashOfConfig":"214"},{"size":1680,"mtime":1686653087239,"results":"347","hashOfConfig":"214"},{"size":38,"mtime":1686653087238,"results":"348","hashOfConfig":"214"},{"size":38,"mtime":1686653087241,"results":"349","hashOfConfig":"214"},{"size":34,"mtime":1686653087235,"results":"350","hashOfConfig":"214"},{"size":40,"mtime":1686653087238,"results":"351","hashOfConfig":"214"},{"size":1004,"mtime":1686653087237,"results":"352","hashOfConfig":"214"},{"size":74,"mtime":1686653087238,"results":"353","hashOfConfig":"214"},{"size":356,"mtime":1686653087235,"results":"354","hashOfConfig":"214"},{"size":2429,"mtime":1686653087248,"results":"355","hashOfConfig":"214"},{"size":529,"mtime":1686653087249,"results":"356","hashOfConfig":"214"},{"size":2738,"mtime":1686653087239,"results":"357","hashOfConfig":"214"},{"size":1565,"mtime":1686653087241,"results":"358","hashOfConfig":"214"},{"size":3309,"mtime":1686653087235,"results":"359","hashOfConfig":"214"},{"size":944,"mtime":1686653087238,"results":"360","hashOfConfig":"214"},{"size":548,"mtime":1686653087238,"results":"361","hashOfConfig":"214"},{"size":674,"mtime":1686653087238,"results":"362","hashOfConfig":"214"},{"size":74,"mtime":1686653087237,"results":"363","hashOfConfig":"214"},{"size":37,"mtime":1686653087236,"results":"364","hashOfConfig":"214"},{"size":32,"mtime":1686653087235,"results":"365","hashOfConfig":"214"},{"size":1118,"mtime":1686653087237,"results":"366","hashOfConfig":"214"},{"size":350,"mtime":1686653087235,"results":"367","hashOfConfig":"214"},{"size":916,"mtime":1686653087236,"results":"368","hashOfConfig":"214"},{"size":597,"mtime":1686653087253,"results":"369","hashOfConfig":"214"},{"size":615,"mtime":1686653087250,"results":"370","hashOfConfig":"214"},{"size":609,"mtime":1686653087252,"results":"371","hashOfConfig":"214"},{"size":625,"mtime":1686653087249,"results":"372","hashOfConfig":"214"},{"size":844,"mtime":1686653087253,"results":"373","hashOfConfig":"214"},{"size":729,"mtime":1686653087253,"results":"374","hashOfConfig":"214"},{"size":1203,"mtime":1686653087252,"results":"375","hashOfConfig":"214"},{"size":1027,"mtime":1686653087252,"results":"376","hashOfConfig":"214"},{"size":677,"mtime":1686653087250,"results":"377","hashOfConfig":"214"},{"size":1055,"mtime":1686653087249,"results":"378","hashOfConfig":"214"},{"size":94,"mtime":1686653087242,"results":"379","hashOfConfig":"214"},{"size":851,"mtime":1686653087253,"results":"380","hashOfConfig":"214"},{"size":958,"mtime":1686653087251,"results":"381","hashOfConfig":"214"},{"size":753,"mtime":1686653087251,"results":"382","hashOfConfig":"214"},{"size":762,"mtime":1686653087253,"results":"383","hashOfConfig":"214"},{"size":55,"mtime":1686653087236,"results":"384","hashOfConfig":"214"},{"size":793,"mtime":1686653087252,"results":"385","hashOfConfig":"214"},{"size":673,"mtime":1686653087249,"results":"386","hashOfConfig":"214"},{"size":652,"mtime":1686653087249,"results":"387","hashOfConfig":"214"},{"size":2024,"mtime":1686653087258,"results":"388","hashOfConfig":"214"},{"size":2717,"mtime":1686653087242,"results":"389","hashOfConfig":"214"},{"size":7147,"mtime":1686653087236,"results":"390","hashOfConfig":"214"},{"size":364,"mtime":1686653087242,"results":"391","hashOfConfig":"214"},{"size":762,"mtime":1686653087252,"results":"392","hashOfConfig":"214"},{"size":768,"mtime":1686653087252,"results":"393","hashOfConfig":"214"},{"size":721,"mtime":1686653087248,"results":"394","hashOfConfig":"214"},{"size":749,"mtime":1686653087248,"results":"395","hashOfConfig":"214"},{"size":610,"mtime":1686653087249,"results":"396","hashOfConfig":"214"},{"size":687,"mtime":1686653087249,"results":"397","hashOfConfig":"214"},{"size":783,"mtime":1686653087252,"results":"398","hashOfConfig":"214"},{"size":698,"mtime":1686653087249,"results":"399","hashOfConfig":"214"},{"size":651,"mtime":1686653087249,"results":"400","hashOfConfig":"214"},{"size":758,"mtime":1686653087252,"results":"401","hashOfConfig":"214"},{"size":643,"mtime":1686653087251,"results":"402","hashOfConfig":"214"},{"size":2482,"mtime":1686653087241,"results":"403","hashOfConfig":"214"},{"size":747,"mtime":1686653087251,"results":"404","hashOfConfig":"214"},{"size":835,"mtime":1686653087252,"results":"405","hashOfConfig":"214"},{"size":614,"mtime":1686653087251,"results":"406","hashOfConfig":"214"},{"size":680,"mtime":1686653087253,"results":"407","hashOfConfig":"214"},{"size":1746,"mtime":1686653087261,"results":"408","hashOfConfig":"214"},{"size":1217,"mtime":1686653087257,"results":"409","hashOfConfig":"214"},{"size":11169,"mtime":1686653087251,"results":"410","hashOfConfig":"214"},{"size":3820,"mtime":1686653087260,"results":"411","hashOfConfig":"214"},{"size":5533,"mtime":1686653087258,"results":"412","hashOfConfig":"214"},{"size":668,"mtime":1686653087250,"results":"413","hashOfConfig":"214"},{"size":659,"mtime":1686653087252,"results":"414","hashOfConfig":"214"},{"size":796,"mtime":1686653087250,"results":"415","hashOfConfig":"214"},{"size":717,"mtime":1686653087249,"results":"416","hashOfConfig":"214"},{"size":4117,"mtime":1686653087260,"results":"417","hashOfConfig":"214"},{"size":2356,"mtime":1686653087240,"results":"418","hashOfConfig":"214"},{"size":36,"mtime":1686653087237,"results":"419","hashOfConfig":"214"},{"size":38,"mtime":1686653087237,"results":"420","hashOfConfig":"214"},{"size":448,"mtime":1686653087249,"results":"421","hashOfConfig":"214"},{"size":782,"mtime":1686653087240,"results":"422","hashOfConfig":"214"},{"size":1191,"mtime":1686653087240,"results":"423","hashOfConfig":"214"},{"size":3895,"mtime":1686653087237,"results":"424","hashOfConfig":"214"},{"size":4475,"mtime":1686653087237,"results":"425","hashOfConfig":"214"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ig5atp",{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"792"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"797","messages":"798","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"799"},{"filePath":"800","messages":"801","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"802","messages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"810"},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"845"},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"852","messages":"853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"854","messages":"855","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"856"},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"867"},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878"},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/index.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/i18n.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/serviceWorker.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/App.tsx",["885","886"],"import React, {Suspense, lazy} from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {ThemeProvider as TP} from '@material-ui/core/styles';\nimport {ThemeProvider as TP1} from 'styled-components';\nimport useWallet, {UseWalletProvider} from 'use-wallet';\nimport usePromptNetwork from './hooks/useNetworkPrompt';\nimport BanksProvider from './contexts/Banks';\nimport GrapeFinanceProvider from './contexts/GrapeFinanceProvider';\nimport ModalsProvider from './contexts/Modals';\nimport {store} from './state';\nimport theme from './theme';\nimport newTheme from './newTheme';\nimport config from './config';\nimport Updaters from './state/Updaters';\nimport Loader from './components/Loader';\nimport Popups from './components/Popups';\nimport {RefreshContextProvider} from './contexts/RefreshContext';\nimport NetworkVerifier from './components/NetworkVerifier';\nimport BackgroundDecoration from './components/BackgroundDecoration';\nimport BackgroundGlows from './views/BackgroundGlows';\n\nconst Home = lazy(() => import('./views/Home'));\nconst Dashboard = lazy(() => import('./views/Dashboard'));\nconst Bond = lazy(() => import('./views/Bond'));\nconst Stats = lazy(() => import('./views/Stats'));\nconst Roadmap = lazy(() => import('./views/Roadmap'));\nconst Raffle = lazy(() => import('./views/Raffle'));\nconst Strategies = lazy(() => import('./views/Strategies'));\nconst Help = lazy(() => import('./views/Help'));\nconst Leaderboard = lazy(() => import('./views/Leaderboard'));\nconst NFTRaffle = lazy(() => import('./views/NFTRaffle'));\nconst Rebates = lazy(() => import('./views/Rebates'));\n\nconst NoMatch = () => (\n  <h3 style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\n    URL Not Found. <a href=\"/\">Go back home.</a>\n  </h3>\n);\n\nconst App: React.FC = () => {\n  // Clear localStorage for mobile users\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\n    localStorage.clear();\n    localStorage.setItem('connectorId', '');\n    localStorage.setItem('version_app', '1.1');\n  }\n\n  usePromptNetwork();\n\n  return (\n    <Providers>\n      <NetworkVerifier />\n      <Router>\n        <Suspense fallback={<Loader />}>\n          <BackgroundGlows />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/dashboard\">\n              <Dashboard />\n            </Route>\n\n            <Route path=\"/rebates\">\n              <Rebates />\n            </Route>\n            <Route path=\"/leaderboard\">\n              <Leaderboard />\n            </Route>\n            <Route path=\"/bond\">\n              <Bond />\n            </Route>\n\n            <Route path=\"/roadmap\">\n              <Roadmap />\n            </Route>\n            <Route path=\"/strategies\">\n              <Strategies />\n            </Route>\n            <Route path=\"/stats\">\n              <Stats />\n            </Route>\n            <Route path=\"/raffle\">\n              <Raffle />\n            </Route>\n            <Route path=\"/nftraffle\">\n              <NFTRaffle />\n            </Route>\n            <Route path=\"/help\">\n              <Help />\n            </Route>\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Providers>\n  );\n};\n\nconst Providers: React.FC = ({children}) => {\n  return (\n    <TP1 theme={theme}>\n      <TP theme={newTheme}>\n        <UseWalletProvider\n          chainId={config.chainId}\n          connectors={{\n            walletconnect: {rpcUrl: config.defaultProvider},\n            walletlink: {\n              url: config.defaultProvider,\n              appName: 'grapefinance.app',\n              appLogoUrl: '#',\n            },\n          }}\n        >\n          <Provider store={store}>\n            <Updaters />\n            <RefreshContextProvider>\n              <GrapeFinanceProvider>\n                <ModalsProvider>\n                  <BanksProvider>\n                    <>\n                      <Popups />\n                      {children}\n                    </>\n                  </BanksProvider>\n                </ModalsProvider>\n              </GrapeFinanceProvider>\n            </RefreshContextProvider>\n          </Provider>\n        </UseWalletProvider>\n      </TP>\n    </TP1>\n  );\n};\n\nexport default App;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/newTheme.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/BackgroundGlows.js",["887","888","889","890"],"import React, {useEffect, useCallback, useState, useRef} from 'react';\nimport heroImg from '../assets/img/grape-glass-bg.png';\nimport backgroundImg from '../assets/img/backgroundblur.png'\n\nfunction BackgroundGlows() {\n  return (\n    <div className=\"\">\n      <div\n        style={{\n          opacity: 0.7,\n          position: 'fixed',\n          top: '20%',\n          right: '0',\n          zIndex: '-1',\n        }}\n      >\n        <img src={heroImg} alt={'GRAPE Logo'} style={{width: 'auto', height: '100%'}} />\n      </div>\n      <img alt=\"\" src={backgroundImg} className=\"background-blur\" />\n    </div>\n  );\n}\n\nexport default BackgroundGlows;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/config.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useNetworkPrompt.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/Updaters.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Raffle/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Home/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Roadmap/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Help/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Stats/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Strategies/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Rebates/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/NFTRaffle/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Loader/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/index.ts",["891","892","893"],"import {configureStore} from '@reduxjs/toolkit';\nimport {save, load} from 'redux-localstorage-simple';\nimport transactions from './transactions/reducer';\nimport application from './application/reducer';\nimport {eventApi} from '../services/event';\n\nconst PERSISTED_KEYS: string[] = ['transactions'];\n\nexport const store = configureStore({\n  reducer: {\n    application,\n    transactions,\n    [eventApi.reducerPath]: eventApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(eventApi.middleware),\n  \n});\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/theme/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/NetworkVerifier/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/RefreshContext/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/GrapeFinanceProvider/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Banks/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Modals/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Popups/index.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Leaderboard/index.tsx",["894"],"//@ts-nocheck\nimport React from 'react';\nimport {withStyles, Theme, createStyles, makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Page from '../../components/Page';\nimport {useGetEventQuery} from '../../services/event';\nimport {convertTime} from '../../utils/convertTime';\nimport {createGlobalStyle} from 'styled-components';\nimport { Typography } from '@material-ui/core';\n\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      backgroundColor: 'transparent',\n      color: '#fff',\n      fontSize: 20,\n      fontWeight: 500,\n    },\n    body: {\n      fontSize: 20,\n      color: '#fff',\n    },\n  }),\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: 'rgba(0,0,0,0.5)',\n      },\n    },\n  }),\n)(TableRow);\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\nconst LeaderBoard = () => {\n  const classes = useStyles();\n\n  const {data: eventResponse} = useGetEventQuery();\n\n  const [leaderBoardEntire, setLeaderBoardEntire] = React.useState([]);\n  const [leaderBoardLastWeek, setLeaderBoardLastWeek] = React.useState([]);\n  React.useEffect(() => {\n    if (eventResponse && eventResponse.result) {\n      setLeaderBoardEntire(eventResponse.data.leaderBoard);\n      setLeaderBoardLastWeek(eventResponse.data.leaderBoardLastWeek);\n    }\n  }, [eventResponse]);\n\n  return (\n    <Page>\n      <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n        Node Leaderboard\n      </Typography>\n\n      <Typography color=\"textSecondary\" align=\"left\" variant=\"h4\">\n        All Time\n      </Typography>\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Rank</StyledTableCell>\n              <StyledTableCell>User</StyledTableCell>\n              <StyledTableCell>Last Node Time</StyledTableCell>\n              <StyledTableCell>Node Count</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {leaderBoardEntire.map((row, index) => (\n              <StyledTableRow key={index}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {index + 1}\n                </StyledTableCell>\n                <StyledTableCell>{row._id.substring(35)}</StyledTableCell>\n                <StyledTableCell>{convertTime(row.timestamp)}</StyledTableCell>\n                <StyledTableCell>{row.num}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      \n      \n      <Typography color=\"textSecondary\" style={{textAlign: 'left', marginTop: '15px', marginBottom: '15px'}} align=\"left\" variant=\"h4\">\n        Last Week\n      </Typography>\n      \n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Rank</StyledTableCell>\n              <StyledTableCell>User</StyledTableCell>\n              <StyledTableCell>Last Node Time</StyledTableCell>\n              <StyledTableCell>Node Count</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {leaderBoardLastWeek.map((row, index) => (\n              <StyledTableRow key={index}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {index + 1}\n                </StyledTableCell>\n                <StyledTableCell>{row._id.substring(35)}</StyledTableCell>\n                <StyledTableCell>{convertTime(row.timestamp)}</StyledTableCell>\n                <StyledTableCell>{row.num}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Page>\n  );\n};\n\nexport default LeaderBoard;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/application/updater.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/transactions/updater.tsx",["895"],"import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {checkedTransaction, finalizeTransaction} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\nimport {publish} from '../txEvent';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const {chainId, ethereum} = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n              publish('successTx');\n            } else {\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n              publish('successTx');\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Home/Home.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Rebates/Cemetery.js",["896","897"],"import React, {useMemo, useState, useEffect} from 'react';\nimport {useWallet} from 'use-wallet';\nimport {Route, Switch, useRouteMatch} from 'react-router-dom';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Web3 from 'web3';\n\nimport {Box, Card, CardContent, Button, Typography, Grid} from '@material-ui/core';\n\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\nimport CemeteryCard from './CemeteryCard';\n\nimport useBanks from '../../hooks/useBanks';\nimport useRebateTreasury from '../../hooks/useRebateTreasury';\nimport useTombStats from '../../hooks/useWineStats';\nimport serGrape from '../../assets/img/ser_grape.png';\nimport TokenSymbol from '../../components/TokenSymbol';\n\nconst web3 = new Web3();\nconst BN = (n) => new web3.utils.BN(n);\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n  },\n}));\n\nconst Cemetery = () => {\n  const classes = useStyles();\n  const [banks] = useBanks();\n  const {path} = useRouteMatch();\n  const {account} = useWallet();\n  const tombStats = useTombStats();\n  const activeBanks = banks.filter((bank) => !bank.finished);\n\n  const tombPriceInFTM = useMemo(() => (tombStats ? Number(tombStats.tokenInFtm).toFixed(4) : null), [tombStats]);\n\n  const rebateStats = useRebateTreasury();\n\n  const [claimablewine, setClaimablewine] = useState(0);\n  const [vested, setVested] = useState(0);\n\n  useEffect(() => {\n    updateVesting();\n    const interval = setInterval(updateVesting, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  async function updateVesting() {\n    if (!window.ethereum) return;\n    const address = (await window.ethereum.request({method: 'eth_accounts'}))[0];\n    if (!address) return;\n\n    const claimable = await rebateStats.RebateTreasury.methods.claimableWine(address).call();\n    const vesting = await rebateStats.RebateTreasury.methods.vesting(address).call();\n    setClaimablewine(+web3.utils.fromWei(claimable));\n    setVested(+web3.utils.fromWei(BN(vesting.amount).sub(BN(vesting.claimed))));\n  }\n\n  async function claimTomb() {\n    console.log('claiming the tomb');\n    if (!window.ethereum) return;\n    const address = (await window.ethereum.request({method: 'eth_accounts'}))[0];\n    if (!address) return;\n    window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [\n        {\n          from: address,\n          to: rebateStats.RebateTreasury._address,\n          data: rebateStats.RebateTreasury.methods.claimRewards().encodeABI(),\n        },\n      ],\n    });\n  }\n\n  return (\n    <Switch>\n      <Page>\n        <Route exact path={path}>\n          {!!account ? (\n            <>\n              <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n                🔥Peg Health Campaign <img src={serGrape} alt=\"Ser Grape\" width={50} height={50} />\n              </Typography>\n              <Typography color=\"textPrimary\" align=\"center\" variant=\"h6\" gutterBottom style={{marginBottom: '40px'}}>\n                Bond GRAPE, GRAPE-MIM LP or MIM and receive discounted WINE vested linearly over 3 days. <br />\n                All GRAPE will be burnt, MIM will be used to buy and burn GRAPE.\n              </Typography>\n\n              <Box mt={2}>\n                <Grid container justify=\"center\" spacing={3}>\n                  <Grid item xs={12} md={6} lg={6} className={classes.gridItem}>\n                    <Card className={classes.gridItem}>\n                      <CardContent align=\"center\">\n                        <TokenSymbol symbol={'WINE'} />\n                        <Typography variant=\"h6\">WINE Available to Buy</Typography>\n                        <Typography variant=\"h3\" style={{marginTop: '5px'}}>\n                          {rebateStats ? Number(rebateStats.tombAvailable).toFixed(3) : '--'}\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item xs={12} md={6} lg={6} className={classes.gridItem}>\n                    <Card className={classes.gridItem}>\n                      <CardContent align=\"center\">\n                        <Typography variant=\"h5\">Your WINE Vesting (over 3 days)</Typography>\n                        <Grid style={{marginTop: '20px'}} container justifyContent=\"space-between\">\n                          <Grid item>\n                            <Typography variant=\"h6\">Total Vested</Typography>\n                          </Grid>\n                          <Grid item>\n                            <Typography variant=\"h6\">{vested.toFixed(4)}</Typography>\n                          </Grid>\n                        </Grid>\n\n                        <Grid container justifyContent=\"space-between\">\n                          <Grid item>\n                            <Typography variant=\"h6\">Claimable</Typography>\n                          </Grid>\n                          <Grid item>\n                            <Typography variant=\"h6\">{claimablewine.toFixed(4)}</Typography>\n                          </Grid>\n                        </Grid>\n\n                        <Button\n                          color=\"primary\"\n                          className=\"shinyButton\"\n                          variant=\"contained\"\n                          onClick={claimTomb}\n                          style={{marginTop: '8px', width: '100%'}}\n                        >\n                          CLAIM\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                </Grid>\n              </Box>\n              <div\n                style={{marginTop: '10px'}}\n                hidden={activeBanks.filter((bank) => bank.sectionInUI === 4).length === 0}\n              >\n                <Grid container spacing={3}>\n                  {activeBanks\n                    .filter((bank) => bank.sectionInUI === 4)\n                    .map((bank) => (\n                      <React.Fragment key={bank.name}>\n                        <CemeteryCard bank={bank} />\n                      </React.Fragment>\n                    ))}\n                </Grid>\n              </div>\n            </>\n          ) : (\n            <UnlockWallet />\n          )}\n        </Route>\n      </Page>\n    </Switch>\n  );\n};\n\nexport default Cemetery;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Loader/Loader.js",["898"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport grapeImg from '../../assets/img/grape.png';\nimport wineImg from '../../assets/img/gshare.png';\nimport {SyncLoader} from 'react-spinners';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: '50%',\n        textAlign: 'center',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n      }}\n    >\n      <Typography variant=\"h3\">\n        Collecting Grapes <SyncLoader color=\"white\" size={20} />\n      </Typography>\n      <img alt=\"grape logo\" src={grapeImg} width=\"50px\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/application/reducer.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/transactions/reducer.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/theme/colors.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/services/event.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/Dashboard.tsx",["899"],"//@ts-nocheck\nimport React, {useState, useEffect, useRef} from 'react';\nimport {useWallet} from 'use-wallet';\nimport {Box, Grid, Typography, Switch, FormGroup, FormControlLabel} from '@material-ui/core';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\nimport useBanks from '../../hooks/useBanks';\nimport useBank from '../../hooks/useBank';\n\nimport grapeImg from '../../assets/img/grape.png';\n// import nodesImg from '../../assets/img/gnode.png';\nimport wineImg from '../../assets/img/gshare.png';\nimport soda from '../../assets/img/soda.png';\n\nimport Farms from './Farms';\n// import Nodes from './Nodes';\nimport BoardroomCard from './BoardroomCard';\nimport Presses from './Presses';\nimport {useLocation} from 'react-router-dom';\n\nimport DashboardTop from './DashboardTop';\n\nconst Dashboard = () => {\n  const [activeTab, setActiveTab] = useState('Presses');\n\n  const {account} = useWallet();\n  // const grapeFinance = useGrapeFinance();\n  const [banks] = useBanks();\n  const location = useLocation();\n  const vineyardPools = banks.filter(\n    (bank) => (!bank.finished && bank.sectionInUI === 2) || bank.sectionInUI === 6 || bank.sectionInUI === 7,\n  );\n  const pressPools = banks.filter((bank) => !bank.finished && bank.sectionInUI === 8);\n\n  const tabsRef = useRef(null);\n\n  useEffect(() => {\n    const hash = location.hash;\n    if (hash === '#farms') {\n      tabsRef?.current?.scrollIntoView();\n      setActiveTab('Farms');\n    } else if (hash === '#winery') {\n      tabsRef?.current?.scrollIntoView();\n      setActiveTab('Winery');\n    } else if (hash === '#nodes') {\n      tabsRef?.current?.scrollIntoView();\n      setActiveTab('Nodes');\n    } else if (hash === '#presses') {\n      tabsRef?.current?.scrollIntoView();\n      setActiveTab('Presses');\n    }\n  }, [location]);\n\n  const [activesOnly, setActivesOnly] = React.useState(false);\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setActivesOnly(event.target.checked);\n  };\n\n  return (\n    <Page>\n      <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n        Dashboard\n      </Typography>\n      {!!account ? (\n        <div>\n          <DashboardTop />\n\n          <div\n            ref={tabsRef}\n            style={{height: '3px', backgroundColor: '#930993', borderRadius: '5px', marginTop: '40px'}}\n          ></div>\n          <Box mt={4}>\n            <Grid container justifyContent={'center'} spacing={0} className=\"dashboard-tabs\">\n              <Grid item>\n                <div\n                  onClick={() => {\n                    window.history.replaceState(\n                      {additionalInformation: '/dashboard#presses'},\n                      'Dashboard: Presses',\n                      '/dashboard#presses',\n                    );\n                    setActiveTab('Presses');\n                  }}\n                  className={\n                    activeTab === 'Presses' ? 'button-first dashboard-tab-item-active' : 'button-first dashboard-tab-item'\n                  }\n                >\n                  <Grid container justifyContent=\"center\" alignItems=\"center\" className=\"p2\">\n                    <Grid item>\n                      <img src={soda} alt=\"Press\" height={25} width={25} style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item style={{paddingLeft: '5px'}}>\n                      PRESSES\n                    </Grid>\n                  </Grid>\n                </div>\n              </Grid>\n              <Grid item>\n                <div\n                  onClick={() => {\n                    window.history.replaceState(\n                      {additionalInformation: '/dashboard#farms'},\n                      'Dashboard: Farms',\n                      '/dashboard#farms',\n                    );\n                    setActiveTab('Farms');\n                  }}\n                  className={\n                    activeTab === 'Farms' ? 'dashboard-tab-item-active' : 'dashboard-tab-item'\n                  }\n                >\n                  <Grid container justifyContent=\"center\" alignItems=\"center\" className=\"p2\">\n                    <Grid item>\n                      <img src={grapeImg} alt=\"Grape\" height={25} width={25} style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item style={{paddingLeft: '5px'}}>\n                      VINEYARD\n                    </Grid>\n                  </Grid>\n                </div>\n              </Grid>\n              <Grid item>\n                <div\n                  onClick={() => {\n                    window.history.replaceState(\n                      {additionalInformation: '/dashboard#winery'},\n                      'Dashboard: Winery',\n                      '/dashboard#winery',\n                    );\n                    setActiveTab('Winery');\n                  }}\n                  className={activeTab === 'Winery' ? 'button-last dashboard-tab-item-active' : 'button-last dashboard-tab-item'}\n                >\n                  <Grid container justifyContent=\"center\" alignItems=\"center\" className=\"p2\">\n                    <Grid item>\n                      <img src={wineImg} alt=\"Wine\" height={25} width={25} style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item style={{paddingLeft: '5px'}}>\n                      WINERY\n                    </Grid>\n                  </Grid>\n                </div>\n              </Grid>\n              {/* <Grid item>\n                <div\n                  onClick={() => {\n                    window.history.replaceState(\n                      {additionalInformation: '/dashboard#nodes'},\n                      'Dashboard: Nodes',\n                      '/dashboard#nodes',\n                    );\n                    setActiveTab('Nodes');\n                  }}\n                  className={activeTab === 'Nodes' ? 'dashboard-tab-item-active' : 'dashboard-tab-item'}\n                >\n                  <Grid container justifyContent=\"center\" alignItems=\"center\" className=\"p2\">\n                    <Grid item>\n                      <img src={nodesImg} alt=\"Node\" height={25} width={25} style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item style={{paddingLeft: '7px'}}>\n                      NODES\n                    </Grid>\n                  </Grid>\n                </div>\n              </Grid> */}\n            </Grid>\n          </Box>\n\n          <Grid container justifyContent=\"space-between\" alignItems=\"center\" style={{marginTop: '20px'}}>\n            <Grid item>\n              <FormGroup style={{color: 'white'}}>\n                <FormControlLabel\n                  control={<Switch color=\"secondary\" checked={activesOnly} onChange={handleSwitchChange} />}\n                  label=\"Active(s) only\"\n                />\n              </FormGroup>{' '}\n            </Grid>\n            {/* <Grid item>\n              {vineyardPoolsWithFilters.length > 0 ? (\n                <FormControl variant=\"outlined\" sx={{m: 1, minWidth: 150}} color=\"secondary\">\n                  <InputLabel style={{color: '#fcfcfc'}} id=\"demo-simple-select-label\">\n                    Sort By\n                  </InputLabel>\n                  <Select\n                    sx={{\n                      backgroundColor: 'rgba(0, 0, 0, 0.5) !important',\n\n                      color: 'secondary',\n                      '& .MuiInputBase-root': {\n                        color: '#fcfcfc',\n                      },\n                    }}\n                    id=\"demo-simple-select\"\n                    value={sortBy}\n                    label=\"Sort By\"\n                    onChange={handleSortByChange}\n                  >\n                     <MenuItem value=\"depositedInDollars\">Deposited</MenuItem>\n                    <MenuItem value=\"rewardsInDollars\">Rewards</MenuItem> \n                    <MenuItem value=\"dailyAPR\">Daily APR</MenuItem>\n                    <MenuItem value=\"tvl\">TVL</MenuItem>\n                  </Select>\n                </FormControl>\n              ) : (\n                <span className=\"secondary-color\">Loading filters</span>\n              )}\n            </Grid> */}\n          </Grid>\n\n          <Box hidden={activeTab !== 'Farms'} mt={2}>\n            <Farms pools={vineyardPools} activesOnly={activesOnly} />\n          </Box>\n          <Box hidden={activeTab !== 'Winery'} mt={2}>\n            <BoardroomCard />\n          </Box>\n          {/* <Box hidden={activeTab !== 'Nodes'} mt={2}>\n            <Nodes pools={nodePools} activesOnly={activesOnly} />\n          </Box> */}\n\n          <Box hidden={activeTab !== 'Presses'} mt={2}>\n            <Presses pools={pressPools} activesOnly={activesOnly} />\n          </Box>\n        </div>\n      ) : (\n        <>\n          <UnlockWallet />\n        </>\n      )}\n    </Page>\n  );\n};\n\nexport default Dashboard;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Roadmap/Roadmap.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/Bond.tsx",["900","901","902","903"],"//@ts-nocheck\nimport React, {useCallback, useMemo, useState} from 'react';\nimport Page from '../../components/Page';\nimport {createGlobalStyle} from 'styled-components';\nimport {Route, Switch, useRouteMatch} from 'react-router-dom';\nimport {useWallet} from 'use-wallet';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport ExchangeCard from './components/ExchangeCard';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport useBondStats from '../../hooks/useBondStats';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport useCashPriceInLastTWAP from '../../hooks/useCashPriceInLastTWAP';\nimport {useTransactionAdder} from '../../state/transactions/hooks';\nimport ExchangeStat from './components/ExchangeStat';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useBondsPurchasable from '../../hooks/useBondsPurchasable';\nimport {getDisplayBalance} from '../../utils/formatBalance';\nimport {BOND_REDEEM_PRICE, BOND_REDEEM_PRICE_BN} from '../../grape-finance/constants';\nimport {Alert} from '@material-ui/lab';\nimport {roundAndFormatNumber} from '../../0x';\nimport BondEstimatorModal from './BondEstimatorModal';\nimport SwapVerticalCircleIcon from '@material-ui/icons/SwapVerticalCircle';\n\nimport HomeImage from '../../assets/img/background.jpg';\nimport {Grid, Typography, Box} from '@material-ui/core';\nimport {Box as MetarialBox} from '@mui/material';\n\nconst Bond: React.FC = () => {\n  const {account} = useWallet();\n  const grapeFinance = useGrapeFinance();\n  const addTransaction = useTransactionAdder();\n  const bondStat = useBondStats();\n  const cashPrice = useCashPriceInLastTWAP();\n\n  const bondsPurchasable = useBondsPurchasable();\n\n  const bondBalance = useTokenBalance(grapeFinance?.GBOND);\n  const memoizedBondBalance = useMemo(() => {\n    return bondBalance != null && Number(bondBalance) > 0 ? bondBalance : null;\n  }, [bondBalance]);\n\n  const handleBuyBonds = useCallback(\n    async (amount: string) => {\n      const tx = await grapeFinance.buyBonds(amount);\n      addTransaction(tx, {\n        summary: `Buy ${Number(amount).toFixed(2)} GBOND with ${amount} GRAPE`,\n      });\n    },\n    [grapeFinance, addTransaction],\n  );\n\n  const handleRedeemBonds = useCallback(\n    async (amount: string) => {\n      const tx = await grapeFinance.redeemBonds(amount);\n      addTransaction(tx, {summary: `Redeem ${amount} GBOND`});\n    },\n    [grapeFinance, addTransaction],\n  );\n\n  const isBondRedeemable = useMemo(() => cashPrice.gt(BOND_REDEEM_PRICE_BN), [cashPrice]);\n  const isBondPurchasable = useMemo(() => Number(bondStat?.tokenInFtm) < 1.01, [bondStat]);\n  const grapeReserves = useMemo(() => (Number(bondStat?.treasuryGrapes) / 1e18).toFixed(0), [bondStat]);\n  const bondSupply = useMemo(() => bondStat?.circulatingSupply, [bondStat]);\n  const bondScale = (Number(cashPrice) / 1e18).toFixed(2);\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n\n  const handleOpenModal = () => {\n    setModalOpen(true);\n  };\n\n  return (\n    <Switch>\n      <Page>\n        {!!account ? (\n          <>\n            {memoizedBondBalance && (\n              <BondEstimatorModal\n                open={modalOpen}\n                walletBondAmount={Number(memoizedBondBalance) / Math.pow(10, 18)}\n                handleClose={handleCloseModal}\n              />\n            )}\n            <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n              Buy & Redeem Bonds\n            </Typography>\n            <Typography color=\"textPrimary\" align=\"center\" variant=\"h6\" gutterBottom style={{marginBottom: '40px'}}>\n              Exchange Grapes for Bonds and burns Grape supply\n              <br />\n              Exchange Bonds for Grapes and earn premiums upon redemption\n            </Typography>\n            <Box mt={2}>\n              <Grid item xs={12} sm={12} justify=\"center\" style={{margin: '18px', display: 'flex'}}>\n                <Alert variant=\"filled\" severity=\"error\">\n                  <b>Bonds are emitted & premiums redeemable based on last epoch TWAP prices not the current TWAP!</b>\n                </Alert>\n              </Grid>\n            </Box>\n            <MetarialBox\n              onClick={handleOpenModal}\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'flex-end',\n                gap: '2px',\n                cursor: 'pointer',\n              }}\n            >\n              <Typography style={{fontSize: '15px', color: 'white'}}>\n                <u>Estimate your GBonds redeem bonus</u>\n              </Typography>\n              <SwapVerticalCircleIcon style={{color: 'white'}} />\n            </MetarialBox>\n            <StyledBond>\n              <StyledCardWrapper>\n                <ExchangeCard\n                  action=\"Purchase\"\n                  fromToken={grapeFinance.GRAPE}\n                  fromTokenName=\"GRAPE\"\n                  toToken={grapeFinance.GBOND}\n                  toTokenName=\"GBOND\"\n                  priceDesc={\n                    !isBondPurchasable\n                      ? 'GRAPE is over peg'\n                      : getDisplayBalance(bondsPurchasable, 18, 4) + ' GBOND available for purchase'\n                  }\n                  onExchange={handleBuyBonds}\n                />\n              </StyledCardWrapper>\n              <StyledStatsWrapper>\n                <ExchangeStat\n                  tokenName=\"1 GRAPE\"\n                  description=\"Last-Hour TWAP Price\"\n                  //price={Number(grapeStat?.tokenInFtm).toFixed(4) || '-'}\n                  price={bondScale + ' GBOND' || '-'}\n                />\n                <Spacer size=\"md\" />\n                <ExchangeStat\n                  tokenName=\"1 GBOND\"\n                  description=\"Bond Price\"\n                  price={Number(bondStat?.tokenInFtm).toFixed(2) + ' GRAPE' || '-'}\n                />\n\n                <Box mt={3}>\n                  <Grid item xs={12} sm={12} justify=\"center\" style={{display: 'flex'}}>\n                    <Alert variant=\"filled\" severity=\"error\">\n                      <b>Grape Reserves:</b>{' '}\n                      {bondStat?.treasuryGrapes ? roundAndFormatNumber(Number(grapeReserves), 0) : '-'}\n                      <br></br>\n                      <b>Bond supply:</b>{' '}\n                      {bondStat?.circulatingSupply ? roundAndFormatNumber(Number(bondSupply), 0) : '-'} <br></br>\n                      <b>When reserves are {'>'} bond supply debt phase has finished</b>\n                    </Alert>\n                  </Grid>\n                </Box>\n              </StyledStatsWrapper>\n              <StyledCardWrapper>\n                <ExchangeCard\n                  action=\"Redeem\"\n                  fromToken={grapeFinance.GBOND}\n                  fromTokenName=\"GBOND\"\n                  toToken={grapeFinance.GRAPE}\n                  toTokenName=\"GRAPE\"\n                  priceDesc={`${getDisplayBalance(bondBalance)} GBOND Available in wallet`}\n                  onExchange={handleRedeemBonds}\n                  disabledDescription={!isBondRedeemable ? `Enabled when 1 GRAPE > $${BOND_REDEEM_PRICE}` : null}\n                />\n              </StyledCardWrapper>\n            </StyledBond>\n          </>\n        ) : (\n          <UnlockWallet />\n        )}\n      </Page>\n    </Switch>\n  );\n};\n\nconst StyledBond = styled.div`\n  display: flex;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst StyledStatsWrapper = styled.div`\n  display: flex;\n  flex: 0.8;\n  margin: 0 20px;\n  flex-direction: column;\n\n  @media (max-width: 768px) {\n    width: 80%;\n    margin: 16px 0;\n  }\n`;\n\nexport default Bond;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Raffle/Raffle.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Help/Help.tsx",["904","905"],"import React from 'react';\nimport Page from '../../components/Page';\nimport {createGlobalStyle} from 'styled-components';\nimport { Switch} from 'react-router-dom';\n\nimport HomeImage from '../../assets/img/background.jpg';\nimport { Grid , Container } from '@material-ui/core';\n\nconst Help: React.FC = () => {\n\n  return (\n    <Switch>\n      <Page>\n      <Container>   \n              <Grid item xs={12} md={12} lg={12} >     \n                  <h1 style={{ fontSize: '80px', textAlign:'center' }}>Grape Guides</h1>   \n\n                  <h1 style={{textAlign:'center', marginTop: '60px' }}>How to earn MAX YIELD and PROTECT THE PEG</h1><br></br>\n                  <iframe width=\"100%\" height=\"550px\" src=\"https://www.youtube.com/embed/L9oo4yj-HIM\" title=\"Grape Finance Videos\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" ></iframe>\n\n                  <h1 style={{textAlign:'center', marginTop: '60px' }}>Beginner tutorial on Grape staking & adding to LPs</h1><br></br>\n                  <iframe width=\"100%\" height=\"550px\" src=\"https://www.youtube.com/embed/JBWCOadvqbw\" title=\"Grape Finance Videos\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" ></iframe>\n\n                  <h1 style={{textAlign:'center', marginTop: '60px' }}>Zone 1 - Introductions & what to do when Grape is above $2</h1><br></br>\n                  <iframe width=\"100%\" height=\"550px\" src=\"https://www.youtube.com/embed/videoseries?list=PL_Nr1FoFNB03Ep-LDgn0_nHdFGuYcO030\" title=\"Grape Finance Videos\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" ></iframe>\n\n                  <h1 style={{textAlign:'center', marginTop: '60px'}}>Grape Finance Pool Priorities</h1><br></br>\n                  <iframe width=\"100%\" height=\"550px\" src=\"https://www.youtube.com/embed/videoseries?list=PL_Nr1FoFNB0004BPaACfcqYMZKcunv6Cq\" title=\"Grape Finance Videos\"  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" ></iframe>\n\n                  <h1 style={{textAlign:'center', marginTop: '60px' }}>The Basics of Seigniorage Protocols</h1><br></br>\n                  <iframe width=\"100%\" height=\"550px\" src=\"https://www.youtube.com/embed/videoseries?list=PL_Nr1FoFNB02T0LSnRbFMFJoLTU4yszqJ\" title=\"Grape Finance Videos\"  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" ></iframe>\n\n                 <h1 style={{textAlign:'center', marginTop: '60px'}}>How to stake LP tokens & Wine at Grape Finance</h1><br></br>\n                  <iframe width=\"100%\" height=\"550px\" src=\"https://www.youtube.com/embed/xHVqLK_Segw?rel=0\" title=\"Grape Finance Videos\"  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" ></iframe>\n                  \n              </Grid>\n      </Container>\n      </Page>\n    </Switch>\n  );\n};\n\n\nexport default Help;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Stats/Stats.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Strategies/Strategies.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/NFTRaffle/NFTRaffle.tsx",["906","907"],"import React, {useCallback, useMemo} from 'react';\nimport Page from '../../components/Page';\nimport {createGlobalStyle} from 'styled-components';\nimport { Switch} from 'react-router-dom';\nimport {useWallet} from 'use-wallet';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport ExchangeCard from './components/ExchangeCard';\nimport styled from 'styled-components';\nimport useRaffleStats from '../../hooks/useRaffleBalance';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport {useTransactionAdder} from '../../state/transactions/hooks';\nimport HomeImage from '../../assets/img/background.jpg';\nimport Collage from '../../assets/img/collage.jpg';\nimport { Card,  Grid } from '@material-ui/core';\nimport LaunchCountdown from '../../components/LaunchCountdown';\n\n\nconst NFTRaffle: React.FC = () => {\n\n  // compatible format for most browser + metamask browser. Needs to be YYYY-MM-ddTHH:mm:ssZ\n  const startDate = new Date('2022-04-30T3:00:00Z');\n  const endDate = new Date('2022-05-03T4:00:00Z');\n  const raffleAddress = '0x37219231a957e09F6e674B218043FdF1C5145F68';\n\n  const {account} = useWallet();\n  const grapeFinance = useGrapeFinance();\n  const addTransaction = useTransactionAdder();\n  const raffleStats = useRaffleStats(account, raffleAddress);\n\n\n  const startTime = Number(startDate); \n  const endTime = Number(endDate); \n  \n  const raffleBals = useMemo(\n    () => (raffleStats ? Number(raffleStats.totalSupply).toFixed(0) : null),\n    [raffleStats],\n  );\n\n  const userBals = useMemo(\n    () => (raffleStats ? Number(raffleStats.priceInDollars).toFixed(0) : null),\n    [raffleStats],\n  );\n\n  const handleBuyBonds = useCallback( \n    async (amount: string) => { \n      const tx = await grapeFinance.sendGrape(amount, raffleAddress);\n        addTransaction(tx, {\n          summary: `Send ${Number(amount).toFixed(2)} MIM to the raffle ${amount} `,\n        });\n    \n    },\n    [grapeFinance, addTransaction],\n  );\n\n  return (   \n<Switch>\n<Page>\n  {!!account ? (\n    <>\n    \n     <Grid item xs={12} md={12} lg={12} >     \n        <h2 style={{ fontSize: '80px', textAlign:'center' }}>Partner NFT Raffle</h2>   \n        <p style={{ fontSize: '20px', textAlign:'center', color: '#fff' }}>This isn't just your average raffle, this raffle gives you the chance to win NFTs from our awesome partners! Each with utility that goes into a reward pool for 3 winners to choose from! To enter simply click the enter raffle button below to send 5 MIM to the raffle address or manually send MIM to the raffle address shown below. </p>  \n        <p style={{fontSize: '20px', textAlign:'center', color: '#fff' }}>Raffle address: {raffleAddress}</p>\n        <h2 style={{ fontSize: '40px', textAlign:'center' }}>Raffle Details</h2>\n        <p style={{ fontSize: '20px', textAlign:'center', color: '#fff' }}>5 MIM Per Entry, Unlimited Entries Per Wallet!<br></br>\n        3 Winners will be selected!<br></br>\n        1st- Picks 3 NFTs from reward pool <br></br>\n        2nd- Picks 2 NFTs from reward pool <br></br>\n        3rd- Picks 1 NFT from reward pool </p> \n        \n        <Grid container justify=\"center\" spacing={3} style={{marginTop: '10px', marginBottom: '20px'}}><img alt='NFT Collage' style={{width: '450px'}} src={Collage}/></Grid>\n\n        <p style={{ fontSize: '20px', textAlign:'center', color: '#fff' }}>Many thanks to our awesome partners for donating NFTs!<br></br>\n        <a target={'_blank'} rel=\"noopener noreferrer\" href={'https://www.eltacofinance.com/'}>El Taco Finance</a><br></br>\n        <a target={'_blank'} rel=\"noopener noreferrer\" href={'https://magik.finance/'}>Magik Finance</a><br></br>\n        <a target={'_blank'} rel=\"noopener noreferrer\" href={'https://app.mvfinance.club/'}>Miniverse Finance</a><br></br>\n        </p>\n        \n      </Grid>\n      {Date.now() > endTime ? <h2 style={{ fontSize: '40px', textAlign:'center' }}>Raffle Closed</h2> : <h2 style={{ fontSize: '60px', textAlign:'center' }}>Raffle Open</h2>}\n      {Date.now() < startTime ? <LaunchCountdown deadline={startDate} description={'Raffle Starts In'} descriptionLink={''}></LaunchCountdown> : <LaunchCountdown deadline={endDate} description={'Raffle Closes In'} descriptionLink={''}></LaunchCountdown>}\n       \n    <Grid container justify=\"center\" spacing={3} style={{marginTop: '10px'}}>\n        <Grid item xs={12} sm={12} lg={6}>  \n            <Card>\n              <h2 style={{textAlign:'center', marginTop: '10px' }}>Raffle Stats</h2>                \n              <p style={{textAlign:'center'}}>Total MIM entered: {raffleBals}</p>         \n              <p style={{textAlign:'center'}}>Your MIM entered: {userBals}</p>\n              <p style={{textAlign:'center'}}>Your Raffle entries: {Number(userBals)/5}</p>\n              <p style={{textAlign:'center'}}>Your account: {account}</p>\n            </Card>\n          </Grid>\n        <Grid item xs={12} sm={12} lg={6}>  \n        <StyledBond>\n          <StyledCardWrapper>\n            <ExchangeCard\n              action=\"Enter Raffle\"\n              fromToken={grapeFinance.MIM}\n              fromTokenName=\"MIM\"\n              toToken={grapeFinance.GBOND}\n              toTokenName=\"GBOND\"\n              priceDesc={\n                Date.now() < endTime && Date.now() > startTime\n                  ? 'Raffle is open! 5 MIM = 1 Entry'\n                  : 'Raffle is currently closed'\n              }\n              disabled={Date.now() < endTime && Date.now() > startTime ? false : true}\n              onExchange={handleBuyBonds}\n            />\n          </StyledCardWrapper>\n        </StyledBond>\n        </Grid>\n      </Grid>\n\n    </>\n  ) : (\n    <UnlockWallet />\n  )}\n</Page>\n</Switch>\n  );\n};\n\nconst StyledBond = styled.div`\n  display: flex;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\n\nexport default NFTRaffle;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Banks/context.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/NetworkVerifier/NetworkVerifier.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/GrapeFinanceProvider/GrapeFinanceProvider.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/RefreshContext/RefreshContextProvider.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Modals/Modals.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/contexts/Banks/Banks.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/txEvent.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/utils/convertTime.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/utils/provider.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/application/actions.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/transactions/actions.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/application/hooks.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Button/AnimatedButton.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGrapeFinance.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useRaffleBalance.ts",["908"],"import {useEffect, useState} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport {TokenStat} from '../grape-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useRaffleStats = (account: string, raffleAddress: string) => {\n  const [stat, setStat] = useState<TokenStat>();\n  const {fastRefresh} = useRefresh();\n  const grapeFinance = useGrapeFinance();\n  \n  useEffect(() => {\n    async function fetchGrapePrice() {\n      \n      try {\n        setStat(await grapeFinance.getRaffleStat(account, raffleAddress));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchGrapePrice();\n  }, [setStat, grapeFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useRaffleStats;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/BondEstimatorModal.js",["909"],"import {Modal, Grid, GridItem, Box, Typography, makeStyles} from '@material-ui/core';\nimport React, {useEffect, useState} from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    color: 'black',\n    '& *': {\n      color: 'black',\n    },\n  },\n  text: {\n    fontSize: '14px',\n  },\n  subTitle: {\n    color: '#fff',\n    fontSize: '14px',\n    fontWeight: 'bold',\n  },\n  greenText: {\n    color: '#36d846',\n    fontSize: '14px',\n  },\n  inputButton: {\n    marginLeft: '8px',\n    fontSize: '12px',\n    borderRadius: '4px',\n    background: '#0c7aca',\n    border: 'none',\n    outline: 'none',\n    padding: '0px 4px',\n    lineHeight: '24px',\n    color: 'white',\n    cursor: 'pointer',\n  },\n  input: {\n    appearance: 'none',\n    border: 'none',\n    outline: 'none',\n    padding: 'none',\n    width: '100%',\n    paddingBlock: '5px',\n    backgroundColor: 'transparent',\n    '&::-webkit-outer-spin-button, &::-webkit-inner-spin-button': {\n      WebkitAppearance: 'none',\n    },\n    '&[type=number]': {\n      MozAppearance: 'none',\n    },\n  },\n}));\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  color: '#fff',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 'min(90%, 450px)',\n  bgcolor: 'rgba(0,0,0,0.8)',\n  p: '24px',\n  display: 'flex',\n  flexDirection: 'column',\n  outline: 'none',\n  boxSizing: 'border-box',\n  borderRadius: '12px',\n};\n\nconst BondEstimatorModal = ({open, walletBondAmount, handleClose}) => {\n  const [bondAmount, setBondAmount] = useState(walletBondAmount);\n  const [twap, setTwap] = useState(1.1);\n\n  const classes = useStyles();\n\n  const [ratio, setRatio] = useState(1);\n  const [grapeRedeemed, setGrapeRedeemed] = useState(\"1\");\n\n  const updateCalculation = (bondAmount, twap) => {\n    const coeff = 0.7\n    const ratio = 1 + ((Number(twap) - 1) * coeff)\n    setRatio(ratio.toFixed(3))\n    setGrapeRedeemed((Number(bondAmount) * ratio).toFixed(2))\n  };\n\n  useEffect(() => {\n    updateCalculation(bondAmount, twap)\n  }, [open, walletBondAmount, handleClose, bondAmount, twap])\n\n  return (\n    <Modal open={open}>\n      <Box sx={style}>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n          }}\n        >\n          <Box\n            sx={{\n              cursor: 'pointer',\n            }}\n            onClick={() => {\n              handleClose();\n              setBondAmount(walletBondAmount);\n            }}\n          >\n            <CloseIcon />\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography className={classes.text}>Enter GBonds amount:</Typography>\n          <Box\n            sx={{\n              borderRadius: '10px',\n              bgcolor: '#eff2f4',\n              border: '1px solid #d0d3d4',\n              p: '10px',\n              mt: '10px',\n            }}\n          >\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                mb: '10px',\n              }}\n            >\n              <input\n                type=\"text\"\n                value={bondAmount}\n                className={classes.input}\n                onChange={(e) => {\n                  setBondAmount(e.target.value);\n                  // updateCalculation(e.target.value, twap);\n                }}\n              />\n            </Box>\n          </Box>\n        </Box>\n        <Box\n          mt={1}\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography className={classes.text}>Enter Grape TWAP:</Typography>\n          <Box\n            sx={{\n              borderRadius: '10px',\n              bgcolor: '#eff2f4',\n              border: '1px solid #d0d3d4',\n              p: '10px',\n              mt: '10px',\n            }}\n          >\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                mb: '10px',\n              }}\n            >\n              <input\n                type=\"number\"\n                value={twap}\n                className={classes.input}\n                onChange={(e) => {\n                  setTwap(e.target.value);\n                  // updateCalculation(bondAmount, e.target.value);\n                }}\n              />\n            </Box>\n          </Box>\n        </Box>\n        <Box mt={3}>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>TWAP</Grid>\n                <Grid item>\n                  <b>{twap}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>GBonds amount</Grid>\n                <Grid item>\n                  <b>{Number(bondAmount).toFixed(2)}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container style={{color: '#930993'}} justifyContent=\"space-between\">\n                <Grid item>Ratio</Grid>\n                <Grid item>\n                  <b>1 / {ratio}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container style={{color: '#930993'}} justifyContent=\"space-between\">\n                <Grid item>Grapes redeemed</Grid>\n                <Grid item>\n                  <b>{grapeRedeemed}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default BondEstimatorModal;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCashPriceInLastTWAP.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/DashboardTop.tsx",["910","911","912","913","914","915","916","917","918"],"//@ts-nocheck\nimport {useMemo, useState, useEffect} from 'react';\nimport {useWallet} from 'use-wallet';\nimport {Grid, Typography, Card, CardContent, Tooltip} from '@material-ui/core';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport useBanks from '../../hooks/useBanks';\nimport useGrapeStats from '../../hooks/useGrapeStats';\nimport useWineStats from '../../hooks/useWineStats';\nimport useWalletStats from '../../hooks/useWalletStats';\nimport CountUp from 'react-countup';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport {getDisplayBalance} from '../../utils/formatBalance';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport grapeImg from '../../assets/img/grape.png';\nimport nodesImg from '../../assets/img/gnode.png';\nimport wineImg from '../../assets/img/gshare.png';\nimport soda from '../../assets/img/soda.png';\nimport {SyncLoader} from 'react-spinners';\nimport useXGrapePrice from '../../hooks/useXGrapePrice';\nimport useVintagePrice from '../../hooks/useVintagePrice';\nimport InfoIcon from '@mui/icons-material/Info';\n\nimport useSVintagePrice from '../../hooks/useSVintagePrice';\nimport {Link} from 'react-router-dom';\nimport DashboardTokenBox from './DashboardTokenBox';\nimport useWalletNodesAndNFTs from '../../hooks/useWalletNodesAndNFTs';\nimport useNodeRewardPoolStats from '../../hooks/useNodesRewardBalance';\nimport useGrapeTotalNode from '../../hooks/useGrapeTotalNodes';\nimport useWineTotalNode from '../../hooks/useWineTotalNodes';\nimport useGrapeMimSWTotalNode from '../../hooks/useGrapeMimSWTotalNode';\n\nimport {\n  GRAPE_NODE_MULTIPLIER,\n  WINE_NODE_MULTIPLIER,\n  GRAPEMIMSW_NODE_MULTIPLIER,\n  GOON_MULTIPLIER,\n  GLASS_MULTIPLIER,\n  DECANTER_MULTIPLIER,\n  GOBLET_MULTIPLIER,\n} from '../../utils/constants';\nimport DashboardNFTBox from './DashboardNFTBox';\nimport useLpStats from '../../hooks/useLpStats';\n\nconst DashboardTop = () => {\n  const {account} = useWallet();\n  const grapeFinance = useGrapeFinance();\n  const [banks] = useBanks();\n  const walletStats = useWalletStats(banks);\n  const grapeStats = useGrapeStats();\n  const grapeMimSWStats = useLpStats('GRAPE-MIM-SW');\n  const wineStats = useWineStats();\n\n  const grapeBalance = useTokenBalance(grapeFinance.GRAPE);\n  const displayGrapeBalance = useMemo(() => getDisplayBalance(grapeBalance, 18, 2), [grapeBalance]);\n  const wineBalance = useTokenBalance(grapeFinance.WINE);\n  const displayWineBalance = useMemo(() => getDisplayBalance(wineBalance, 18, 2), [wineBalance]);\n  const gbondBalance = useTokenBalance(grapeFinance.GBOND);\n  const displayGbondBalance = useMemo(() => getDisplayBalance(gbondBalance, 18, 2), [gbondBalance]);\n  const xGrapeBalance = useTokenBalance(grapeFinance.XGRAPE);\n  const vintageBalance = useTokenBalance(grapeFinance.VINTAGE);\n  const svintageBalance = useTokenBalance(grapeFinance.SVINTAGE);\n  const displayXGrapeBalance = useMemo(() => getDisplayBalance(xGrapeBalance, 18, 2), [xGrapeBalance]);\n  const displayVintageBalance = useMemo(() => getDisplayBalance(vintageBalance, 18, 2), [vintageBalance]);\n  const displaySVintageBalance = useMemo(() => getDisplayBalance(svintageBalance, 18, 2), [svintageBalance]);\n\n  const grapePriceInDollars = useMemo(\n    () => (grapeStats ? Number(grapeStats.priceInDollars).toFixed(2) : null),\n    [grapeStats],\n  );\n  const winePriceInDollars = useMemo(\n    () => (wineStats ? Number(wineStats.priceInDollars).toFixed(2) : null),\n    [wineStats],\n  );\n  const grapeMimSWPriceInDollars = useMemo(\n    () => (grapeMimSWStats ? Number(grapeMimSWStats.priceOfOne).toFixed(2) : null),\n    [grapeMimSWStats],\n  );\n\n  const xGrapePrice = useXGrapePrice();\n  const vintagePrice = useVintagePrice();\n  const sVintagePrice = useSVintagePrice();\n\n  const [userNftTickets, setUserNftTickets] = useState<number>();\n  const [userNodeTickets, setUserNodeTickets] = useState<number>();\n  const walletsNodesAndNFTs = useWalletNodesAndNFTs();\n  const nodeRewardPoolStats = useNodeRewardPoolStats();\n  const totalGrapeNodes = useGrapeTotalNode();\n  const totalWineNodes = useWineTotalNode();\n  const totalGrapeMIMSWNodes = useGrapeMimSWTotalNode();\n\n  useEffect(() => {\n    if (walletsNodesAndNFTs && account) {\n      setUserNodeTickets(\n        walletsNodesAndNFTs.grapes * GRAPE_NODE_MULTIPLIER +\n          walletsNodesAndNFTs.wines * WINE_NODE_MULTIPLIER +\n          walletsNodesAndNFTs.grapeMimSWs * GRAPEMIMSW_NODE_MULTIPLIER,\n      );\n\n      setUserNftTickets(\n        walletsNodesAndNFTs.goonBags * GOON_MULTIPLIER +\n          walletsNodesAndNFTs.glasses * GLASS_MULTIPLIER +\n          walletsNodesAndNFTs.decanters * DECANTER_MULTIPLIER +\n          walletsNodesAndNFTs.goblets * GOBLET_MULTIPLIER,\n      );\n    }\n  }, [walletsNodesAndNFTs, account]);\n\n  const getPriceForNodes = (coin: string) => {\n    if (coin === 'GRAPE') {\n      return Number((nodeRewardPoolStats.grapes * Number(grapePriceInDollars)).toFixed(0));\n    } else if (coin === 'WINE') {\n      return Number((nodeRewardPoolStats.wines * Number(winePriceInDollars)).toFixed(0));\n    } else if (coin === 'GRAPE-MIM SW') {\n      return Number((nodeRewardPoolStats.grapeMimSWs * Number(grapeMimSWPriceInDollars)).toFixed(0));\n    }\n  };\n\n  const getTotalPriceForNodes = () => {\n    return getPriceForNodes('GRAPE') + getPriceForNodes('WINE') + getPriceForNodes('GRAPE-MIM SW');\n  };\n\n  const allTicketsFromNFTs = 9600;\n  const allTicketsFromNodes = useMemo(() => {\n    if (totalGrapeNodes && totalWineNodes && totalGrapeMIMSWNodes && account) {\n      return Number(totalGrapeNodes) + Number(totalWineNodes[0]) + Number(totalGrapeMIMSWNodes[0]);\n    }\n    return null;\n  }, [totalGrapeNodes, totalWineNodes, totalGrapeMIMSWNodes, account]);\n\n  const totalTicketsWorth = useMemo(() => {\n    if (\n      nodeRewardPoolStats &&\n      grapePriceInDollars &&\n      allTicketsFromNodes &&\n      winePriceInDollars &&\n      grapeMimSWPriceInDollars &&\n      userNftTickets &&\n      userNodeTickets &&\n      account\n    ) {\n      return (\n        ((userNftTickets + userNodeTickets) * getTotalPriceForNodes()) / (allTicketsFromNodes + allTicketsFromNFTs)\n      );\n    }\n    return 0;\n  }, [\n    nodeRewardPoolStats,\n    allTicketsFromNodes,\n    grapePriceInDollars,\n    winePriceInDollars,\n    grapeMimSWPriceInDollars,\n    userNftTickets,\n    userNodeTickets,\n    account,\n  ]);\n\n  const totalInvested = useMemo(() => {\n    if (walletStats && account) {\n      return (\n        //walletStats.totalInNodes +\n        walletStats.totalInSodaPress +\n        walletStats.totalInVineyard +\n        walletStats.totalInWinePress +\n        walletStats.totalInSoleraPress +\n        walletStats.totalInWinery +\n        Number(displayGrapeBalance) * Number(grapePriceInDollars) +\n        Number(displayWineBalance) * Number(winePriceInDollars) +\n        Number(displayXGrapeBalance) * Number(xGrapePrice) +\n        Number(displayVintageBalance) * Number(vintagePrice)\n      );\n    }\n    return -1;\n  }, [walletStats, account]);\n\n  const totalRewards = useMemo(() => {\n    if (walletStats && account) {\n      // include individual tokens as well\n      return (\n        walletStats.rewardsInNodes +\n        walletStats.rewardsInSodaPress +\n        walletStats.rewardsInSoleraPress +\n        walletStats.rewardsInVineyard +\n        walletStats.rewardsInWinePress +\n        walletStats.rewardsInWinery\n      );\n    }\n    return -1;\n  }, [walletStats, account]);\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={12}>\n        <Grid container spacing={1}>\n          <Grid item xs={12} lg={6}>\n            <Card>\n              <CardContent>\n                <Grid container justifyContent=\"space-between\" alignContent=\"center\" alignItems=\"center\">\n                  <Grid item>\n                    <span style={{fontWeight: '700'}}>MY TOTAL</span>\n\n                    <Tooltip\n                      arrow\n                      placement=\"top\"\n                      enterDelay={0}\n                      title=\"Sum of all pools, rewards and individual tokens\"\n                      style={{verticalAlign: 'sub', paddingBottom: '1px'}}\n                    >\n                      <InfoIcon fontSize=\"small\" />\n                    </Tooltip>\n                  </Grid>\n                  <Grid item style={{fontWeight: 700}}>\n                    {totalInvested !== -1 ? (\n                      <CountUp end={totalInvested} separator=\",\" prefix=\"≈$\" />\n                    ) : (\n                      <SyncLoader color=\"white\" size={4} />\n                    )}\n                  </Grid>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span style={{color: '#f9b857', marginTop: '10px'}}>Rewards</span>\n                  </Grid>\n                  <Grid item>\n                    {totalRewards !== -1 ? (\n                      <CountUp end={Number(totalRewards)} separator=\",\" prefix=\"≈$\" />\n                    ) : (\n                      <SyncLoader color=\"white\" size={4} />\n                    )}\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={4} sm={4} md={4} lg={2}>\n            <Card>\n              <CardContent>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"dashboard-top-pool-category\">Vineyard</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"dashboard-top-pool-value\">\n                      {walletStats ? (\n                        <CountUp end={walletStats.totalInVineyard} separator=\",\" prefix=\"≈$\" />\n                      ) : (\n                        <SyncLoader color=\"white\" size={4} />\n                      )}\n                    </span>\n                  </Grid>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"dashboard-top-reward-label\">Rewards</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"dashboard-top-reward-value\">\n                      {walletStats != null ? (\n                        <CountUp end={Number(walletStats.rewardsInVineyard)} separator=\",\" prefix=\"≈$\" />\n                      ) : (\n                        <SyncLoader color=\"white\" size={4} />\n                      )}\n                    </span>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={4} sm={4} md={4} lg={2}>\n            <Card>\n              <CardContent>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"dashboard-top-pool-category\">Winery</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"dashboard-top-pool-value\">\n                      {walletStats ? (\n                        <CountUp end={walletStats.totalInWinery} separator=\",\" prefix=\"≈$\" />\n                      ) : (\n                        <SyncLoader color=\"white\" size={4} />\n                      )}\n                    </span>\n                  </Grid>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"dashboard-top-reward-label\">Rewards</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"dashboard-top-reward-value\">\n                      {walletStats != null ? (\n                        <CountUp end={Number(walletStats.rewardsInWinery)} separator=\",\" prefix=\"≈$\" />\n                      ) : (\n                        <SyncLoader color=\"white\" size={4} />\n                      )}\n                    </span>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Grid>\n          {/*<Grid item xs={6} sm={6} md={3} lg={2}>\n            <Card>\n              <CardContent>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"dashboard-top-pool-category\">Nodes</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"dashboard-top-pool-value\">\n                      {walletStats ? (\n                        <CountUp end={walletStats.totalInNodes} separator=\",\" prefix=\"≈$\" />\n                      ) : (\n                        <SyncLoader color=\"white\" size={4} />\n                      )}\n                    </span>\n                  </Grid>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"dashboard-top-reward-label\">Rewards</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"dashboard-top-reward-value\">\n                      {walletStats != null ? (\n                        <CountUp end={Number(walletStats.rewardsInNodes)} separator=\",\" prefix=\"≈$\" />\n                      ) : (\n                        <SyncLoader color=\"white\" size={4} />\n                      )}\n                    </span>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n                      </Grid>*/}\n\n          <Grid item xs={4} sm={4} md={4} lg={2}>\n            <Card>\n              <CardContent>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"dashboard-top-pool-category\">Presses</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"dashboard-top-pool-value\">\n                      {walletStats ? (\n                        <CountUp\n                          end={\n                            walletStats.totalInWinePress + walletStats.totalInSodaPress + walletStats.totalInSoleraPress\n                          }\n                          separator=\",\"\n                          prefix=\"≈$\"\n                        />\n                      ) : (\n                        <SyncLoader color=\"white\" size={4} />\n                      )}\n                    </span>\n                  </Grid>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"dashboard-top-reward-label\">Rewards</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"dashboard-top-reward-value\">\n                      {walletStats != null ? (\n                        <CountUp\n                          end={Number(\n                            walletStats.rewardsInWinePress +\n                              walletStats.rewardsInSodaPress +\n                              walletStats.rewardsInSoleraPress,\n                          )}\n                          separator=\",\"\n                          prefix=\"≈$\"\n                        />\n                      ) : (\n                        <SyncLoader color=\"white\" size={4} />\n                      )}\n                    </span>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Grid container spacing={1} justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid item xs={4} sm={4} md={2}>\n            <a\n              target=\"_blank\"\n              style={{textDecoration: 'none'}}\n              rel=\"noopener noreferrer\"\n              href=\"https://app.bogged.finance/avax/swap?tokenIn=0x130966628846BFd36ff31a822705796e8cb8C18D&tokenOut=0x5541D83EFaD1f281571B343977648B75d95cdAC2\"\n            >\n              <DashboardTokenBox\n                displayBalance={displayGrapeBalance}\n                tokenPrice={Number(grapePriceInDollars)}\n                tokenSymbol=\"GRAPE\"\n              />\n            </a>\n          </Grid>\n\n          <Grid item xs={4} sm={4} md={2}>\n            <a\n              target=\"_blank\"\n              style={{textDecoration: 'none'}}\n              rel=\"noopener noreferrer\"\n              href=\"https://app.bogged.finance/avax/swap?tokenIn=0x130966628846BFd36ff31a822705796e8cb8C18D&tokenOut=0xC55036B5348CfB45a932481744645985010d3A44\"\n            >\n              <DashboardTokenBox\n                displayBalance={displayWineBalance}\n                tokenPrice={Number(winePriceInDollars)}\n                tokenSymbol=\"WINE\"\n              />\n            </a>\n          </Grid>\n\n          <Grid item xs={4} sm={4} md={2}>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://xgrape.grapefinance.app/\"\n              style={{textDecoration: 'none'}}\n            >\n              <DashboardTokenBox\n                displayBalance={displayXGrapeBalance}\n                tokenPrice={Number(xGrapePrice)}\n                tokenSymbol=\"XGRAPE\"\n              />\n            </a>\n          </Grid>\n\n          <Grid item xs={4} sm={4} md={2}>\n            <a\n              style={{textDecoration: 'none'}}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://www.swapsicle.io/swap?inputCurrency=0x130966628846bfd36ff31a822705796e8cb8c18d&outputCurrency=0x01Af64EF39AEB5612202AA07B3A3829f20c395fd#/\"\n            >\n              <DashboardTokenBox\n                displayBalance={displayVintageBalance}\n                tokenPrice={vintagePrice}\n                tokenSymbol=\"VINTAGE\"\n              />\n            </a>\n          </Grid>\n\n          <Grid item xs={4} sm={4} md={2}>\n            <a\n              style={{textDecoration: 'none'}}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://www.swapsicle.io/swap?inputCurrency=0x130966628846bfd36ff31a822705796e8cb8c18d&outputCurrency=0x01Af64EF39AEB5612202AA07B3A3829f20c395fd#/\"\n            >\n              <DashboardTokenBox\n                displayBalance={displaySVintageBalance}\n                tokenPrice={sVintagePrice}\n                tokenSymbol=\"SOLERA\"\n              />\n            </a>\n          </Grid>\n\n          <Grid item xs={4} sm={4} md={2}>\n            <Link to=\"/bond\" style={{textDecoration: 'none'}}>\n              <DashboardTokenBox displayBalance={displayGbondBalance} tokenPrice={null} tokenSymbol=\"GBOND\" />\n            </Link>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Grid container spacing={1} justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid item xs={3} sm={3} md={3}>\n            <a\n              target=\"_blank\"\n              style={{textDecoration: 'none'}}\n              rel=\"noopener noreferrer\"\n              href=\"https://nftrade.com/collection/the-winery-collection?traitIds=db35524c-4e6a-4866-8b2f-cfd744414d5a&search=&sort=min_listed_desc&contractAddress=0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df&chainName=\"\n            >\n              <DashboardNFTBox count={walletsNodesAndNFTs?.goonBags} multiplier={GOON_MULTIPLIER} nftSymbol=\"GOONBAG\" />\n            </a>\n          </Grid>\n\n          <Grid item xs={3} sm={3} md={3}>\n            <a\n              target=\"_blank\"\n              style={{textDecoration: 'none'}}\n              rel=\"noopener noreferrer\"\n              href=\"https://nftrade.com/collection/the-winery-collection?traitIds=b7c9d938-0a64-486b-abbd-d337077ae642&search=&sort=min_listed_desc&contractAddress=0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df&chainName=\"\n            >\n              <DashboardNFTBox count={walletsNodesAndNFTs?.glasses} multiplier={GLASS_MULTIPLIER} nftSymbol=\"GLASS\" />\n            </a>\n          </Grid>\n\n          <Grid item xs={3} sm={3} md={3}>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://nftrade.com/collection/the-winery-collection?traitIds=503dbfba-488e-473a-b9bf-6d20c19e2446&search=&sort=min_listed_desc&contractAddress=0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df&chainName=\"\n              style={{textDecoration: 'none'}}\n            >\n              <DashboardNFTBox\n                count={walletsNodesAndNFTs?.decanters}\n                multiplier={DECANTER_MULTIPLIER}\n                nftSymbol=\"DECANTER\"\n              />\n            </a>\n          </Grid>\n\n          <Grid item xs={3} sm={3} md={3}>\n            <a\n              style={{textDecoration: 'none'}}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://nftrade.com/collection/the-winery-collection?traitIds=4a6117cf-14ec-4905-afc3-f4d56c1c3151&search=&sort=min_listed_desc&contractAddress=0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df&chainName=\"\n            >\n              <DashboardNFTBox count={walletsNodesAndNFTs?.goblets} multiplier={GOBLET_MULTIPLIER} nftSymbol=\"GOBLET\" />\n            </a>\n          </Grid>\n\n          {/*<Grid item xs={4} sm={4} md={2}>\n            <div className=\"dashboard-token-box\">\n              <div className=\"dashboard-token-box-inner\">\n                <Grid container justifyContent=\"center\" alignItems=\"flex-start\" spacing={1}>\n                  <Grid item>\n                    <TokenSymbol width={35} height={35} symbol={'NODE'} />\n                  </Grid>\n                  <Grid item>\n                    <Grid\n                      container\n                      direction={'column'}\n                      justifyContent=\"flex-start\"\n                      alignItems=\"flex-start\"\n                      spacing={0}\n                    >\n                      <Grid item className=\"lineValue\">\n                        Node Tickets\n                      </Grid>\n                      <Grid item className=\"wallet-token-value\">\n                        {userNodeTickets != null ? userNodeTickets : 'Loading'}\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </div>\n            </div>\n                      </Grid>\n\n          <Grid item xs={4} sm={4} md={2}>\n            <div className=\"dashboard-token-box\">\n              <div className=\"dashboard-token-box-inner\">\n                <Grid container justifyContent=\"center\" alignItems=\"flex-start\" spacing={1}>\n                  <Grid item>\n                    <Grid\n                      container\n                      direction={'column'}\n                      justifyContent=\"flex-start\"\n                      alignItems=\"flex-start\"\n                      spacing={0}\n                    >\n                      <Grid item className=\"lineValue\">\n                        Est. Next Airdrop\n                      </Grid>\n                      <Grid item className=\"wallet-token-value\">\n                        {totalTicketsWorth != null ? `~ $${totalTicketsWorth.toFixed(0)}` : 'Loading'}\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </div>\n            </div>\n          </Grid>*/}\n\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default DashboardTop;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/state/transactions/hooks.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/ether-utils.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/0x.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/NFTRaffle/components/ExchangeCard.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/constants.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/utils/formatBalance.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useBondsPurchasable.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useTokenBalance.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useBondStats.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Raffle/components/ExchangeCard.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useBanks.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/components/ExchangeCard.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/components/ExchangeStat.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/Presses.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/TokenSymbol/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/BoardroomCard.tsx",["919"],"//@ts-nocheck\nimport moment from 'moment';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Box, Grid, Accordion, AccordionDetails, AccordionSummary, useMediaQuery} from '@material-ui/core';\nimport useApprove, {ApprovalState} from '../../hooks/useApprove';\nimport ProgressCountdown from '../Winery/components/ProgressCountdown';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport useRedeemOnBoardroom from '../../hooks/useRedeemOnBoardroom';\nimport useStakedBalanceOnBoardroom from '../../hooks/useStakedBalanceOnBoardroom';\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\nimport useGetBoardroomPrintRate from '../../hooks/useGetBoardroomPrintRate';\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\nimport useTotalStakedOnBoardroom from '../../hooks/useTotalStakedOnBoardroom';\nimport useFetchBoardroomAPR from '../../hooks/useFetchBoardroomAPR';\nimport useClaimRewardCheck from '../../hooks/boardroom/useClaimRewardCheck';\nimport useWithdrawCheck from '../../hooks/boardroom/useWithdrawCheck';\nimport usebShareStats from '../../hooks/useWineStats';\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\nimport useBondStats from '../../hooks/useBondStats';\nimport useStakedTokenPriceInDollars from '../../hooks/useStakedTokenPriceInDollars';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport {getDisplayBalance} from '../../utils/formatBalance';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useUnstakeTimerBoardroom from '../../hooks/boardroom/useUnstakeTimerBoardroom';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport useStakeToBoardroom from '../../hooks/useStakeToBoardroom';\nimport useWithdrawFromBoardroom from '../../hooks/useWithdrawFromBoardroom';\nimport useHarvestFromBoardroom from '../../hooks/useHarvestFromBoardroom';\nimport useEarningsOnBoardroom from '../../hooks/useEarningsOnBoardroom';\nimport useGrapeStats from '../../hooks/useGrapeStats';\nimport useClaimRewardTimerBoardroom from '../../hooks/boardroom/useClaimRewardTimerBoardroom';\nimport {subscribe, unsubscribe} from '../../state/txEvent';\nimport {SyncLoader} from 'react-spinners';\n\nconst BoardroomCard = () => {\n  useEffect(() => {\n    subscribe('failedTx', () => {\n      setClaimLoading(false);\n      setWithdrawLoading(false);\n      setRedeemLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    subscribe('successTx', () => {\n      setWithdrawLoading(false);\n      setClaimLoading(false);\n      setRedeemLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    return () => {\n      unsubscribe('failedTx');\n      unsubscribe('successTx');\n    };\n  }, []);\n\n  const widthUnder600 = useMediaQuery('(max-width:600px)');\n  const widthUnder960 = useMediaQuery('(max-width:960px)');\n  const [inputValue, setInputValue] = useState<string>('');\n\n  const [loading, setLoading] = useState(true);\n  const [claimLoading, setClaimLoading] = useState(false);\n  const [depositingLoading, setDepositingLoading] = useState(false);\n  const [approveLoading, setApproveLoading] = useState(false);\n  const [redeemLoading, setRedeemLoading] = useState(false);\n  const [withdrawLoading, setWithdrawLoading] = useState(false);\n\n  const [activeDetailsBoxTab, setActiveDetailsBoxTab] = useState('Deposit');\n  const [expanded, setExpanded] = useState(false);\n  const expand = () => {\n    setExpanded(!expanded);\n  };\n\n  const grapeFinance = useGrapeFinance();\n  const stakedBalance = useStakedBalanceOnBoardroom();\n  const totalStaked = useTotalStakedOnBoardroom();\n  const currentEpoch = useCurrentEpoch();\n  const printRate = useGetBoardroomPrintRate();\n  const cashStat = useCashPriceInEstimatedTWAP();\n  const boardroomAPR = useFetchBoardroomAPR();\n  const canWithdraw = useWithdrawCheck();\n  const bShareStats = usebShareStats();\n  const nextEpoch = useTreasuryAllocationTimes();\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('WINE', grapeFinance.WINE);\n  const wineBalance = useTokenBalance(grapeFinance.WINE);\n  const earnings = useEarningsOnBoardroom();\n  const grapeStats = useGrapeStats();\n  const canClaim = useClaimRewardCheck();\n  const claimRewardTimer = useClaimRewardTimerBoardroom();\n  const withdrawTimer = useUnstakeTimerBoardroom();\n\n  const parsedStakedBalance = useMemo(() => (stakedBalance ? Number(stakedBalance) / 1e18 : null), [stakedBalance]);\n  const parsedTotalStaked = useMemo(() => (totalStaked ? Number(totalStaked) / 1e18 : null), [totalStaked]);\n  const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(3) : null), [cashStat]);\n  const bShareCirculatingSupply = useMemo(() => (bShareStats ? bShareStats.circulatingSupply : null), [bShareStats]);\n  const parsedWineBalance = useMemo(() => (wineBalance ? Number(wineBalance) / 1e18 : null), [wineBalance]);\n  const tokenPriceInDollars = useMemo(\n    () =>\n      stakedTokenPriceInDollars\n        ? (Number(stakedTokenPriceInDollars) * parsedStakedBalance).toFixed(2).toString()\n        : null,\n    [stakedTokenPriceInDollars, parsedStakedBalance],\n  );\n  const parsedEarnings = useMemo(() => (earnings ? Number(earnings) / 1e18 : null), [earnings]);\n  const grapePriceInDollars = useMemo(\n    () => (grapeStats ? Number(grapeStats.priceInDollars).toFixed(2) : null),\n    [grapeStats],\n  );\n\n  const rewards = (boardroomAPR / 365 / 100) * Number(tokenPriceInDollars);\n  const percentageStaked =\n    parsedTotalStaked && bShareCirculatingSupply\n      ? ((parsedTotalStaked * 100) / Number(bShareCirculatingSupply)).toFixed(2)\n      : null;\n  const tvl = parsedTotalStaked * Number(stakedTokenPriceInDollars);\n  const earnedInDollars =\n    parsedEarnings && grapePriceInDollars ? (Number(grapePriceInDollars) * parsedEarnings).toFixed(2) : null;\n\n  const {approveStatus, approve} = useApprove(grapeFinance.WINE, grapeFinance.contracts.Boardroom.address);\n  const {onRedeem} = useRedeemOnBoardroom();\n  const {onStake} = useStakeToBoardroom();\n  const {onWithdraw} = useWithdrawFromBoardroom();\n  const {onReward} = useHarvestFromBoardroom();\n\n  const maxClicked = () => {\n    if (activeDetailsBoxTab === 'Deposit') {\n      setInputValue(parsedWineBalance.toString());\n    } else if (activeDetailsBoxTab === 'Withdraw') {\n      setInputValue(parsedStakedBalance.toString());\n    }\n  };\n\n  const stake = () => {\n    if (Number(inputValue) > 0) {\n      setDepositingLoading(true);\n      onStake(inputValue.toString());\n    }\n  };\n\n  const withdraw = () => {\n    if (Number(inputValue) > 0) {\n      setWithdrawLoading(true);\n      onWithdraw(inputValue.toString());\n    }\n  };\n\n  const updateInput = (event: any) => {\n    setInputValue(event.target.value);\n  };\n\n  useEffect(() => {\n    if (stakedBalance != null && parsedEarnings != null && tvl) {\n      setLoading(false);\n    }\n  }, [stakedBalance, parsedEarnings, tvl]);\n\n  return (\n    <Accordion expanded={expanded} onChange={expand} className=\"accordion\">\n      <AccordionSummary\n        expandIcon={loading ? <SyncLoader color=\"white\" size={4} /> : <ExpandMoreIcon style={{color: 'white'}} />}\n        aria-controls=\"panel1bh-content\"\n        id=\"panel1bh-header\"\n      >\n        <Grid container justifyContent=\"space-between\" className=\"lineItemInner\" spacing={1}>\n          <Grid item className=\"lineName\" xs={12} sm={12} md={4}>\n            <Grid container justifyContent=\"flex-start\" alignItems=\"center\" spacing={2}>\n              <Grid item>\n                <TokenSymbol symbol={'WINE'} height={30} width={30} />\n              </Grid>\n              <Grid item>\n                <div>Winery (earn GRAPE)</div>\n\n                {Number(scalingFactor) >= 1.01 ? (\n                  <div className=\"lineLabel printing\">Status: Printing</div>\n                ) : (\n                  <div className=\"lineLabel not-printing\">Status: Not Printing</div>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sm={6} md={2}>\n            <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n              <Grid item>\n                <div className=\"lineLabel\">Deposited</div>\n              </Grid>\n              <Grid item>\n                <div className=\"lineValueDeposited\">\n                  <span style={{color: '#fcfcfc'}}>\n                    {stakedBalance ? getDisplayBalance(stakedBalance, 18, 2) : '0'}\n                  </span>\n                  <span style={{marginLeft: '5px', fontSize: '14px'}}>(${tokenPriceInDollars})</span>\n                </div>{' '}\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sm={6} md={2}>\n            <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n              <Grid item>\n                <div className=\"lineLabel\">Rewards</div>\n              </Grid>\n              <Grid item>\n                <div className=\"lineValueDeposited\">\n                  <span style={{color: '#fcfcfc'}}>{parsedEarnings ? parsedEarnings : '0'}</span>\n                  <span style={{marginLeft: '5px', fontSize: '14px'}}>\n                    (${earnedInDollars ? earnedInDollars : '0'})\n                  </span>\n                </div>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            sm={6}\n            md={2}\n            style={{marginTop: widthUnder960 ? '15px' : '0', textAlign: widthUnder960 ? 'center' : 'left'}}\n          >\n            <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n              <Grid item>\n                <div className=\"lineLabel\">APR Yearly | Daily</div>\n              </Grid>\n              <Grid item>\n                <div className=\"lineValue\">\n                  {boardroomAPR.toFixed(0)}% | {(boardroomAPR / 365).toFixed(2)}%\n                </div>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            sm={6}\n            md={2}\n            style={{marginTop: widthUnder960 ? '15px' : '0', textAlign: widthUnder960 ? 'center' : 'left'}}\n          >\n            <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n              <Grid item>\n                <div className=\"lineLabel\">TVL</div>\n              </Grid>\n              <Grid item>\n                <div className=\"lineValue\">\n                  ${tvl ? Number(Number(tvl).toFixed(0)).toLocaleString('en-US') : '-.--'}\n                </div>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </AccordionSummary>\n      <AccordionDetails style={{overflow: 'hidden'}}>\n        <Grid container direction=\"column\" spacing={2}>\n          <Grid item>\n            <Grid container spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n              <Grid item xs={6} md={3}>\n                <div className=\"statBox\">\n                  <div className=\"statBoxInner\">\n                    <div className=\"lineLabel\">Est Reward /day</div>\n                    <div className=\"lineValueDeposited\">\n                      {Number(scalingFactor) >= 1.01 ? (\n                        <span>~${rewards ? Number(rewards).toLocaleString('en-US') : '0.00'}</span>\n                      ) : (\n                        <span className=\"lineLabel not-printing\">Not Printing</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={6} md={3}>\n                <div className=\"statBox\">\n                  <div className=\"statBoxInner\">\n                    <div className=\"lineLabel\">TWAP</div>\n                    <div className=\"lineValue\">{scalingFactor ? scalingFactor : '-.--'}</div>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={6} md={3}>\n                <div className=\"statBox\">\n                  <div className=\"statBoxInner\">\n                    <div className=\"lineLabel\">WINE Staked</div>\n                    <div className=\"lineValue\">{getDisplayBalance(totalStaked, 18, 2)}</div>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={6} md={3}>\n                <div className=\"statBox\">\n                  <div className=\"statBoxInner\">\n                    <div className=\"lineLabel\">% WINE Staked</div>\n                    <div className=\"lineValue\">{percentageStaked}%</div>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={6} md={3}>\n                <div className=\"statBox\">\n                  <div className=\"statBoxInner\">\n                    <div className=\"lineLabel\">Your Share of Pool</div>\n                    <div className=\"lineValue\">\n                      {((parsedStakedBalance * 100) / (Number(totalStaked) / 1e18)).toFixed(2)}%\n                    </div>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={6} md={3}>\n                <div className=\"statBox\">\n                  <div className=\"statBoxInner\">\n                    <div className=\"lineLabel\">Epochs Above Peg</div>\n                    <div className=\"lineValue\">{printRate.toFixed(2)}%</div>\n                  </div>\n                </div>\n              </Grid>\n\n              <Grid item xs={6} md={3}>\n                <div className=\"statBox\">\n                  <div className=\"statBoxInner\">\n                    <div className=\"lineLabel\">Next Epoch</div>\n                    <div className=\"lineValue\">\n                      {' '}\n                      <ProgressCountdown\n                        base={moment().toDate()}\n                        hideBar={true}\n                        deadline={nextEpoch?.to}\n                        description=\"Next Epoch\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={6} md={3}>\n                <div className=\"statBox\">\n                  <div className=\"statBoxInner\">\n                    <div className=\"lineLabel\">Current Epoch</div>\n                    <div className=\"lineValue\">{Number(currentEpoch)}</div>\n                  </div>\n                </div>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Grid container spacing={5}>\n              <Grid item xs={12} sm={12} md={6}>\n                <Box className=\"lineDetailsBox\">\n                  <div className=\"line-details-inner\">\n                    <Grid container justifyContent=\"space-evenly\" spacing={2}>\n                      <Grid\n                        item\n                        className={activeDetailsBoxTab === 'Deposit' ? 'tabDetailsItemActive' : 'tabDetailsItem'}\n                        onClick={() => setActiveDetailsBoxTab('Deposit')}\n                      >\n                        DEPOSIT\n                      </Grid>\n                      <Grid\n                        item\n                        className={activeDetailsBoxTab === 'Withdraw' ? 'tabDetailsItemActive' : 'tabDetailsItem'}\n                        onClick={() => setActiveDetailsBoxTab('Withdraw')}\n                      >\n                        WITHDRAW\n                      </Grid>\n                    </Grid>\n\n                    <div className=\"inputDetailsBox\">\n                      <Box className=\"box-price-of-one color-secondary\">\n                        1 WINE = ${stakedTokenPriceInDollars ? Number(stakedTokenPriceInDollars).toFixed(3) : '0.000'}\n                      </Box>\n                      <div className=\"inputDetailsBoxInner\">\n                        {' '}\n                        <Grid container justifyContent=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n                          <Grid item xs={10} md={11}>\n                            <input\n                              placeholder=\"Enter amount\"\n                              className=\"amount-input\"\n                              value={inputValue}\n                              onChange={updateInput}\n                            />\n                          </Grid>\n                          <Grid item xs={2} md={1} className=\"color-secondary\">\n                            <div onClick={maxClicked} className=\"max-button\">\n                              MAX\n                            </div>\n                          </Grid>\n                        </Grid>\n                        <div className=\"balance\">\n                          {activeDetailsBoxTab === 'Deposit' && <span>Wallet: {parsedWineBalance} WINE</span>}\n                          {activeDetailsBoxTab === 'Withdraw' && <span>Staked: {parsedStakedBalance} WINE</span>}\n                        </div>\n                      </div>\n                      {!canWithdraw && withdrawTimer && withdrawTimer.from && withdrawTimer.to && (\n                        <Box mt={2}>\n                          <div className=\"pending-rewards\">\n                            Withdraw possible in{' '}\n                            <span className=\"withdraw-time-left\">\n                              <ProgressCountdown\n                                hideBar={true}\n                                base={withdrawTimer.from}\n                                deadline={withdrawTimer.to}\n                                description=\"Withdraw available in\"\n                              />\n                            </span>\n                          </div>\n                        </Box>\n                      )}\n                    </div>\n                  </div>\n                  <Box>\n                    <Grid container justifyContent=\"center\">\n                      {activeDetailsBoxTab === 'Deposit' && (\n                        <>\n                          {approveStatus !== ApprovalState.APPROVED ? (\n                            <>\n                              <Grid item xs={12}>\n                                <button\n                                  onClick={() => {\n                                    setApproveLoading(true);\n                                    approve();\n                                  }}\n                                  style={{\n                                    borderTopLeftRadius: '0',\n                                    borderTopRightRadius: '0',\n                                  }}\n                                  className=\"primary-button\"\n                                  title=\"Approve\"\n                                >\n                                  {approveLoading ? (\n                                    <span>\n                                      <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                      APPROVING\n                                    </span>\n                                  ) : (\n                                    <span>APPROVE</span>\n                                  )}\n                                </button>\n                              </Grid>\n                            </>\n                          ) : (\n                            <>\n                              <Grid item xs={12}>\n                                <button\n                                  disabled={Number(inputValue) === 0 || inputValue === ''}\n                                  onClick={stake}\n                                  className=\"primary-button\"\n                                  style={{\n                                    borderTopLeftRadius: '0',\n                                    borderTopRightRadius: '0',\n                                  }}\n                                  title=\"Deposit\"\n                                >\n                                  {depositingLoading ? (\n                                    <span>\n                                      <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                      DEPOSITING\n                                    </span>\n                                  ) : (\n                                    <span>DEPOSIT</span>\n                                  )}\n                                </button>\n                              </Grid>\n                            </>\n                          )}\n                        </>\n                      )}\n                      {activeDetailsBoxTab === 'Withdraw' && (\n                        <>\n                          <Grid item xs={12}>\n                            {activeDetailsBoxTab === 'Withdraw' && (\n                              <button\n                                disabled={Number(inputValue) <= 0 || !canWithdraw}\n                                onClick={withdraw}\n                                style={{\n                                  borderTopLeftRadius: '0',\n                                  borderTopRightRadius: '0',\n                                }}\n                                className=\"secondary-button\"\n                                title=\"Withdraw\"\n                              >\n                                {withdrawLoading ? (\n                                  <span>\n                                    <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                    WITHDRAWING\n                                  </span>\n                                ) : (\n                                  <span>WITHDRAW</span>\n                                )}\n                              </button>\n                            )}\n                          </Grid>\n                        </>\n                      )}\n                    </Grid>\n                  </Box>\n                </Box>\n              </Grid>\n\n              <Grid item xs={12} sm={12} md={6}>\n                <Box className=\"lineDetailsBox\">\n                  <div className=\"line-details-inner\">\n                    <Box>\n                      <div className=\"pending-rewards\">PENDING REWARDS</div>\n                    </Box>\n\n                    <Box style={{textAlign: 'center'}} mt={2}>\n                      <TokenSymbol symbol=\"GRAPE\" width={60} height={60} />\n                    </Box>\n                    <Box mt={2}>\n                      <Grid\n                        container\n                        direction=\"column\"\n                        spacing={0}\n                        justifyContent=\"center\"\n                        alignContent=\"center\"\n                        alignItems=\"center\"\n                      >\n                        <Grid item className=\"rewardTokenAmount\">\n                          {parsedEarnings} GRAPE\n                        </Grid>\n                        <Grid item className=\"rewardTokenValue\">\n                          <span className=\"lineValueDeposited\">${earnedInDollars ? earnedInDollars : '0.00'}</span>\n                        </Grid>\n                      </Grid>\n                    </Box>\n\n                    {!canClaim && claimRewardTimer && claimRewardTimer.from && claimRewardTimer.to && (\n                      <Box mt={2}>\n                        <div className=\"pending-rewards\">\n                          Claim possible in\n                          <span className=\"time-left\">\n                            <ProgressCountdown\n                              hideBar={true}\n                              base={claimRewardTimer.from}\n                              deadline={claimRewardTimer.to}\n                              description=\"Withdraw available in\"\n                            />\n                          </span>\n                        </div>\n                      </Box>\n                    )}\n                  </div>\n                  <Box>\n                    <Grid container justifyContent=\"space-between\">\n                      <Grid item xs={6}>\n                        <button\n                          disabled={earnings.eq(0) || (!canClaim && !canWithdraw)}\n                          style={{borderTopLeftRadius: '0', borderTopRightRadius: '0', borderBottomRightRadius: '0'}}\n                          className=\"secondary-button\"\n                          title=\"Claim & Withdraw\"\n                          onClick={() => {\n                            setRedeemLoading(true);\n                            onRedeem();\n                          }}\n                        >\n                          {redeemLoading ? (\n                            <span>\n                              <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                              CLAIMING & WITHDRAWING\n                            </span>\n                          ) : (\n                            <span>CLAIM & WITHDRAW</span>\n                          )}\n                        </button>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <button\n                          style={{borderTopLeftRadius: '0', borderTopRightRadius: '0', borderBottomLeftRadius: '0'}}\n                          disabled={earnings.eq(0) || !canClaim}\n                          className=\"primary-button\"\n                          title=\"Claim\"\n                          onClick={() => {\n                            setClaimLoading(true);\n                            onReward();\n                          }}\n                        >\n                          {claimLoading ? (\n                            <span>\n                              <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                              CLAIMING\n                            </span>\n                          ) : (\n                            <span>CLAIM</span>\n                          )}\n                        </button>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default BoardroomCard;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/Farms.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/LaunchCountdown/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Chart/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useRefresh.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useLpStats.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/UnlockWallet/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/utils/constants.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/config.ts",["920"],"import {Deployments} from './deployments';\nimport {ChainId} from '@traderjoe-xyz/sdk';\n\nexport type Configuration = {\n  chainId: 43114;\n  networkName: string;\n  ftmscanUrl: string;\n  defaultProvider: string;\n  deployments: Deployments;\n  externalTokens: {[contractName: string]: [string, number, [string, string]?]};\n  config?: EthereumConfig;\n\n  baseLaunchDate: Date;\n  bondLaunchesAt: Date;\n  boardroomLaunchesAt: Date;\n\n  refreshInterval: number;\n};\n\nexport type EthereumConfig = {\n  testing: boolean;\n  autoGasMultiplier: number;\n  defaultConfirmations: number;\n  defaultGas: string;\n  defaultGasPrice: string;\n  ethereumNodeTimeout: number;\n};\n\nexport const defaultEthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 3,\n  defaultGas: '6000000',\n  defaultGasPrice: '7000000000000',\n  ethereumNodeTimeout: 10000,\n};\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/DashboardNFTBox.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Spacer/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useModal.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/NFTRaffle/components/ExchangeModal.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGrapeMimSWTotalNode.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWineTotalNodes.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGrapeTotalNodes.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Raffle/components/ExchangeModal.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useApprove.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCatchError.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWineStats.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useHarvestFromBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useEarningsOnBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakeToBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useTreasuryAllocationTimes.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGrapeStats.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWithdrawFromBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakedTokenPriceInDollars.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/boardroom/useUnstakeTimerBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/boardroom/useClaimRewardTimerBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/SolerapressCard.tsx",["921","922","923","924"],"//@ts-nocheck\nimport React, {useMemo, useState, useEffect} from 'react';\nimport {Box, Grid, Accordion, AccordionDetails, AccordionSummary, useMediaQuery} from '@material-ui/core';\nimport InfoIcon from '@mui/icons-material/Info';\n\nimport {Bank} from '../../grape-finance';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ProgressCountdown from './ProgressCountdown';\nimport moment from 'moment';\nimport {getFullDisplayBalance} from '../../utils/formatBalance';\nimport useClaimPress from '../../hooks/useClaimPress';\nimport useCompoundPress from '../../hooks/useCompoundPress';\nimport useStakePress from '../../hooks/useStakePress';\nimport FormControl from '@material-ui/core/FormControl';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport useApprove, {ApprovalState} from '../../hooks/useApprove';\nimport usePressLottoInfo from '../../hooks/usePressLottoInfo';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useZapStakePress from '../../hooks/useZapStakePress';\nimport usePoolBalance from '../../hooks/usePoolBalance';\nimport {styled} from '@mui/material/styles';\nimport Tooltip, {TooltipProps, tooltipClasses} from '@mui/material/Tooltip';\nimport useGetPressUsersNearAssassination from '../../hooks/useGetPressUsersNearAssassination';\nimport useAssassinatePress from '../../hooks/useAssassinatePress';\nimport useSodapressUserInfo from '../../hooks/useSodapressUserInfo';\nimport useSolerapressUserInfo from '../../hooks/useSolerapressUserInfo';\nimport {subscribe, unsubscribe} from '../../state/txEvent';\nimport {SyncLoader} from 'react-spinners';\nimport useBurnGrapePress from '../../hooks/useBurnGrapePress';\nimport PressClaimModal from './PressClaimModal';\nimport useModal from '../../hooks/useModal';\n\nconst GRAPE_PER_BATCH = 10;\n\ninterface SolerapressCardProps {\n  displayName: string;\n  bank: Bank;\n  activesOnly: boolean;\n}\n\nconst LightTooltip = styled(({className, ...props}: TooltipProps) => (\n  <Tooltip {...props} classes={{popper: className}} />\n))(({theme}) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    boxShadow: theme.shadows[1],\n    fontSize: 11,\n  },\n}));\n\nconst SolerapressCard: React.FC<SolerapressCardProps> = ({displayName, bank, activesOnly}) => {\n  const widthUnder600 = useMediaQuery('(max-width:600px)');\n\n  const [loading, setLoading] = useState(true);\n\n  const grapeFinance = useGrapeFinance();\n  const pressUserInfo = useSolerapressUserInfo();\n  const pressLottoInfo = usePressLottoInfo(bank.name);\n  const usersNearAssassination = useGetPressUsersNearAssassination(bank.name);\n\n  const depositTokenBalance = useTokenBalance(bank.depositToken);\n  const mimTokenBalance = useTokenBalance(grapeFinance.MIM);\n  const grapeTokenBalance = useTokenBalance(grapeFinance.GRAPE);\n\n  const pressBalance = usePoolBalance(grapeFinance.externalTokens[bank.depositTokenName], bank.address);\n\n  const depositTokenApprove = useApprove(bank.depositToken, bank.address);\n  const mimTokenApprove = useApprove(grapeFinance.MIM, bank.address);\n  const grapeTokenApprove = useApprove(grapeFinance.GRAPE, grapeFinance.contracts[bank.name + 'Lotto'].address);\n\n  useEffect(() => {\n    subscribe('failedTx', () => {\n      setClaimLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    subscribe('successTx', () => {\n      console.log('SUCCESS TX');\n      setClaimLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    return () => {\n      unsubscribe('failedTx');\n      unsubscribe('successTx');\n    };\n  }, []);\n  const {onClaim} = useClaimPress(bank);\n  const {onCompound} = useCompoundPress(bank);\n  const {onStake} = useStakePress(bank);\n  const {onZapAndStake} = useZapStakePress(bank);\n  const {onAssassinate} = useAssassinatePress(bank);\n  const {onBurnGrape} = useBurnGrapePress(bank);\n\n  const [expanded, setExpanded] = useState(false);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [payWith, setPayWith] = useState(bank.depositTokenName);\n  const [batchAmount, setBatchAmount] = useState('');\n  const [claimLoading, setClaimLoading] = useState(false);\n  const [depositingLoading, setDepositingLoading] = useState(false);\n  const [approveLoading, setApproveLoading] = useState(false);\n  const [compoundLoading, setCompoundLoading] = useState(false);\n\n  const displayDailyAPR = useMemo(\n    () => (pressUserInfo ? (Number(pressUserInfo.rewardsPerDay) * 100) / pressUserInfo.totalDeposited : null),\n    [pressUserInfo],\n  );\n\n  const displayRemainingTime = useMemo(() => {\n    if (pressLottoInfo) {\n      const dateTo = new Date();\n      dateTo.setSeconds(dateTo.getSeconds() + Number(pressLottoInfo.timeLeftUntilNewDay));\n      return dateTo;\n    }\n    return null;\n  }, [pressLottoInfo]);\n\n  const numGrapeToBurn = useMemo(() => {\n    if (!batchAmount) return '';\n    return Number(batchAmount) * GRAPE_PER_BATCH;\n  }, [batchAmount]);\n\n  useEffect(() => {\n    if (pressUserInfo != null && displayDailyAPR != null) {\n      setLoading(false);\n    }\n  }, [pressUserInfo, displayDailyAPR]);\n\n  // Custom functions\n  const expand = () => {\n    setExpanded(!expanded);\n  };\n\n  const stake = () => {\n    if (Number(inputValue) > 0) {\n      if (payWith === bank.depositTokenName) {\n        onStake(inputValue);\n      } else {\n        onZapAndStake(inputValue, payWith);\n      }\n    }\n  };\n\n  const burn = () => {\n    if (Number(batchAmount) > 0) {\n      onBurnGrape(Number(batchAmount));\n    }\n  };\n\n  const handleBatchAmountChanged = (e: any) => {\n    if (isNaN(Number(e.target.value))) return;\n    setBatchAmount(e.target.value);\n  };\n\n  const maxClicked = () => {\n    setInputValue(getFullDisplayBalance(payWith === 'MIM' ? mimTokenBalance : depositTokenBalance, 18));\n  };\n\n  const maxBatchClicked = () => {\n    const batches = Math.floor(Number(grapeTokenBalance) / 1e18 / 10);\n    setBatchAmount(batches.toFixed(0));\n  };\n\n  const updateInput = (event: any) => {\n    setInputValue(event.target.value);\n  };\n\n  const handlePayWithChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPayWith(event.target.value);\n  };\n\n  const approve = () => {\n    if (payWith === 'MIM') {\n      mimTokenApprove.approve();\n      return;\n    }\n    depositTokenApprove.approve();\n  };\n\n  const showApprove = () => {\n    return (\n      (payWith === 'MIM' && mimTokenApprove.approveStatus !== ApprovalState.APPROVED) ||\n      (payWith === bank.depositTokenName && depositTokenApprove.approveStatus !== ApprovalState.APPROVED)\n    );\n  };\n\n  const shortenAddress = (addr: string) => {\n    if (!addr) return '';\n    return addr.slice(0, 6) + '...' + addr.slice(addr.length - 4, addr.length);\n  };\n\n  const assassinate = (user: string) => {\n    onAssassinate(user);\n  };\n\n  const modalCallback = (action: string) => {\n    if (action === 'Cancel') {\n      onDismissModal();\n    }\n    if (action === 'Claim') {\n      onDismissModal();\n      setClaimLoading(true);\n      onClaim();\n    }\n  };\n\n  const [onPresentModal, onDismissModal] = useModal(\n    <PressClaimModal shares={pressUserInfo?.pendingShares} callback={modalCallback} />,\n  );\n\n  return (\n    <>\n      {(activesOnly === false || (activesOnly === true && pressUserInfo && pressUserInfo.totalTracked > 0)) && (\n        <Accordion expanded={expanded} onChange={expand} className=\"accordion\">\n          <AccordionSummary\n            expandIcon={loading ? <SyncLoader color=\"white\" size={4} /> : <ExpandMoreIcon style={{color: 'white'}} />}\n            aria-controls=\"panel1bh-content\"\n            id=\"panel1bh-header\"\n          >\n            <Grid container justifyContent={'space-between'} alignItems=\"center\" className=\"lineItemInner\" spacing={1}>\n              <Grid item className=\"lineName\" xs={12} sm={12} md={4}>\n                <Grid container justifyContent=\"flex-start\" alignItems=\"center\" spacing={2} wrap=\"nowrap\">\n                  <Grid item>\n                    <TokenSymbol symbol={bank.depositTokenName} height={30} width={30} />\n                  </Grid>\n                  <Grid item>\n                    <div>{displayName}</div>\n                    <div className=\"lineDescription\">\n                      Lock {bank.depositTokenName} and earn up to 350% back in {bank.depositTokenName}\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">\n                      {' '}\n                      Total Tracked{' '}\n                      <LightTooltip arrow placement=\"top\" enterDelay={0} title=\"Token Deposited + Compounded\">\n                        <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                      </LightTooltip>\n                    </div>\n                  </Grid>\n                  <Grid item>\n                    {' '}\n                    <div className=\"lineValueDeposited\">\n                      <span style={{color: '#fcfcfc'}}>\n                        {pressUserInfo ? pressUserInfo.totalTracked.toFixed(2) : '0.00'} LP\n                      </span>\n                      <span style={{marginLeft: '5px', fontSize: '14px'}}>\n                        ($\n                        {pressUserInfo\n                          ? (pressUserInfo.totalTracked * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                          : '0.00'}\n                        )\n                      </span>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">Rewards</div>\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValueDeposited\">\n                      <span style={{color: '#fcfcfc'}}>\n                        {pressUserInfo ? pressUserInfo.totalClaimable.toFixed(2) : '0.00'} LP\n                      </span>\n                      <span style={{marginLeft: '5px', fontSize: '14px'}}>\n                        ($\n                        {pressUserInfo\n                          ? (pressUserInfo.totalClaimable * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                          : '0.00'}\n                        )\n                      </span>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">\n                      APR Yearly | Daily{' '}\n                      <LightTooltip\n                        arrow\n                        placement=\"top\"\n                        enterDelay={0}\n                        title=\"Base APR is 1.25%, then changes based on your deposits, compounds and claims\"\n                      >\n                        <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                      </LightTooltip>\n                    </div>{' '}\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValue\">\n                      {displayDailyAPR ? (displayDailyAPR * 365).toFixed(0) : '456'}% |{' '}\n                      {displayDailyAPR ? displayDailyAPR.toFixed(2) : '1.25'}%\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">Total Deposited</div>\n                  </Grid>\n                  <Grid item>\n                    ${pressUserInfo ? pressUserInfo.tvl.toLocaleString('en-US', {maximumFractionDigits: 2}) : '0.00'}\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </AccordionSummary>\n          <AccordionDetails style={{overflow: 'hidden'}}>\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item>\n                <Grid container spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">Est. Reward /day</div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.rewardsPerDay.toFixed(2) : '0.00'} LP\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (pressUserInfo.rewardsPerDay * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Your Deposits{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Shows 90% of the sum of all your deposits\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.totalDeposited.toFixed(2) : '0.00'} LP{' '}\n                          <span className=\"wallet-token-value\">\n                            ($\n                            {pressUserInfo\n                              ? (pressUserInfo.totalDeposited * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Your Compounds{' '}\n                          <LightTooltip arrow placement=\"top\" enterDelay={0} title=\"Sum of all your compounds\">\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? (pressUserInfo.totalTracked - pressUserInfo.totalDeposited).toFixed(2)\n                            : '0.00'}{' '}\n                          LP\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  (pressUserInfo.totalTracked - pressUserInfo.totalDeposited) *\n                                  Number(pressUserInfo.depositTokenPrice)\n                                ).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Assassination Tracker{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"You don't want to reach 3.5... ((tracked share in token - tracked token balance) / tracked token balance)\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.profitRatio.toFixed(2) : '0.00'} / 3.5\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Contract Balance{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Amount of Token left in the Contract\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressBalance\n                            ? (Number(pressBalance) / 1e18).toLocaleString('en-US', {maximumFractionDigits: 2})\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressBalance && pressUserInfo\n                              ? (\n                                  (Number(pressBalance) / 1e18) *\n                                  Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Remaining Shares | Tokens{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Your Remaining shares in the pool. Claiming while 'Remaining Shares' = 'Pending Shares' kicks out of the Press.\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? `${pressUserInfo.currentShares.toFixed(2)} | ${pressUserInfo.currentSharesInToken.toFixed(\n                                2,\n                              )} LP`\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  Number(pressUserInfo.currentSharesInToken) * Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Pending Shares | Tokens{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Compounding allows you to have a greater return than your initial.\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? `${pressUserInfo.pendingShares.toFixed(2)} | ${pressUserInfo.pendingSharesInToken.toFixed(\n                                2,\n                              )} LP`\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  Number(pressUserInfo.pendingSharesInToken) * Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Claimed Shares{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Total Shares claimed so far. (Total Share Balance - Current Share Balance)\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.claimedInShares.toFixed(2) : '0.00'}\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <Grid container spacing={5}>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">DEPOSIT IN {bank.name}</div>\n                        </Box>\n                        <Box mt={2}>\n                          <FormControl>\n                            <RadioGroup\n                              row\n                              aria-labelledby=\"row-radio-buttons-group-label\"\n                              name=\"row-radio-buttons-group\"\n                              value={payWith}\n                              onChange={handlePayWithChange}\n                            >\n                              <FormControlLabel\n                                value={bank.depositTokenName}\n                                control={<Radio />}\n                                label={bank.depositTokenName}\n                              />\n\n                              {/*<FormControlLabel value=\"MIM\" control={<Radio />} label=\"MIM\" />*/}\n                            </RadioGroup>\n                          </FormControl>\n                        </Box>\n                        <div className=\"node-inputDetailsBox\">\n                          <Box className=\"box-price-of-one color-secondary\">\n                            1 share = {pressUserInfo ? pressUserInfo.priceOfOneShare.toFixed(2) : '0.00'}{' '}\n                            {bank.depositTokenName} = $\n                            {pressUserInfo\n                              ? (pressUserInfo.priceOfOneShare * pressUserInfo.depositTokenPrice).toFixed(3)\n                              : '0.000'}\n                          </Box>\n                          <div className=\"inputDetailsBoxInner\">\n                            <Grid container justifyContent=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n                              <Grid item xs={10} md={11}>\n                                <input\n                                  type=\"number\"\n                                  placeholder=\"Enter amount\"\n                                  className=\"amount-input\"\n                                  value={inputValue}\n                                  onChange={updateInput}\n                                />\n                              </Grid>\n                              <Grid item xs={2} md={1} className=\"color-secondary\">\n                                <div onClick={maxClicked} className=\"max-button\">\n                                  MAX\n                                </div>\n                              </Grid>\n                            </Grid>\n                            <div className=\"balance\">\n                              <span>\n                                Wallet:{' '}\n                                {getFullDisplayBalance(payWith === 'MIM' ? mimTokenBalance : depositTokenBalance, 18)}{' '}\n                                {payWith}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <Box mt={2}>\n                          <a\n                            style={{textDecoration: 'none'}}\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            href=\"https://winemaker.grapefinance.app/\"\n                          >\n                            <div className=\"addRemoveLiquidity color-secondary\">Farm Vintage for sVintage</div>\n                          </a>\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={12}>\n                            {showApprove() ? (\n                              <button\n                                onClick={() => {\n                                  setApproveLoading(true);\n                                  approve();\n                                }}\n                                className=\"primary-button\"\n                                title=\"Approve\"\n                                style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}\n                              >\n                                {approveLoading ? (\n                                  <span>\n                                    <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                    APPROVING\n                                  </span>\n                                ) : (\n                                  <span>APPROVE</span>\n                                )}\n                              </button>\n                            ) : (\n                              <button\n                                disabled={Number(inputValue) === 0}\n                                onClick={stake}\n                                className=\"primary-button\"\n                                title=\"Create Nodes\"\n                                style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}\n                              >\n                                {depositingLoading ? (\n                                  <span>\n                                    <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                    DEPOSITING\n                                  </span>\n                                ) : (\n                                  <span>DEPOSIT</span>\n                                )}\n                              </button>\n                            )}\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">PENDING {bank.earnTokenName} SHARES</div>\n                        </Box>\n                        <Box style={{textAlign: 'center'}} mt={2}>\n                          <TokenSymbol symbol={bank.earnTokenName} width={59} height={59} />\n                        </Box>\n                        <Box mt={2}>\n                          <Grid\n                            container\n                            direction=\"column\"\n                            spacing={0}\n                            justifyContent=\"center\"\n                            alignContent=\"center\"\n                            alignItems=\"center\"\n                          >\n                            <Grid item className=\"rewardTokenAmount\">\n                              {pressUserInfo ? pressUserInfo.totalClaimable.toFixed(2) : '0.00'} {bank.earnTokenName}\n                            </Grid>\n                            <Grid item className=\"rewardTokenValue\">\n                              $\n                              {pressUserInfo\n                                ? (pressUserInfo.totalClaimable * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                                : '0.00'}\n                            </Grid>\n                            {pressUserInfo && pressUserInfo.totalDeposited != 0 && (\n                              <Grid item style={{marginTop: '20px'}} className=\"sharesLeftValue\">\n                                After claiming, you will have{' '}\n                                {(pressUserInfo.currentShares - pressUserInfo.pendingShares).toFixed(2)} share(s) left.\n                                {pressUserInfo.currentShares - pressUserInfo.pendingShares == 0 && (\n                                  <div style={{color: 'red'}}>Claiming will kick you out of the Press.</div>\n                                )}\n                              </Grid>\n                            )}\n                          </Grid>\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={6}>\n                            <button\n                              className=\"primary-button\"\n                              title=\"Compound\"\n                              onClick={() => {\n                                setCompoundLoading(true);\n                                onCompound();\n                              }}\n                              disabled={!pressUserInfo || (pressUserInfo && pressUserInfo.totalClaimable <= 0)}\n                              style={{\n                                borderTopLeftRadius: '0',\n                                borderTopRightRadius: '0',\n                                borderBottomRightRadius: '0',\n                              }}\n                            >\n                              {compoundLoading ? (\n                                <span>\n                                  <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                  PRESSING\n                                </span>\n                              ) : (\n                                <span>PRESS</span>\n                              )}\n                            </button>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <button\n                              style={{borderTopLeftRadius: '0', borderTopRightRadius: '0', borderBottomLeftRadius: '0'}}\n                              className=\"secondary-button\"\n                              title=\"Claim\"\n                              onClick={() => {\n                                if (pressUserInfo.currentShares - pressUserInfo.pendingShares == 0) {\n                                  onPresentModal();\n                                } else {\n                                  setClaimLoading(true);\n                                  onClaim();\n                                }\n                              }}\n                              disabled={!pressUserInfo || (pressUserInfo && pressUserInfo.totalClaimable <= 0)}\n                            >\n                              {claimLoading ? (\n                                <span>\n                                  <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                  CLAIMING SHARES\n                                </span>\n                              ) : (\n                                <span>CLAIM SHARES</span>\n                              )}\n                            </button>\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">{bank.name} LOTTERY</div>\n                        </Box>\n                        <Box mt={2}>\n                          <Grid container direction=\"column\" spacing={1}>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Daily Top Deposit</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.largestDaily.toFixed(2) : '0.00'} sVintage\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (pressLottoInfo.largestDaily * Number(pressUserInfo.depositTokenPrice)).toFixed(\n                                          2,\n                                        )\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Daily Deposit Pot</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.dailyDepositPot.toFixed(2) : '0.00'} sVintage\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (\n                                          pressLottoInfo.dailyDepositPot * Number(pressUserInfo.depositTokenPrice)\n                                        ).toFixed(2)\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Largest Deposit Pot</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.largestDailyPot.toFixed(2) : '0.00'} sVintage\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (\n                                          pressLottoInfo.largestDailyPot * Number(pressUserInfo.depositTokenPrice)\n                                        ).toFixed(2)\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Next Winner Drawing</Grid>\n                                <Grid item>\n                                  {displayRemainingTime && (\n                                    <ProgressCountdown\n                                      description=\"Next Drawing\"\n                                      base={moment().toDate()}\n                                      hideBar={true}\n                                      deadline={displayRemainingTime}\n                                    />\n                                  )}\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Lotto Tickets</Grid>\n                                <Grid item>\n                                  {pressLottoInfo\n                                    ? `${pressLottoInfo.lottoTickets} / ${pressLottoInfo.totalLottoTickets}`\n                                    : '0 / 0'}{' '}\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>\n                                  <div>Your Lotto Winnings</div>\n                                  <div className=\"color-secondary\" style={{fontSize: '12px'}}>\n                                    Your winnings are sent to you automatically\n                                  </div>\n                                </Grid>\n                                <Grid item>{pressLottoInfo ? pressLottoInfo.lottoWinnings : '0'} LP</Grid>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={12}>\n                            {grapeTokenApprove.approveStatus !== ApprovalState.APPROVED ? (\n                              <>\n                                <span style={{paddingLeft: '35px', paddingRight: '35px'}}>\n                                  {' '}\n                                  Burn Grape for Tickets (1 Grape each)\n                                </span>\n                                <button\n                                  className=\"primary-button\"\n                                  title=\"Approve\"\n                                  onClick={grapeTokenApprove.approve}\n                                  style={{\n                                    marginTop: '15px',\n                                    borderTopLeftRadius: '0',\n                                    borderTopRightRadius: '0',\n                                  }}\n                                >\n                                  Approve\n                                </button>\n                              </>\n                            ) : (\n                              <>\n                                <Grid container style={{paddingLeft: '35px', paddingRight: '35px'}}>\n                                  <Grid item xs={12}>\n                                    Burn batches of {GRAPE_PER_BATCH} Grape in exchange for 10 Lotto tickets\n                                  </Grid>\n                                  <Grid item xs={12}>\n                                    <div className=\"inputDetailsBoxInner\">\n                                      <Grid container justifyContent=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n                                        <Grid item xs={10} md={11}>\n                                          <input\n                                            type=\"number\"\n                                            placeholder=\"Number of batches\"\n                                            className=\"amount-input\"\n                                            value={batchAmount}\n                                            onChange={handleBatchAmountChanged}\n                                          />\n                                        </Grid>\n                                        <Grid item xs={2} md={1} className=\"color-secondary\">\n                                          <div onClick={maxBatchClicked} className=\"max-button\">\n                                            MAX\n                                          </div>\n                                        </Grid>\n                                      </Grid>{' '}\n                                      <div className=\"balance\">\n                                        <span>Wallet: {getFullDisplayBalance(grapeTokenBalance, 18)} GRAPE</span>\n                                      </div>\n                                    </div>\n                                  </Grid>\n                                </Grid>\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 mt-2\">\n                                  <button\n                                    className=\"primary-button\"\n                                    title=\"Buy \"\n                                    onClick={burn}\n                                    disabled={\n                                      Number(batchAmount) <= 0 ||\n                                      Number(batchAmount) > Number(grapeTokenBalance) / 1e18 / 10\n                                    }\n                                    style={{\n                                      marginTop: '15px',\n                                      borderTopLeftRadius: '0',\n                                      borderTopRightRadius: '0',\n                                    }}\n                                  >\n                                    Burn {numGrapeToBurn} GRAPE\n                                  </button>\n                                </div>\n                              </>\n                            )}\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">{bank.earnTokenName} ASSASSINATION</div>\n                        </Box>\n\n                        <Box mt={2}>\n                          <Grid container justifyContent=\"space-between\">\n                            <Grid item>Your Assassination Profits</Grid>\n                            <Grid item>\n                              {pressUserInfo ? pressUserInfo.profitsAssassinated.toFixed(2) : '0.00'}{' '}\n                              {bank.depositTokenName}\n                              <span className=\"wallet-token-value\">\n                                {' '}\n                                $\n                                {pressUserInfo\n                                  ? (\n                                      pressUserInfo.profitsAssassinated * Number(pressUserInfo.depositTokenPrice)\n                                    ).toFixed(2)\n                                  : '0.00'}\n                              </span>\n                            </Grid>\n                          </Grid>\n                        </Box>\n\n                        <Box mt={3}>\n                          <div className=\"pending-rewards\">USERS NEAR ASSASSINATION (95%)</div>\n                          {usersNearAssassination && usersNearAssassination.length > 0 ? (\n                            <Grid\n                              container\n                              direction=\"column\"\n                              spacing={1}\n                              style={{marginTop: '20px', paddingBottom: '20px'}}\n                            >\n                              {usersNearAssassination.map((user) => (\n                                <Grid item xs={12}>\n                                  <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n                                    <Grid item>{shortenAddress(user)}</Grid>\n                                    <Grid item>\n                                      <button\n                                        onClick={() => assassinate(user)}\n                                        className=\"primary-button\"\n                                        style={{height: '35px'}}\n                                      >\n                                        Assassinate\n                                      </button>\n                                    </Grid>\n                                  </Grid>\n                                </Grid>\n                              ))}\n                            </Grid>\n                          ) : (\n                            <div className=\"color-secondary\" style={{marginTop: '20px'}}>\n                              No users near assassination\n                            </div>\n                          )}\n                        </Box>\n                      </div>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </AccordionDetails>\n        </Accordion>\n      )}\n    </>\n  );\n};\n\nexport default SolerapressCard;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/SodapressCard.tsx",["925","926","927"],"//@ts-nocheck\nimport React, {useMemo, useState, useEffect} from 'react';\nimport {Box, Grid, Accordion, AccordionDetails, AccordionSummary, useMediaQuery} from '@material-ui/core';\nimport InfoIcon from '@mui/icons-material/Info';\n\nimport {Bank} from '../../grape-finance';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ProgressCountdown from './ProgressCountdown';\nimport moment from 'moment';\nimport {getFullDisplayBalance} from '../../utils/formatBalance';\nimport useClaimPress from '../../hooks/useClaimPress';\nimport useCompoundPress from '../../hooks/useCompoundPress';\nimport useStakePress from '../../hooks/useStakePress';\nimport FormControl from '@material-ui/core/FormControl';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport useApprove, {ApprovalState} from '../../hooks/useApprove';\nimport usePressLottoInfo from '../../hooks/usePressLottoInfo';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useZapStakePress from '../../hooks/useZapStakePress';\nimport usePoolBalance from '../../hooks/usePoolBalance';\nimport {styled} from '@mui/material/styles';\nimport Tooltip, {TooltipProps, tooltipClasses} from '@mui/material/Tooltip';\nimport useGetPressUsersNearAssassination from '../../hooks/useGetPressUsersNearAssassination';\nimport useAssassinatePress from '../../hooks/useAssassinatePress';\nimport useSodapressUserInfo from '../../hooks/useSodapressUserInfo';\nimport {subscribe, unsubscribe} from '../../state/txEvent';\nimport {SyncLoader} from 'react-spinners';\nimport useBurnGrapePress from '../../hooks/useBurnGrapePress';\nimport PressClaimModal from './PressClaimModal';\nimport useModal from '../../hooks/useModal';\n\nconst GRAPE_PER_BATCH = 10;\n\ninterface SodapressCardProps {\n  displayName: string;\n  bank: Bank;\n  activesOnly: boolean;\n}\n\nconst LightTooltip = styled(({className, ...props}: TooltipProps) => (\n  <Tooltip {...props} classes={{popper: className}} />\n))(({theme}) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    boxShadow: theme.shadows[1],\n    fontSize: 11,\n  },\n}));\n\nconst SodapressCard: React.FC<SodapressCardProps> = ({displayName, bank, activesOnly}) => {\n  const widthUnder600 = useMediaQuery('(max-width:600px)');\n\n  const [loading, setLoading] = useState(true);\n\n  const grapeFinance = useGrapeFinance();\n  const pressUserInfo = useSodapressUserInfo();\n  const pressLottoInfo = usePressLottoInfo(bank.name);\n  const usersNearAssassination = useGetPressUsersNearAssassination(bank.name);\n\n  const depositTokenBalance = useTokenBalance(bank.depositToken);\n  const mimTokenBalance = useTokenBalance(grapeFinance.MIM);\n  const grapeTokenBalance = useTokenBalance(grapeFinance.GRAPE);\n\n  const pressBalance = usePoolBalance(grapeFinance.externalTokens[bank.depositTokenName], bank.address);\n\n  const depositTokenApprove = useApprove(bank.depositToken, bank.address);\n  const mimTokenApprove = useApprove(grapeFinance.MIM, bank.address);\n  const grapeTokenApprove = useApprove(grapeFinance.GRAPE, grapeFinance.contracts[bank.name + 'Lotto'].address);\n\n  useEffect(() => {\n    subscribe('failedTx', () => {\n      setClaimLoading(false);\n      setCompoundLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    subscribe('successTx', () => {\n      setClaimLoading(false);\n      setCompoundLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    return () => {\n      unsubscribe('failedTx');\n      unsubscribe('successTx');\n    };\n  }, []);\n\n  const {onClaim} = useClaimPress(bank);\n  const {onCompound} = useCompoundPress(bank);\n  const {onStake} = useStakePress(bank);\n  const {onZapAndStake} = useZapStakePress(bank);\n  const {onAssassinate} = useAssassinatePress(bank);\n  const {onBurnGrape} = useBurnGrapePress(bank);\n\n  const [expanded, setExpanded] = useState(false);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [payWith, setPayWith] = useState(bank.depositTokenName);\n  const [batchAmount, setBatchAmount] = useState('');\n  const [claimLoading, setClaimLoading] = useState(false);\n  const [depositingLoading, setDepositingLoading] = useState(false);\n  const [approveLoading, setApproveLoading] = useState(false);\n  const [compoundLoading, setCompoundLoading] = useState(false);\n\n  const displayDailyAPR = useMemo(\n    () => (pressUserInfo ? (Number(pressUserInfo.rewardsPerDay) * 100) / pressUserInfo.totalDeposited : null),\n    [pressUserInfo],\n  );\n\n  const displayRemainingTime = useMemo(() => {\n    if (pressLottoInfo) {\n      const dateTo = new Date();\n      dateTo.setSeconds(dateTo.getSeconds() + Number(pressLottoInfo.timeLeftUntilNewDay));\n      return dateTo;\n    }\n    return null;\n  }, [pressLottoInfo]);\n\n  const numGrapeToBurn = useMemo(() => {\n    if (!batchAmount) return '';\n    return Number(batchAmount) * GRAPE_PER_BATCH;\n  }, [batchAmount]);\n\n  useEffect(() => {\n    if (pressUserInfo != null && displayDailyAPR != null) {\n      setLoading(false);\n    }\n  }, [pressUserInfo, displayDailyAPR]);\n\n  // Custom functions\n  const expand = () => {\n    setExpanded(!expanded);\n  };\n\n  const stake = () => {\n    if (Number(inputValue) > 0) {\n      setDepositingLoading(true);\n      if (payWith === bank.depositTokenName) {\n        onStake(inputValue);\n      } else {\n        onZapAndStake(inputValue, payWith);\n      }\n    }\n  };\n\n  const burn = () => {\n    if (Number(batchAmount) > 0) {\n      onBurnGrape(Number(batchAmount));\n    }\n  };\n\n  const handleBatchAmountChanged = (e: any) => {\n    if (isNaN(Number(e.target.value))) return;\n    setBatchAmount(e.target.value);\n  };\n\n  const maxClicked = () => {\n    setInputValue(getFullDisplayBalance(payWith === 'MIM' ? mimTokenBalance : depositTokenBalance, 18));\n  };\n\n  const maxBatchClicked = () => {\n    const batches = Math.floor(Number(grapeTokenBalance) / 1e18 / 10);\n    setBatchAmount(batches.toFixed(0));\n  };\n\n  const updateInput = (event: any) => {\n    setInputValue(event.target.value);\n  };\n\n  const getLiquidityLink = () => {\n    if (payWith === bank.depositTokenName) {\n      return 'https://xgrape.grapefinance.app/';\n    }\n  };\n\n  const handlePayWithChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPayWith(event.target.value);\n  };\n\n  const approve = () => {\n    if (payWith === 'MIM') {\n      mimTokenApprove.approve();\n      return;\n    }\n    depositTokenApprove.approve();\n  };\n\n  const showApprove = () => {\n    return (\n      (payWith === 'MIM' && mimTokenApprove.approveStatus !== ApprovalState.APPROVED) ||\n      (payWith === bank.depositTokenName && depositTokenApprove.approveStatus !== ApprovalState.APPROVED)\n    );\n  };\n\n  const shortenAddress = (addr: string) => {\n    if (!addr) return '';\n    return addr.slice(0, 6) + '...' + addr.slice(addr.length - 4, addr.length);\n  };\n\n  const assassinate = (user: string) => {\n    onAssassinate(user);\n  };\n\n  \n  const modalCallback = (action: string) => {\n    if (action === 'Cancel') {\n      onDismissModal();\n    }\n    if (action === 'Claim') {\n      onDismissModal();\n      setClaimLoading(true);\n      onClaim();\n    }\n  };\n\n  const [onPresentModal, onDismissModal] = useModal(\n    <PressClaimModal shares={pressUserInfo?.pendingShares} callback={modalCallback} />,\n  );\n\n\n  return (\n    <>\n      {(activesOnly === false || (activesOnly === true && pressUserInfo && pressUserInfo.totalTracked > 0)) && (\n        <Accordion expanded={expanded} onChange={expand} className=\"accordion\">\n          <AccordionSummary\n            expandIcon={loading ? <SyncLoader color=\"white\" size={4} /> : <ExpandMoreIcon style={{color: 'white'}} />}\n            aria-controls=\"panel1bh-content\"\n            id=\"panel1bh-header\"\n          >\n            <Grid container justifyContent={'space-between'} alignItems=\"center\" className=\"lineItemInner\" spacing={1}>\n              <Grid item className=\"lineName\" xs={12} sm={12} md={4}>\n                <Grid container justifyContent=\"flex-start\" alignItems=\"center\" spacing={2} wrap=\"nowrap\">\n                  <Grid item>\n                    <TokenSymbol symbol={bank.depositTokenName} height={30} width={30} />\n                  </Grid>\n                  <Grid item>\n                    <div>{displayName}</div>\n                    <div className=\"lineDescription\">\n                      Lock {bank.depositTokenName} and earn up to 350% back in {bank.depositTokenName}\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">\n                      {' '}\n                      Total Tracked{' '}\n                      <LightTooltip arrow placement=\"top\" enterDelay={0} title=\"Token Deposited + Compounded\">\n                        <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                      </LightTooltip>\n                    </div>\n                  </Grid>\n                  <Grid item>\n                    {' '}\n                    <div className=\"lineValueDeposited\">\n                      <span style={{color: '#fcfcfc'}}>\n                        {pressUserInfo ? pressUserInfo.totalTracked.toFixed(2) : '0.00'} LP\n                      </span>\n                      <span style={{marginLeft: '5px', fontSize: '14px'}}>\n                        ($\n                        {pressUserInfo\n                          ? (pressUserInfo.totalTracked * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                          : '0.00'}\n                        )\n                      </span>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">Rewards</div>\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValueDeposited\">\n                      <span style={{color: '#fcfcfc'}}>\n                        {pressUserInfo ? pressUserInfo.totalClaimable.toFixed(2) : '0.00'} LP\n                      </span>\n                      <span style={{marginLeft: '5px', fontSize: '14px'}}>\n                        ($\n                        {pressUserInfo\n                          ? (pressUserInfo.totalClaimable * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                          : '0.00'}\n                        )\n                      </span>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">\n                      APR Yearly | Daily\n                      <LightTooltip\n                        arrow\n                        placement=\"top\"\n                        enterDelay={0}\n                        title=\"Base APR is 1.25%, then changes based on your deposits, compounds and claims\"\n                      >\n                        <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                      </LightTooltip>\n                    </div>{' '}\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValue\">\n                      {displayDailyAPR ? (displayDailyAPR * 365).toFixed(0) : '456'}% |{' '}\n                      {displayDailyAPR ? displayDailyAPR.toFixed(2) : '1.25'}%\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">Total Deposited</div>\n                  </Grid>\n                  <Grid item>\n                    ${pressUserInfo ? pressUserInfo.tvl.toLocaleString('en-US', {maximumFractionDigits: 2}) : '0.00'}\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </AccordionSummary>\n          <AccordionDetails style={{overflow: 'hidden'}}>\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item>\n                <Grid container spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">Est. Reward /day</div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.rewardsPerDay.toFixed(2) : '0.00'} LP\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (pressUserInfo.rewardsPerDay * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Your Deposits{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Shows 90% of the sum of all your deposits\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.totalDeposited.toFixed(2) : '0.00'} LP{' '}\n                          <span className=\"wallet-token-value\">\n                            ($\n                            {pressUserInfo\n                              ? (pressUserInfo.totalDeposited * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Your Compounds{' '}\n                          <LightTooltip arrow placement=\"top\" enterDelay={0} title=\"Sum of all your compounds\">\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? (pressUserInfo.totalTracked - pressUserInfo.totalDeposited).toFixed(2)\n                            : '0.00'}{' '}\n                          LP\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  (pressUserInfo.totalTracked - pressUserInfo.totalDeposited) *\n                                  Number(pressUserInfo.depositTokenPrice)\n                                ).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Assassination Tracker{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"You don't want to reach 3.5... ((tracked share in token - tracked token balance) / tracked token balance)\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.profitRatio.toFixed(2) : '0.00'} / 3.5\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Contract Balance{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Amount of Token left in the Contract\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressBalance\n                            ? (Number(pressBalance) / 1e18).toLocaleString('en-US', {maximumFractionDigits: 2})\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressBalance && pressUserInfo\n                              ? (\n                                  (Number(pressBalance) / 1e18) *\n                                  Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Remaining Shares | Tokens{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Your remaining shares in the pool. Claiming while 'Remaining Shares' = 'Pending Shares' kicks out of the Press.\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? `${pressUserInfo.currentShares.toFixed(2)} | ${pressUserInfo.currentSharesInToken.toFixed(\n                                2,\n                              )} LP`\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  Number(pressUserInfo.currentSharesInToken) * Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Pending Shares | Tokens{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Compounding allows you to have a greater return than your initial.\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? `${pressUserInfo.pendingShares.toFixed(2)} | ${pressUserInfo.pendingSharesInToken.toFixed(\n                                2,\n                              )} LP`\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  Number(pressUserInfo.pendingSharesInToken) * Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Claimed Shares{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Total Shares claimed so far. (Total Share Balance - Current Share Balance)\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.claimedInShares.toFixed(2) : '0.00'}\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <Grid container spacing={5}>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">DEPOSIT IN {bank.name}</div>\n                        </Box>\n                        <Box mt={2}>\n                          <FormControl>\n                            <RadioGroup\n                              row\n                              aria-labelledby=\"row-radio-buttons-group-label\"\n                              name=\"row-radio-buttons-group\"\n                              value={payWith}\n                              onChange={handlePayWithChange}\n                            >\n                              <FormControlLabel\n                                value={bank.depositTokenName}\n                                control={<Radio />}\n                                label={bank.depositTokenName}\n                              />\n\n                              <FormControlLabel value=\"MIM\" control={<Radio />} label=\"MIM\" />\n                            </RadioGroup>\n                          </FormControl>\n                        </Box>\n                        <div className=\"node-inputDetailsBox\">\n                          <Box className=\"box-price-of-one color-secondary\">\n                            1 share = {pressUserInfo ? pressUserInfo.priceOfOneShare.toFixed(2) : '0.00'}{' '}\n                            {bank.depositTokenName} = $\n                            {pressUserInfo\n                              ? (pressUserInfo.priceOfOneShare * pressUserInfo.depositTokenPrice).toFixed(3)\n                              : '0.000'}\n                          </Box>\n                          <div className=\"inputDetailsBoxInner\">\n                            <Grid container justifyContent=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n                              <Grid item xs={10} md={11}>\n                                <input\n                                  type=\"number\"\n                                  placeholder=\"Enter amount\"\n                                  className=\"amount-input\"\n                                  value={inputValue}\n                                  onChange={updateInput}\n                                />\n                              </Grid>\n                              <Grid item xs={2} md={1} className=\"color-secondary\">\n                                <div onClick={maxClicked} className=\"max-button\">\n                                  MAX\n                                </div>\n                              </Grid>\n                            </Grid>\n                            <div className=\"balance\">\n                              <span>\n                                Wallet:{' '}\n                                {getFullDisplayBalance(payWith === 'MIM' ? mimTokenBalance : depositTokenBalance, 18)}{' '}\n                                {payWith}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <Box mt={2}>\n                          {getLiquidityLink() != null && (\n                            <a\n                              style={{textDecoration: 'none'}}\n                              rel=\"noopener noreferrer\"\n                              target=\"_blank\"\n                              href={getLiquidityLink()}\n                            >\n                              <div className=\"addRemoveLiquidity color-secondary\">Add / Remove Liquidity</div>\n                            </a>\n                          )}\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={12}>\n                            {showApprove() ? (\n                              <button\n                                onClick={() => {\n                                  setApproveLoading(true);\n                                  approve();\n                                }}\n                                className=\"primary-button\"\n                                title=\"Approve\"\n                                style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}\n                              >\n                                {approveLoading ? (\n                                  <span>\n                                    <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                    APPROVING\n                                  </span>\n                                ) : (\n                                  <span>APPROVE</span>\n                                )}\n                              </button>\n                            ) : (\n                              <button\n                                disabled={Number(inputValue) === 0}\n                                onClick={stake}\n                                className=\"primary-button\"\n                                title=\"Create Nodes\"\n                                style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}\n                              >\n                                {depositingLoading ? (\n                                  <span>\n                                    <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                    DEPOSITING\n                                  </span>\n                                ) : (\n                                  <span>DEPOSIT</span>\n                                )}\n                              </button>\n                            )}\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">PENDING {bank.earnTokenName} SHARES</div>\n                        </Box>\n                        <Box style={{textAlign: 'center'}} mt={2}>\n                          <TokenSymbol symbol={bank.earnTokenName} width={59} height={59} />\n                        </Box>\n                        <Box mt={2}>\n                          <Grid\n                            container\n                            direction=\"column\"\n                            spacing={0}\n                            justifyContent=\"center\"\n                            alignContent=\"center\"\n                            alignItems=\"center\"\n                          >\n                            <Grid item className=\"rewardTokenAmount\">\n                              {pressUserInfo ? pressUserInfo.totalClaimable.toFixed(2) : '0.00'} {bank.earnTokenName}\n                            </Grid>\n                            <Grid item className=\"rewardTokenValue\">\n                              $\n                              {pressUserInfo\n                                ? (pressUserInfo.totalClaimable * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                                : '0.00'}\n                            </Grid>\n                            {pressUserInfo && pressUserInfo.totalDeposited != 0 && (\n                              <Grid item style={{marginTop: '20px'}} className=\"sharesLeftValue\">\n                                After claiming, you will have{' '}\n                                {(pressUserInfo.currentShares - pressUserInfo.pendingShares).toFixed(2)} share(s) left.\n                                {pressUserInfo.currentShares - pressUserInfo.pendingShares == 0 && (\n                                  <div style={{color: 'red'}}>Claiming will kick you out of the Press.</div>\n                                )}\n                              </Grid>\n                            )}\n                          </Grid>\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={6}>\n                            <button\n                              className=\"primary-button\"\n                              title=\"Compound\"\n                              onClick={() => {\n                                setCompoundLoading(true);\n                                onCompound();\n                              }}\n                              disabled={!pressUserInfo || (pressUserInfo && pressUserInfo.totalClaimable <= 0)}\n                              style={{\n                                borderTopLeftRadius: '0',\n                                borderTopRightRadius: '0',\n                                borderBottomRightRadius: '0',\n                              }}\n                            >\n                              {compoundLoading ? (\n                                <span>\n                                  <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                  PRESSING\n                                </span>\n                              ) : (\n                                <span>PRESS</span>\n                              )}\n                            </button>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <button\n                              style={{borderTopLeftRadius: '0', borderTopRightRadius: '0', borderBottomLeftRadius: '0'}}\n                              className=\"secondary-button\"\n                              title=\"Claim\"\n                              onClick={() => {\n                                if (pressUserInfo.currentShares - pressUserInfo.pendingShares == 0) {\n                                  onPresentModal();\n                                } else {\n                                  setClaimLoading(true);\n                                  onClaim();\n                                }\n                              }}\n                              disabled={!pressUserInfo || (pressUserInfo && pressUserInfo.totalClaimable <= 0)}\n                            >\n                              {claimLoading ? (\n                                <span>\n                                  <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                  CLAIMING SHARES\n                                </span>\n                              ) : (\n                                <span>CLAIM SHARES</span>\n                              )}\n                            </button>\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">{bank.name} LOTTERY</div>\n                        </Box>\n                        <Box mt={2}>\n                          <Grid container direction=\"column\" spacing={1}>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Daily Top Deposit</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.largestDaily.toFixed(2) : '0.00'} LP\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (pressLottoInfo.largestDaily * Number(pressUserInfo.depositTokenPrice)).toFixed(\n                                          2,\n                                        )\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Daily Deposit Pot</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.dailyDepositPot.toFixed(2) : '0.00'} LP\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (\n                                          pressLottoInfo.dailyDepositPot * Number(pressUserInfo.depositTokenPrice)\n                                        ).toFixed(2)\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Largest Deposit Pot</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.largestDailyPot.toFixed(2) : '0.00'} LP\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (\n                                          pressLottoInfo.largestDailyPot * Number(pressUserInfo.depositTokenPrice)\n                                        ).toFixed(2)\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Next Winner Drawing</Grid>\n                                <Grid item>\n                                  {displayRemainingTime && (\n                                    <ProgressCountdown\n                                      description=\"Next Drawing\"\n                                      base={moment().toDate()}\n                                      hideBar={true}\n                                      deadline={displayRemainingTime}\n                                    />\n                                  )}\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Lotto Tickets</Grid>\n                                <Grid item>\n                                  {pressLottoInfo\n                                    ? `${pressLottoInfo.lottoTickets} / ${pressLottoInfo.totalLottoTickets}`\n                                    : '0 / 0'}{' '}\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>\n                                  <div>Your Lotto Winnings</div>\n                                  <div className=\"color-secondary\" style={{fontSize: '12px'}}>\n                                    Your winnings are sent to you automatically\n                                  </div>\n                                </Grid>\n                                <Grid item>{pressLottoInfo ? pressLottoInfo.lottoWinnings : '0'} LP</Grid>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={12}>\n                            {grapeTokenApprove.approveStatus !== ApprovalState.APPROVED ? (\n                              <>\n                                <span style={{paddingLeft: '35px', paddingRight: '35px'}}>\n                                  {' '}\n                                  Burn Grape for Tickets (1 Grape each)\n                                </span>\n                                <button\n                                  className=\"primary-button\"\n                                  title=\"Approve\"\n                                  onClick={grapeTokenApprove.approve}\n                                  style={{\n                                    marginTop: '15px',\n                                    borderTopLeftRadius: '0',\n                                    borderTopRightRadius: '0',\n                                  }}\n                                >\n                                  Approve\n                                </button>\n                              </>\n                            ) : (\n                              <>\n                                <Grid container style={{paddingLeft: '35px', paddingRight: '35px'}}>\n                                  <Grid item xs={12}>\n                                    Burn batches of {GRAPE_PER_BATCH} Grape in exchange for 10 Lotto tickets\n                                  </Grid>\n                                  <Grid item xs={12}>\n                                    <div className=\"inputDetailsBoxInner\">\n                                      <Grid container justifyContent=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n                                        <Grid item xs={10} md={11}>\n                                          <input\n                                            type=\"number\"\n                                            placeholder=\"Number of batches\"\n                                            className=\"amount-input\"\n                                            value={batchAmount}\n                                            onChange={handleBatchAmountChanged}\n                                          />\n                                        </Grid>\n                                        <Grid item xs={2} md={1} className=\"color-secondary\">\n                                          <div onClick={maxBatchClicked} className=\"max-button\">\n                                            MAX\n                                          </div>\n                                        </Grid>\n                                      </Grid>\n                                      <div className=\"balance\">\n                                        <span>Wallet: {getFullDisplayBalance(grapeTokenBalance, 18)} GRAPE</span>\n                                      </div>\n                                    </div>\n                                  </Grid>\n                                </Grid>\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 mt-2\">\n                                  <button\n                                    className=\"primary-button\"\n                                    title=\"Buy \"\n                                    onClick={burn}\n                                    disabled={\n                                      Number(batchAmount) <= 0 ||\n                                      Number(batchAmount) > Number(grapeTokenBalance) / 1e18 / 10\n                                    }\n                                    style={{\n                                      marginTop: '15px',\n                                      borderTopLeftRadius: '0',\n                                      borderTopRightRadius: '0',\n                                    }}\n                                  >\n                                    Burn {numGrapeToBurn} GRAPE\n                                  </button>\n                                </div>\n                              </>\n                            )}\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">{bank.earnTokenName} ASSASSINATION</div>\n                        </Box>\n\n                        <Box mt={2}>\n                          <Grid container justifyContent=\"space-between\">\n                            <Grid item>Your Assassination Profits</Grid>\n                            <Grid item>\n                              {pressUserInfo ? pressUserInfo.profitsAssassinated.toFixed(2) : '0.00'}{' '}\n                              {bank.depositTokenName}\n                              <span className=\"wallet-token-value\">\n                                {' '}\n                                $\n                                {pressUserInfo\n                                  ? (\n                                      pressUserInfo.profitsAssassinated * Number(pressUserInfo.depositTokenPrice)\n                                    ).toFixed(2)\n                                  : '0.00'}\n                              </span>\n                            </Grid>\n                          </Grid>\n                        </Box>\n\n                        <Box mt={3}>\n                          <div className=\"pending-rewards\">USERS NEAR ASSASSINATION (95%)</div>\n                          {usersNearAssassination && usersNearAssassination.length > 0 ? (\n                            <Grid\n                              container\n                              direction=\"column\"\n                              spacing={1}\n                              style={{marginTop: '20px', paddingBottom: '20px'}}\n                            >\n                              {usersNearAssassination.map((user) => (\n                                <Grid item xs={12}>\n                                  <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n                                    <Grid item>{shortenAddress(user)}</Grid>\n                                    <Grid item>\n                                      <button\n                                        onClick={() => assassinate(user)}\n                                        className=\"primary-button\"\n                                        style={{height: '35px'}}\n                                      >\n                                        Assassinate\n                                      </button>\n                                    </Grid>\n                                  </Grid>\n                                </Grid>\n                              ))}\n                            </Grid>\n                          ) : (\n                            <div className=\"color-secondary\" style={{marginTop: '20px'}}>\n                              No users near assassination\n                            </div>\n                          )}\n                        </Box>\n                      </div>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </AccordionDetails>\n        </Accordion>\n      )}\n    </>\n  );\n};\n\nexport default SodapressCard;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/WinepressCard.tsx",["928","929","930","931","932","933"],"//@ts-nocheck\nimport React, {useMemo, useState, useEffect} from 'react';\nimport {Box, Grid, Accordion, AccordionDetails, AccordionSummary, useMediaQuery} from '@material-ui/core';\nimport InfoIcon from '@mui/icons-material/Info';\n\nimport {Bank} from '../../grape-finance';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ProgressCountdown from './ProgressCountdown';\nimport moment from 'moment';\nimport {getFullDisplayBalance} from '../../utils/formatBalance';\nimport useClaimPress from '../../hooks/useClaimPress';\nimport useCompoundPress from '../../hooks/useCompoundPress';\nimport useStakePress from '../../hooks/useStakePress';\nimport FormControl from '@material-ui/core/FormControl';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport useApprove, {ApprovalState} from '../../hooks/useApprove';\nimport useWinepressUserInfo from '../../hooks/useWinepressUserInfo';\nimport usePressLottoInfo from '../../hooks/usePressLottoInfo';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useZapStakePress from '../../hooks/useZapStakePress';\nimport usePoolBalance from '../../hooks/usePoolBalance';\nimport {styled} from '@mui/material/styles';\nimport Tooltip, {TooltipProps, tooltipClasses} from '@mui/material/Tooltip';\nimport useGetPressUsersNearAssassination from '../../hooks/useGetPressUsersNearAssassination';\nimport useAssassinatePress from '../../hooks/useAssassinatePress';\nimport {subscribe, unsubscribe} from '../../state/txEvent';\nimport {SyncLoader} from 'react-spinners';\nimport useBurnGrapePress from '../../hooks/useBurnGrapePress';\nimport {batch} from 'react-redux';\nimport PressClaimModal from './PressClaimModal';\nimport useModal from '../../hooks/useModal';\n\nconst GRAPE_PER_BATCH = 10;\n\ninterface WinepressCardProps {\n  displayName: string;\n  bank: Bank;\n  activesOnly: boolean;\n}\n\nconst LightTooltip = styled(({className, ...props}: TooltipProps) => (\n  <Tooltip {...props} classes={{popper: className}} />\n))(({theme}) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    boxShadow: theme.shadows[1],\n    fontSize: 11,\n  },\n}));\n\nconst WinepressCard: React.FC<WinepressCardProps> = ({displayName, bank, activesOnly}) => {\n  const widthUnder600 = useMediaQuery('(max-width:600px)');\n\n  const [loading, setLoading] = useState(true);\n\n  const grapeFinance = useGrapeFinance();\n  const pressUserInfo = useWinepressUserInfo();\n  const pressLottoInfo = usePressLottoInfo(bank.name);\n  const usersNearAssassination = useGetPressUsersNearAssassination(bank.name);\n\n  const depositTokenBalance = useTokenBalance(bank.depositToken);\n  const mimTokenBalance = useTokenBalance(grapeFinance.MIM);\n  const grapeTokenBalance = useTokenBalance(grapeFinance.GRAPE);\n\n  const pressBalance = usePoolBalance(grapeFinance.externalTokens[bank.depositTokenName], bank.address);\n\n  const depositTokenApprove = useApprove(bank.depositToken, bank.address);\n  const mimTokenApprove = useApprove(grapeFinance.MIM, bank.address);\n  const grapeTokenApprove = useApprove(grapeFinance.GRAPE, grapeFinance.contracts[bank.name + 'Lotto'].address);\n\n  useEffect(() => {\n    subscribe('failedTx', () => {\n      setClaimLoading(false);\n      setCompoundLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    subscribe('successTx', () => {\n      setClaimLoading(false);\n      setCompoundLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    return () => {\n      unsubscribe('failedTx');\n      unsubscribe('successTx');\n    };\n  }, []);\n\n  const {onClaim} = useClaimPress(bank);\n  const {onCompound} = useCompoundPress(bank);\n  const {onStake} = useStakePress(bank);\n  const {onZapAndStake} = useZapStakePress(bank);\n  const {onAssassinate} = useAssassinatePress(bank);\n  const {onBurnGrape} = useBurnGrapePress(bank);\n\n  const [expanded, setExpanded] = useState(false);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [payWith, setPayWith] = useState(bank.depositTokenName);\n  const [batchAmount, setBatchAmount] = useState('');\n\n  const [claimLoading, setClaimLoading] = useState(false);\n  const [showClaimingModal, setShowClaimingModal] = useState(true);\n  const [depositingLoading, setDepositingLoading] = useState(false);\n  const [approveLoading, setApproveLoading] = useState(false);\n  const [compoundLoading, setCompoundLoading] = useState(false);\n\n  const displayDailyAPR = useMemo(\n    () => (pressUserInfo ? (Number(pressUserInfo.rewardsPerDay) * 100) / pressUserInfo.totalDeposited : null),\n    [pressUserInfo],\n  );\n\n  const displayRemainingTime = useMemo(() => {\n    if (pressLottoInfo) {\n      const dateTo = new Date();\n      dateTo.setSeconds(dateTo.getSeconds() + Number(pressLottoInfo.timeLeftUntilNewDay));\n      return dateTo;\n    }\n    return null;\n  }, [pressLottoInfo]);\n\n  const numGrapeToBurn = useMemo(() => {\n    if (!batchAmount) return '';\n    return Number(batchAmount) * GRAPE_PER_BATCH;\n  }, [batchAmount]);\n\n  useEffect(() => {\n    if (pressUserInfo != null && displayDailyAPR != null) {\n      setLoading(false);\n    }\n  }, [pressUserInfo, displayDailyAPR]);\n\n  // Custom functions\n  const expand = () => {\n    setExpanded(!expanded);\n  };\n\n  const stake = () => {\n    if (Number(inputValue) > 0) {\n      setDepositingLoading(true);\n      if (payWith === bank.depositTokenName) {\n        onStake(inputValue);\n      } else {\n        onZapAndStake(inputValue, payWith);\n      }\n    }\n  };\n\n  const burn = () => {\n    if (Number(batchAmount) > 0) {\n      onBurnGrape(Number(batchAmount));\n    }\n  };\n\n  const handleBatchAmountChanged = (e: any) => {\n    if (isNaN(Number(e.target.value))) return;\n    setBatchAmount(e.target.value);\n  };\n\n  const maxClicked = () => {\n    setInputValue(getFullDisplayBalance(payWith === 'MIM' ? mimTokenBalance : depositTokenBalance, 18));\n  };\n\n  const maxBatchClicked = () => {\n    const batches = Math.floor(Number(grapeTokenBalance) / 1e18 / 10);\n    setBatchAmount(batches.toFixed(0));\n  };\n\n  const updateInput = (event: any) => {\n    setInputValue(event.target.value);\n  };\n\n  const getLiquidityLink = () => {\n    if (payWith === bank.depositTokenName) {\n      return 'https://traderjoexyz.com/avalanche/pool/v1/0x130966628846bfd36ff31a822705796e8cb8c18d/0xc55036b5348cfb45a932481744645985010d3a44';\n    }\n  };\n\n  const handlePayWithChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPayWith(event.target.value);\n  };\n\n  const approve = () => {\n    if (payWith === 'MIM') {\n      mimTokenApprove.approve();\n      return;\n    }\n    depositTokenApprove.approve();\n  };\n\n  const showApprove = () => {\n    return (\n      (payWith === 'MIM' && mimTokenApprove.approveStatus !== ApprovalState.APPROVED) ||\n      (payWith === bank.depositTokenName && depositTokenApprove.approveStatus !== ApprovalState.APPROVED)\n    );\n  };\n\n  const shortenAddress = (addr: string) => {\n    if (!addr) return '';\n    return addr.slice(0, 6) + '...' + addr.slice(addr.length - 4, addr.length);\n  };\n\n  const assassinate = (user: string) => {\n    onAssassinate(user);\n  };\n\n  const modalCallback = (action: string) => {\n    if (action === 'Cancel') {\n      onDismissModal();\n    }\n    if (action === 'Claim') {\n      onDismissModal();\n      setClaimLoading(true);\n      onClaim();\n    }\n  };\n\n  const [onPresentModal, onDismissModal] = useModal(\n    <PressClaimModal shares={pressUserInfo?.pendingShares} callback={modalCallback} />,\n  );\n\n  return (\n    <>\n      {(activesOnly === false || (activesOnly === true && pressUserInfo && pressUserInfo.totalTracked > 0)) && (\n        <Accordion expanded={expanded} onChange={expand} className=\"accordion\">\n          <AccordionSummary\n            expandIcon={loading ? <SyncLoader color=\"white\" size={4} /> : <ExpandMoreIcon style={{color: 'white'}} />}\n            aria-controls=\"panel1bh-content\"\n            id=\"panel1bh-header\"\n          >\n            <Grid container justifyContent={'space-between'} alignItems=\"center\" className=\"lineItemInner\" spacing={1}>\n              <Grid item className=\"lineName\" xs={12} sm={12} md={4}>\n                <Grid container justifyContent=\"flex-start\" alignItems=\"center\" spacing={2} wrap=\"nowrap\">\n                  <Grid item>\n                    <TokenSymbol symbol={bank.depositTokenName} height={30} width={30} />\n                  </Grid>\n                  <Grid item>\n                    <div>{displayName}</div>\n                    <div className=\"lineDescription\">\n                      Lock {bank.depositTokenName} and earn up to 350% back in {bank.depositTokenName}\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">\n                      {' '}\n                      Total Tracked{' '}\n                      <LightTooltip arrow placement=\"top\" enterDelay={0} title=\"Token Deposited + Compounded\">\n                        <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                      </LightTooltip>\n                    </div>\n                  </Grid>\n                  <Grid item>\n                    {' '}\n                    <div className=\"lineValueDeposited\">\n                      <span style={{color: '#fcfcfc'}}>\n                        {pressUserInfo ? pressUserInfo.totalTracked.toFixed(2) : '0.00'} LP\n                      </span>\n                      <span style={{marginLeft: '5px', fontSize: '14px'}}>\n                        ($\n                        {pressUserInfo\n                          ? (pressUserInfo.totalTracked * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                          : '0.00'}\n                        )\n                      </span>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">Rewards</div>\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValueDeposited\">\n                      <span style={{color: '#fcfcfc'}}>\n                        {pressUserInfo ? pressUserInfo.totalClaimable.toFixed(2) : '0.00'} LP\n                      </span>\n                      <span style={{marginLeft: '5px', fontSize: '14px'}}>\n                        ($\n                        {pressUserInfo\n                          ? (pressUserInfo.totalClaimable * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                          : '0.00'}\n                        )\n                      </span>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">APR Yearly | Daily</div>\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValue\">\n                      {displayDailyAPR ? (displayDailyAPR * 365).toFixed(0) : '456'}% |{' '}\n                      {displayDailyAPR ? displayDailyAPR.toFixed(2) : '1.25'}%\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">Total Deposited</div>\n                  </Grid>\n                  <Grid item>\n                    ${pressUserInfo ? pressUserInfo.tvl.toLocaleString('en-US', {maximumFractionDigits: 2}) : '0.00'}\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </AccordionSummary>\n          <AccordionDetails style={{overflow: 'hidden'}}>\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item>\n                <Grid container spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">Est. Reward /day</div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.rewardsPerDay.toFixed(2) : '0.00'} LP\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (pressUserInfo.rewardsPerDay * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Your Deposits{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Shows 90% of the sum of all your deposits\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.totalDeposited.toFixed(2) : '0.00'} LP{' '}\n                          <span className=\"wallet-token-value\">\n                            ($\n                            {pressUserInfo\n                              ? (pressUserInfo.totalDeposited * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Your Compounds{' '}\n                          <LightTooltip arrow placement=\"top\" enterDelay={0} title=\"Sum of all your compounds\">\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? (pressUserInfo.totalTracked - pressUserInfo.totalDeposited).toFixed(2)\n                            : '0.00'}{' '}\n                          LP\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  (pressUserInfo.totalTracked - pressUserInfo.totalDeposited) *\n                                  Number(pressUserInfo.depositTokenPrice)\n                                ).toFixed(2)\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Assassination Tracker{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"You don't want to reach 3.5... ((tracked share in token - tracked token balance) / tracked token balance)\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.profitRatio.toFixed(2) : '0.00'} / 3.5\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Contract Balance{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Amount of Token left in the Contract\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressBalance\n                            ? (Number(pressBalance) / 1e18).toLocaleString('en-US', {maximumFractionDigits: 2})\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressBalance && pressUserInfo\n                              ? (\n                                  (Number(pressBalance) / 1e18) *\n                                  Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Remaining Shares | Tokens{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Your Remaining shares in the pool. Claiming while 'Remaining Shares' = 'Pending Shares' kicks out of the Press.\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? `${pressUserInfo.currentShares.toFixed(2)} | ${pressUserInfo.currentSharesInToken.toFixed(\n                                2,\n                              )} LP`\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  Number(pressUserInfo.currentSharesInToken) * Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Pending Shares | Tokens{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Compounding allows you to have a greater return than your initial.\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo\n                            ? `${pressUserInfo.pendingShares.toFixed(2)} | ${pressUserInfo.pendingSharesInToken.toFixed(\n                                2,\n                              )} LP`\n                            : '0.00'}{' '}\n                          <span className=\"wallet-token-value\">\n                            {' '}\n                            ($\n                            {pressUserInfo\n                              ? (\n                                  Number(pressUserInfo.pendingSharesInToken) * Number(pressUserInfo.depositTokenPrice)\n                                ).toLocaleString('en-US', {maximumFractionDigits: 2})\n                              : '0.00'}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={6} md={3}>\n                    <div className=\"statBox\">\n                      <div className=\"statBoxInner\">\n                        <div className=\"lineLabel\">\n                          Claimed Shares{' '}\n                          <LightTooltip\n                            arrow\n                            placement=\"top\"\n                            enterDelay={0}\n                            title=\"Total Shares claimed so far. (Total Share Balance - Current Share Balance)\"\n                          >\n                            <InfoIcon style={{verticalAlign: 'text-bottom', fontSize: '17px'}} />\n                          </LightTooltip>\n                        </div>\n                        <div className=\"lineValue\">\n                          {pressUserInfo ? pressUserInfo.claimedInShares.toFixed(2) : '0.00'}\n                        </div>\n                      </div>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">DEPOSIT IN {bank.name}</div>\n                        </Box>\n                        <Box mt={2}>\n                          <FormControl>\n                            <RadioGroup\n                              row\n                              aria-labelledby=\"row-radio-buttons-group-label\"\n                              name=\"row-radio-buttons-group\"\n                              value={payWith}\n                              onChange={handlePayWithChange}\n                            >\n                              <FormControlLabel\n                                value={bank.depositTokenName}\n                                control={<Radio />}\n                                label={bank.depositTokenName}\n                              />\n\n                              <FormControlLabel value=\"MIM\" control={<Radio />} label=\"MIM\" />\n                            </RadioGroup>\n                          </FormControl>\n                        </Box>\n                        <div className=\"node-inputDetailsBox\">\n                          <Box className=\"box-price-of-one color-secondary\">\n                            1 share = {pressUserInfo ? pressUserInfo.priceOfOneShare.toFixed(2) : '0.00'}{' '}\n                            {bank.depositTokenName} = $\n                            {pressUserInfo\n                              ? (pressUserInfo.priceOfOneShare * pressUserInfo.depositTokenPrice).toFixed(3)\n                              : '0.000'}\n                          </Box>\n                          <div className=\"inputDetailsBoxInner\">\n                            <Grid container justifyContent=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n                              <Grid item xs={10} md={11}>\n                                <input\n                                  type=\"number\"\n                                  placeholder=\"Enter amount\"\n                                  className=\"amount-input\"\n                                  value={inputValue}\n                                  onChange={updateInput}\n                                />\n                              </Grid>\n                              <Grid item xs={2} md={1} className=\"color-secondary\">\n                                <div onClick={maxClicked} className=\"max-button\">\n                                  MAX\n                                </div>\n                              </Grid>\n                            </Grid>\n                            <div className=\"balance\">\n                              <span>\n                                Wallet:{' '}\n                                {getFullDisplayBalance(payWith === 'MIM' ? mimTokenBalance : depositTokenBalance, 18)}{' '}\n                                {payWith}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <Box mt={2}>\n                          {getLiquidityLink() != null && (\n                            <a\n                              style={{textDecoration: 'none'}}\n                              rel=\"noopener noreferrer\"\n                              target=\"_blank\"\n                              href={getLiquidityLink()}\n                            >\n                              <div className=\"addRemoveLiquidity color-secondary\">Add / Remove Liquidity</div>\n                            </a>\n                          )}\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={12}>\n                            {showApprove() ? (\n                              <button\n                                onClick={() => {\n                                  setApproveLoading(true);\n                                  approve();\n                                }}\n                                className=\"primary-button\"\n                                title=\"Approve\"\n                                style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}\n                              >\n                                {approveLoading ? (\n                                  <span>\n                                    <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                    APPROVING\n                                  </span>\n                                ) : (\n                                  <span>APPROVE</span>\n                                )}\n                              </button>\n                            ) : (\n                              <button\n                                disabled={Number(inputValue) === 0}\n                                onClick={stake}\n                                className=\"primary-button\"\n                                title=\"Create Nodes\"\n                                style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}\n                              >\n                                {depositingLoading ? (\n                                  <span>\n                                    <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                    DEPOSITING\n                                  </span>\n                                ) : (\n                                  <span>DEPOSIT</span>\n                                )}\n                              </button>\n                            )}\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">PENDING {bank.earnTokenName} SHARES</div>\n                        </Box>\n                        <Box style={{textAlign: 'center'}} mt={2}>\n                          <TokenSymbol symbol={bank.earnTokenName} width={59} height={59} />\n                        </Box>\n                        <Box mt={2}>\n                          <Grid\n                            container\n                            direction=\"column\"\n                            spacing={0}\n                            justifyContent=\"center\"\n                            alignContent=\"center\"\n                            alignItems=\"center\"\n                          >\n                            <Grid item className=\"rewardTokenAmount\">\n                              {pressUserInfo ? pressUserInfo.totalClaimable.toFixed(2) : '0.00'} {bank.earnTokenName}\n                            </Grid>\n                            <Grid item className=\"rewardTokenValue\">\n                              $\n                              {pressUserInfo\n                                ? (pressUserInfo.totalClaimable * Number(pressUserInfo.depositTokenPrice)).toFixed(2)\n                                : '0.00'}\n                            </Grid>\n                            {pressUserInfo && pressUserInfo.totalDeposited != 0 && (\n                              <Grid item style={{marginTop: '20px'}} className=\"sharesLeftValue\">\n                                After claiming, you will have{' '}\n                                {(pressUserInfo.currentShares - pressUserInfo.pendingShares).toFixed(2)} share(s) left.\n                                {pressUserInfo.currentShares - pressUserInfo.pendingShares == 0 && (\n                                  <div style={{color: 'red'}}>Claiming will kick you out of the Press.</div>\n                                )}\n                              </Grid>\n                            )}\n                          </Grid>\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={6}>\n                            <button\n                              className=\"primary-button\"\n                              title=\"Compound\"\n                              onClick={() => {\n                                setCompoundLoading(true);\n                                onCompound();\n                              }}\n                              disabled={!pressUserInfo || (pressUserInfo && pressUserInfo.totalClaimable <= 0)}\n                              style={{\n                                borderTopLeftRadius: '0',\n                                borderTopRightRadius: '0',\n                                borderBottomRightRadius: '0',\n                              }}\n                            >\n                              {compoundLoading ? (\n                                <span>\n                                  <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                  PRESSING\n                                </span>\n                              ) : (\n                                <span>PRESS</span>\n                              )}\n                            </button>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <button\n                              style={{borderTopLeftRadius: '0', borderTopRightRadius: '0', borderBottomLeftRadius: '0'}}\n                              className=\"secondary-button\"\n                              title=\"Claim\"\n                              onClick={() => {\n                                if (pressUserInfo.currentShares - pressUserInfo.pendingShares == 0) {\n                                  onPresentModal();\n                                } else {\n                                  setClaimLoading(true);\n                                  onClaim();\n                                }\n                              }}\n                              disabled={!pressUserInfo || (pressUserInfo && pressUserInfo.totalClaimable <= 0)}\n                            >\n                              {claimLoading ? (\n                                <span>\n                                  <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                  CLAIMING SHARES\n                                </span>\n                              ) : (\n                                <span>CLAIM SHARES</span>\n                              )}\n                            </button>\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">{bank.name} LOTTERY</div>\n                        </Box>\n                        <Box mt={2}>\n                          <Grid container direction=\"column\" spacing={1}>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Daily Top Deposit</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.largestDaily.toFixed(2) : '0.00'} LP\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (pressLottoInfo.largestDaily * Number(pressUserInfo.depositTokenPrice)).toFixed(\n                                          2,\n                                        )\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Daily Deposit Pot</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.dailyDepositPot.toFixed(2) : '0.00'} LP\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (\n                                          pressLottoInfo.dailyDepositPot * Number(pressUserInfo.depositTokenPrice)\n                                        ).toFixed(2)\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Largest Deposit Pot</Grid>\n                                <Grid item>\n                                  {pressLottoInfo ? pressLottoInfo.largestDailyPot.toFixed(2) : '0.00'} LP\n                                  <span className=\"wallet-token-value\">\n                                    {' '}\n                                    $\n                                    {pressLottoInfo && pressUserInfo\n                                      ? (\n                                          pressLottoInfo.largestDailyPot * Number(pressUserInfo.depositTokenPrice)\n                                        ).toFixed(2)\n                                      : '0.00'}\n                                  </span>\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Next Winner Drawing</Grid>\n                                <Grid item>\n                                  {displayRemainingTime && (\n                                    <ProgressCountdown\n                                      description=\"Next Drawing\"\n                                      base={moment().toDate()}\n                                      hideBar={true}\n                                      deadline={displayRemainingTime}\n                                    />\n                                  )}\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>Lotto Tickets</Grid>\n                                <Grid item>\n                                  {pressLottoInfo\n                                    ? `${pressLottoInfo.lottoTickets} / ${pressLottoInfo.totalLottoTickets}`\n                                    : '0 / 0'}{' '}\n                                </Grid>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Grid container justifyContent=\"space-between\">\n                                <Grid item>\n                                  <div>Your Lotto Winnings</div>\n                                  <div className=\"color-secondary\" style={{fontSize: '12px'}}>\n                                    Your winnings are sent to you automatically\n                                  </div>\n                                </Grid>\n                                <Grid item>{pressLottoInfo ? pressLottoInfo.lottoWinnings : '0'} LP</Grid>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </div>\n                      <Box mt={2}>\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs={12}>\n                            {grapeTokenApprove.approveStatus !== ApprovalState.APPROVED ? (\n                              <>\n                                <span style={{paddingLeft: '35px', paddingRight: '35px'}}>\n                                  {' '}\n                                  Burn Grape for Tickets (1 Grape each)\n                                </span>\n                                <button\n                                  className=\"primary-button\"\n                                  title=\"Approve\"\n                                  onClick={() => {\n                                    setApproveLoading(true);\n                                    grapeTokenApprove.approve();\n                                  }}\n                                  style={{\n                                    marginTop: '15px',\n                                    borderTopLeftRadius: '0',\n                                    borderTopRightRadius: '0',\n                                  }}\n                                >\n                                  {approveLoading ? (\n                                    <span>\n                                      <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                      APPROVING\n                                    </span>\n                                  ) : (\n                                    <span>APPROVE</span>\n                                  )}\n                                </button>\n                              </>\n                            ) : (\n                              <>\n                                <Grid container style={{paddingLeft: '35px', paddingRight: '35px'}}>\n                                  <Grid item xs={12}>\n                                    Burn batches of {GRAPE_PER_BATCH} Grape in exchange for 10 Lotto tickets\n                                  </Grid>\n                                  <Grid item xs={12}>\n                                    <div className=\"inputDetailsBoxInner\">\n                                      <Grid container justifyContent=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n                                        <Grid item xs={10} md={11}>\n                                          <input\n                                            type=\"number\"\n                                            placeholder=\"Number of batches\"\n                                            className=\"amount-input\"\n                                            value={batchAmount}\n                                            onChange={handleBatchAmountChanged}\n                                          />\n                                        </Grid>\n                                        <Grid item xs={2} md={1} className=\"color-secondary\">\n                                          <div onClick={maxBatchClicked} className=\"max-button\">\n                                            MAX\n                                          </div>\n                                        </Grid>\n                                      </Grid>\n                                      <div className=\"balance\">\n                                        <span>Wallet: {getFullDisplayBalance(grapeTokenBalance, 18)} GRAPE</span>\n                                      </div>\n                                    </div>\n                                  </Grid>\n                                </Grid>\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 mt-2\">\n                                  <button\n                                    className=\"primary-button\"\n                                    title=\"Buy \"\n                                    onClick={burn}\n                                    disabled={\n                                      Number(batchAmount) <= 0 ||\n                                      Number(batchAmount) > Number(grapeTokenBalance) / 1e18 / 10\n                                    }\n                                    style={{\n                                      marginTop: '15px',\n                                      borderTopLeftRadius: '0',\n                                      borderTopRightRadius: '0',\n                                    }}\n                                  >\n                                    Burn {numGrapeToBurn} GRAPE\n                                  </button>\n                                </div>\n                              </>\n                            )}\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <Box className=\"lineDetailsBox\">\n                      <div className=\"press-line-details-inner\">\n                        <Box>\n                          <div className=\"pending-rewards\">{bank.earnTokenName} ASSASSINATION</div>\n                        </Box>\n\n                        <Box mt={2}>\n                          <Grid container justifyContent=\"space-between\">\n                            <Grid item>Your Assassination Profits</Grid>\n                            <Grid item>\n                              {pressUserInfo ? pressUserInfo.profitsAssassinated.toFixed(2) : '0.00'}{' '}\n                              {bank.depositTokenName}\n                              <span className=\"wallet-token-value\">\n                                {' '}\n                                $\n                                {pressUserInfo\n                                  ? (\n                                      pressUserInfo.profitsAssassinated * Number(pressUserInfo.depositTokenPrice)\n                                    ).toFixed(2)\n                                  : '0.00'}\n                              </span>\n                            </Grid>\n                          </Grid>\n                        </Box>\n\n                        <Box mt={3}>\n                          <div className=\"pending-rewards\">USERS NEAR ASSASSINATION (95%)</div>\n                          {usersNearAssassination && usersNearAssassination.length > 0 ? (\n                            <Grid\n                              container\n                              direction=\"column\"\n                              spacing={1}\n                              style={{marginTop: '20px', paddingBottom: '20px'}}\n                            >\n                              {usersNearAssassination.map((user) => (\n                                <Grid item xs={12}>\n                                  <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n                                    <Grid item>{shortenAddress(user)}</Grid>\n                                    <Grid item>\n                                      <button\n                                        onClick={() => assassinate(user)}\n                                        className=\"primary-button\"\n                                        style={{height: '35px'}}\n                                      >\n                                        Assassinate\n                                      </button>\n                                    </Grid>\n                                  </Grid>\n                                </Grid>\n                              ))}\n                            </Grid>\n                          ) : (\n                            <div className=\"color-secondary\" style={{marginTop: '20px'}}>\n                              No users near assassination\n                            </div>\n                          )}\n                        </Box>\n                      </div>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </AccordionDetails>\n        </Accordion>\n      )}\n    </>\n  );\n};\n\nexport default WinepressCard;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bond/components/ExchangeModal.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Chart/Chart.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/FarmCard.tsx",["934","935"],"//@ts-nocheck\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Box, Grid, Accordion, AccordionDetails, AccordionSummary, useMediaQuery} from '@material-ui/core';\nimport useEarnings from '../../hooks/useEarnings';\nimport useHarvest from '../../hooks/useHarvest';\nimport {getDisplayBalance, getFullDisplayBalance} from '../../utils/formatBalance';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useStakedBalance from '../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../hooks/useStakedTokenPriceInDollars';\nimport useStake from '../../hooks/useStake';\nimport useZap from '../../hooks/useZap';\nimport useWithdraw from '../../hooks/useWithdraw';\nimport ZapModal from '../Bank/components/ZapModal';\nimport {Bank} from '../../grape-finance';\nimport useStatsForPool from '../../hooks/useStatsForPool';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport useModal from '../../hooks/useModal';\nimport useApprove, {ApprovalState} from '../../hooks/useApprove';\nimport {SyncLoader} from 'react-spinners';\nimport {subscribe, unsubscribe} from '../../state/txEvent';\nimport {TokenStat} from '../../grape-finance/types';\n\ninterface FarmCardProps {\n  bank: Bank;\n  grapeStats: TokenStat;\n  tShareStats: TokenStat;\n  activesOnly: boolean;\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({bank, grapeStats, tShareStats, activesOnly}) => {\n  const widthUnder600 = useMediaQuery('(max-width:600px)');\n  const poolStats = useStatsForPool(bank);\n\n  const [loading, setLoading] = useState(true);\n  const [activeDetailsBoxTab, setActiveDetailsBoxTab] = useState('Deposit');\n  const [expanded, setExpanded] = useState(false);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [claimLoading, setClaimLoading] = useState(false);\n  const [depositingLoading, setDepositingLoading] = useState(false);\n  const [approveLoading, setApproveLoading] = useState(false);\n  const [withdrawLoading, setWithdrawLoading] = useState(false);\n\n  const tokenBalance = useTokenBalance(bank.depositToken);\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\n  const tokenStats = bank.earnTokenName === 'WINE' ? tShareStats : grapeStats;\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const rewardTokenpriceInDollars = useStakedTokenPriceInDollars(bank.earnTokenName, bank.earnToken);\n  const {approveStatus, approve} = useApprove(bank.depositToken, bank.address);\n\n  const tokenPriceInDollars = useMemo(\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\n    [tokenStats],\n  );\n\n  // Used in UI\n  const earnedInToken = Number(getDisplayBalance(earnings));\n  const earnedInDollars = (Number(tokenPriceInDollars) * earnedInToken).toFixed(2);\n  const stakedInToken = Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal));\n  const stakedInDollars = (Number(stakedTokenPriceInDollars) * stakedInToken).toFixed(2);\n  const rewardsPerDay = useMemo(\n    () =>\n      stakedInDollars && poolStats && rewardTokenpriceInDollars\n        ? (Number(stakedInDollars) * (Number(poolStats.dailyAPR) / 100)) / Number(rewardTokenpriceInDollars)\n        : null,\n    [stakedInDollars, poolStats, rewardTokenpriceInDollars],\n  );\n\n  useEffect(() => {\n    if (stakedInToken != null && earnedInToken != null && poolStats) {\n      setLoading(false);\n    }\n  }, [stakedInToken, earnedInToken, poolStats]);\n\n  useEffect(() => {\n    subscribe('failedTx', () => {\n      setClaimLoading(false);\n      setWithdrawLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    subscribe('successTx', () => {\n      setWithdrawLoading(false);\n      setClaimLoading(false);\n      setDepositingLoading(false);\n      setApproveLoading(false);\n    });\n\n    return () => {\n      unsubscribe('failedTx');\n      unsubscribe('successTx');\n    };\n  }, []);\n\n  // Custom Hooks functinos\n  const {onReward} = useHarvest(bank);\n  const {onStake} = useStake(bank);\n  const {onZap} = useZap(bank);\n  const {onWithdraw} = useWithdraw(bank);\n\n  // Custom functions\n  const expand = () => {\n    setExpanded(!expanded);\n  };\n\n  const withdraw = () => {\n    if (Number(inputValue) > 0) {\n      setWithdrawLoading(true);\n      onWithdraw(inputValue.toString());\n    }\n  };\n\n  const stake = () => {\n    if (Number(inputValue) > 0) {\n      setDepositingLoading(true);\n      onStake(inputValue.toString());\n    } else {\n    }\n  };\n\n  const maxClicked = () => {\n    if (activeDetailsBoxTab === 'Deposit') {\n      setInputValue(getFullDisplayBalance(tokenBalance, 18));\n    } else if (activeDetailsBoxTab === 'Withdraw') {\n      setInputValue(stakedInToken.toString());\n    }\n  };\n\n  const updateInput = (event: any) => {\n    setInputValue(event.target.value);\n  };\n\n  const getLiquidityLink = () => {\n    if (bank.depositTokenName === 'GRAPE-MIM-LP') {\n      return 'https://traderjoexyz.com/avalanche/pool/v1/0x130966628846bfd36ff31a822705796e8cb8c18d/0x5541d83efad1f281571b343977648b75d95cdac2';\n    } else if (bank.depositTokenName === 'GRAPE-MIM-SW') {\n      return 'https://www.swapsicle.io/add/0x130966628846BFd36ff31a822705796e8cb8C18D/0x5541D83EFaD1f281571B343977648B75d95cdAC2';\n    } else if (bank.depositTokenName.includes('WINE-MIM')) {\n      return 'https://traderjoexyz.com/avalanche/pool/v1/0x130966628846bfd36ff31a822705796e8cb8c18d/0xc55036b5348cfb45a932481744645985010d3a44';\n    } else if (bank.depositTokenName.includes('GRAPE-WINE')) {\n      return 'https://traderjoexyz.com/avalanche/pool/v1/0x5541D83EFaD1f281571B343977648B75d95cdAC2/0xc55036b5348cfb45a932481744645985010d3a44';\n    } else if (bank.depositTokenName.includes('WINE-POPS')) {\n      return 'https://www.swapsicle.io/add/0xC55036B5348CfB45a932481744645985010d3A44/0x240248628B7B6850352764C5dFa50D1592A033A8';\n    }\n  };\n\n  const [onPresentZap, onDissmissZap] = useModal(\n    <ZapModal\n      decimals={bank.depositToken.decimal}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onZap(zappingToken, tokenName, amount);\n        onDissmissZap();\n      }}\n      LPtokenName={bank.depositTokenName}\n    />,\n  );\n\n  const zap = () => {\n    onPresentZap();\n  };\n\n  return (\n    <>\n      {(activesOnly === false || (activesOnly === true && stakedInToken > 0)) && (\n        <Accordion expanded={expanded} onChange={expand} className=\"accordion\">\n          <AccordionSummary\n            expandIcon={loading ? <SyncLoader color=\"white\" size={4} /> : <ExpandMoreIcon style={{color: 'white'}} />}\n            aria-controls=\"panel1bh-content\"\n            id=\"panel1bh-header\"\n          >\n            <Grid container justifyContent={'space-between'} alignItems=\"center\" className=\"lineItemInner\" spacing={1}>\n              <Grid item className=\"lineName\" xs={12} sm={12} md={4}>\n                <Grid container justifyContent=\"flex-start\" alignItems=\"center\" spacing={2} wrap=\"nowrap\">\n                  <Grid item>\n                    <TokenSymbol symbol={bank.depositTokenName} height={30} width={30} />\n                  </Grid>\n                  <Grid item>\n                    <div>{bank.depositTokenName}</div>\n                    <div className=\"lineDescription\">\n                      Deposit {bank.depositTokenName} and earn {bank.earnTokenName}\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">Deposited</div>\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValueDeposited\">\n                      <span style={{color: '#fcfcfc'}}>{stakedInToken}</span>\n                      <span style={{marginLeft: '5px', fontSize: '14px'}}>(${stakedInDollars})</span>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">Rewards</div>\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValueDeposited\">\n                      <span style={{color: '#fcfcfc'}}>{earnedInToken}</span>\n                      <span style={{marginLeft: '5px', fontSize: '14px'}}>(${earnedInDollars})</span>\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">APR Yearly | Daily</div>\n                  </Grid>\n                  <Grid item>\n                    <div className=\"lineValue\">\n                      {poolStats?.yearlyAPR ? Number(poolStats.yearlyAPR).toFixed(0) : '---'}% |{' '}\n                      {poolStats?.dailyAPR ? poolStats?.dailyAPR : '-.--'}%\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <Grid container direction={widthUnder600 ? 'row' : 'column'} justifyContent=\"space-between\">\n                  <Grid item>\n                    <div className=\"lineLabel\">TVL</div>\n                  </Grid>\n                  <Grid item>${poolStats?.TVL ? Number(poolStats?.TVL).toLocaleString('en-US') : '--.--'}</Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </AccordionSummary>\n          <AccordionDetails style={{overflow: 'hidden'}}>\n            <Grid container spacing={5}>\n              <Grid item xs={12} sm={12} md={6}>\n                <Box className=\"lineDetailsBox\">\n                  <div className=\"line-details-inner\">\n                    <Grid container justifyContent=\"space-evenly\" spacing={2}>\n                      <Grid\n                        item\n                        className={activeDetailsBoxTab === 'Deposit' ? 'tabDetailsItemActive' : 'tabDetailsItem'}\n                        onClick={() => setActiveDetailsBoxTab('Deposit')}\n                      >\n                        DEPOSIT\n                      </Grid>\n                      <Grid\n                        item\n                        className={activeDetailsBoxTab === 'Withdraw' ? 'tabDetailsItemActive' : 'tabDetailsItem'}\n                        onClick={() => setActiveDetailsBoxTab('Withdraw')}\n                      >\n                        WITHDRAW\n                      </Grid>\n                    </Grid>\n\n                    <div className=\"inputDetailsBox\">\n                      <Box className=\"box-price-of-one color-secondary\">\n                        1 {bank.depositTokenName} = $\n                        {stakedTokenPriceInDollars ? Number(stakedTokenPriceInDollars).toFixed(3) : '0.000'}\n                      </Box>\n                      <div className=\"inputDetailsBoxInner\">\n                        <Grid container justifyContent=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n                          <Grid item xs={10} md={11}>\n                            <input\n                              type=\"number\"\n                              placeholder=\"Enter amount\"\n                              className=\"amount-input\"\n                              value={inputValue}\n                              onChange={updateInput}\n                            />\n                          </Grid>\n                          <Grid item xs={2} md={1} className=\"color-secondary\">\n                            <div onClick={maxClicked} className=\"max-button\">\n                              MAX\n                            </div>\n                          </Grid>\n                        </Grid>\n                        <div className=\"balance\">\n                          {activeDetailsBoxTab === 'Deposit' && (\n                            <span>\n                              Wallet: {getFullDisplayBalance(tokenBalance, 18)} {bank.depositTokenName}\n                            </span>\n                          )}\n                          {activeDetailsBoxTab === 'Withdraw' && (\n                            <span>\n                              Staked: {stakedInToken} {bank.depositTokenName}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <Box mt={2}>\n                      {getLiquidityLink() != null && (\n                        <a\n                          style={{textDecoration: 'none'}}\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                          href={getLiquidityLink()}\n                        >\n                          <div className=\"addRemoveLiquidity color-secondary\">Add / Remove Liquidity</div>\n                        </a>\n                      )}\n                    </Box>\n                  </div>\n\n                  <Box>\n                    <Grid container justifyContent=\"center\">\n                      {activeDetailsBoxTab === 'Deposit' && (\n                        <>\n                          {(bank.depositTokenName.includes('LP') || bank.depositTokenName === 'GRAPE-MIM-SW') && (\n                            <Grid item xs={6}>\n                              <button\n                                onClick={zap}\n                                className=\"secondary-button\"\n                                disabled={Number(inputValue) === 0 || inputValue === '' || bank.closedForStaking == true}\n                                title=\"Zap\"\n                                style={{\n                                  borderTopLeftRadius: '0',\n                                  borderTopRightRadius: '0',\n                                  borderBottomRightRadius: '0',\n                                }}\n                              >\n                                Zap\n                              </button>\n                            </Grid>\n                          )}\n                          {activeDetailsBoxTab === 'Deposit' && (\n                            <Grid\n                              item\n                              xs={\n                                bank.depositTokenName.includes('LP') || bank.depositTokenName === 'GRAPE-MIM-SW'\n                                  ? 6\n                                  : 12\n                              }\n                            >\n                              {approveStatus !== ApprovalState.APPROVED ? (\n                                <button\n                                  style={{\n                                    borderTopLeftRadius: '0',\n                                    borderTopRightRadius: '0',\n                                    borderBottomLeftRadius:\n                                      bank.depositTokenName.includes('LP') || bank.depositTokenName === 'GRAPE-MIM-SW'\n                                        ? '0'\n                                        : '5px',\n                                  }}\n                                  onClick={() => {\n                                    setApproveLoading(true);\n                                    approve();\n                                  }}\n                                  className=\"primary-button\"\n                                  title=\"Approve\"\n                                >\n                                  {approveLoading ? (\n                                    <span>\n                                      <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                      APPROVING\n                                    </span>\n                                  ) : (\n                                    <span>APPROVE</span>\n                                  )}{' '}\n                                </button>\n                              ) : (\n                                <button\n                                  style={{\n                                    borderTopLeftRadius: '0',\n                                    borderTopRightRadius: '0',\n                                    borderBottomLeftRadius:\n                                      bank.depositTokenName.includes('LP') || bank.depositTokenName === 'GRAPE-MIM-SW'\n                                        ? '0'\n                                        : '5px',\n                                  }}\n                                  disabled={Number(inputValue) === 0 || inputValue === '' || bank.closedForStaking == true}\n                                  onClick={stake}\n                                  className=\"primary-button\"\n                                  title=\"Deposit\"\n                                >\n                                  {depositingLoading ? (\n                                    <span>\n                                      <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                      DEPOSITING\n                                    </span>\n                                  ) : (\n                                    <span>DEPOSIT</span>\n                                  )}\n                                </button>\n                              )}\n                            </Grid>\n                          )}\n                        </>\n                      )}\n\n                      {activeDetailsBoxTab === 'Withdraw' && (\n                        <>\n                          <Grid item xs={12}>\n                            {activeDetailsBoxTab === 'Withdraw' && (\n                              <button\n                                style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}\n                                disabled={inputValue === ''}\n                                onClick={withdraw}\n                                className=\"secondary-button\"\n                                title=\"Withdraw\"\n                              >\n                                {withdrawLoading ? (\n                                  <span>\n                                    <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                                    WITHDRAWING\n                                  </span>\n                                ) : (\n                                  <span>WITHDRAW</span>\n                                )}\n                              </button>\n                            )}\n                          </Grid>\n                        </>\n                      )}\n                    </Grid>\n                  </Box>\n                </Box>\n              </Grid>\n              <Grid item xs={12} sm={12} md={6}>\n                <Box className=\"lineDetailsBox\">\n                  <div className=\"line-details-inner\">\n                    <Box>\n                      <div className=\"pending-rewards\">PENDING {bank.earnTokenName} REWARDS</div>\n                    </Box>\n                    <Box style={{textAlign: 'center'}} mt={2}>\n                      <TokenSymbol symbol={bank.earnTokenName} width={59} height={59} />\n                    </Box>\n                    <Box mt={2}>\n                      <Grid\n                        container\n                        direction=\"column\"\n                        spacing={0}\n                        justifyContent=\"center\"\n                        alignContent=\"center\"\n                        alignItems=\"center\"\n                      >\n                        <Grid item className=\"rewardTokenAmount\">\n                          {earnedInToken} {bank.earnTokenName}\n                        </Grid>\n                        <Grid item className=\"rewardTokenValue\">\n                          ${earnedInDollars}\n                        </Grid>\n                      </Grid>\n                    </Box>\n                    <Box mt={2}>\n                      <div className=\"rewards-per-day\">\n                        <span>\n                          {rewardsPerDay?.toFixed(2)} {bank.earnTokenName} per day\n                          <span style={{marginLeft: '5px', fontSize: '14px'}} className=\"rewardTokenValue\">\n                            ($\n                            {(rewardsPerDay * Number(rewardTokenpriceInDollars)).toFixed(2)})\n                          </span>\n                        </span>\n                      </div>\n                    </Box>\n                  </div>\n                  <Box>\n                    <Grid container justifyContent=\"center\">\n                      <Grid item xs={12}>\n                        <button\n                          className=\"secondary-button\"\n                          title=\"Claim\"\n                          onClick={() => {\n                            setClaimLoading(true);\n                            onReward();\n                          }}\n                          disabled={earnings.eq(0)}\n                          style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}\n                        >\n                          {claimLoading ? (\n                            <span>\n                              <SyncLoader color=\"white\" size={4} style={{marginRight: '10px'}} />\n                              CLAIMING\n                            </span>\n                          ) : (\n                            <span>CLAIM</span>\n                          )}\n                        </button>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </AccordionDetails>\n        </Accordion>\n      )}\n    </>\n  );\n};\n\nexport default FarmCard;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/GrapeFinance.ts",["936","937","938","939","940","941","942","943","944","945","946"],"import {ChainId, CurrencyAmount, Fetcher, Pair, Route, Token, TokenAmount, Trade, TradeType} from '@traderjoe-xyz/sdk';\n\nimport {Fetcher as FetcherPangolin, Token as TokenPangolin, Route as PangolinRoute} from '@pangolindex/sdk';\n\nimport {Configuration} from './config';\nimport {\n  ContractName,\n  TokenStat,\n  AllocationTime,\n  LPStat,\n  Bank,\n  NodesRewardWalletBalance,\n  PoolStats,\n  WineSwapperStat,\n  WalletNodesAndNFTs,\n  WalletStats,\n  ExtinctionPoolInfo,\n  ExtinctionRewardToken,\n  PegPool,\n  PegPoolToken,\n  PegPoolUserInfo,\n  PressUserInfo,\n  PressLottoInfo,\n  LightPoolStats,\n} from './types';\nimport {BigNumber, BigNumberish, Contract, ethers, EventFilter} from 'ethers';\nimport {decimalToBalance} from './ether-utils';\nimport {TransactionResponse} from '@ethersproject/providers';\nimport ERC20, {LPERC20} from './ERC20';\nimport {getFullDisplayBalance, getDisplayBalance} from '../utils/formatBalance';\nimport {getDefaultProvider} from '../utils/provider';\n\nimport {bankDefinitions} from '../config';\nimport moment from 'moment';\nimport {parseUnits, formatEther} from 'ethers/lib/utils';\nimport {MIM_TICKER, SPOOKY_ROUTER_ADDR, GRAPE_TICKER, WINE_TICKER} from '../utils/constants';\nimport {Console} from 'console';\n\n/**\n * An API module of Grape Finance contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class GrapeFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: {[name: string]: Contract};\n  nftContracts: {[name: string]: Contract};\n  externalTokens: {[name: string]: ERC20};\n  externalLPs: {[name: string]: LPERC20};\n  boardroomVersionOfUser?: string;\n\n  GRAPEBTCB_LP: Contract;\n  GRAPE: ERC20;\n  XGRAPE: ERC20;\n  WINE: ERC20;\n  GBOND: ERC20;\n  WAVAX: ERC20;\n  MIM: ERC20;\n  WAMP: ERC20;\n  VOLT: ERC20;\n  SW: ERC20;\n  DAI: ERC20;\n  HSHARE: ERC20;\n  VINTAGELP: ERC20;\n  GRAPEXGRAPELP: ERC20;\n  VINTAGE: ERC20;\n  SVINTAGE: ERC20;\n\n  constructor(cfg: Configuration) {\n    const {deployments, externalTokens} = cfg;\n    const provider = getDefaultProvider();\n    // loads contracts from deployments\n    this.contracts = {};\n    this.nftContracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      if (deployment.type === 'NFT') {\n        this.nftContracts[name] = new Contract(deployment.address, deployment.abi, provider);\n      } else {\n        this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n      }\n    }\n    this.externalTokens = {};\n    this.externalLPs = {};\n    for (const [symbol, [address, decimal, lp]] of Object.entries(externalTokens)) {\n      if (lp) {\n        let [tokenA, tokenB] = lp;\n        this.externalLPs[symbol] = new LPERC20(new ERC20(address, provider, symbol, decimal), [\n          new ERC20(tokenA, provider, symbol, decimal),\n          new ERC20(tokenB, provider, symbol, decimal),\n        ]);\n      }\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.GRAPE = new ERC20(deployments.Grape.address, provider, 'GRAPE');\n    this.XGRAPE = new ERC20(deployments.xGrape.address, provider, 'XGRAPE');\n    this.WINE = new ERC20(deployments.Wine.address, provider, 'WINE');\n    this.GBOND = new ERC20(deployments.BBond.address, provider, 'GBOND');\n    this.MIM = this.externalTokens['MIM'];\n    this.WAMP = this.externalTokens['WAMP'];\n    this.VOLT = this.externalTokens['VOLT'];\n    this.SW = this.externalTokens['GRAPE-MIM-SW'];\n    this.DAI = this.externalTokens['DAI'];\n    this.HSHARE = this.externalTokens['HSHARE'];\n    this.VINTAGELP = this.externalTokens['sVintageLP'];\n    this.GRAPEXGRAPELP = this.externalTokens['GRAPE-XGRAPE-LP'];\n    this.VINTAGE = this.externalTokens['Vintage'];\n    this.SVINTAGE = this.externalTokens['sVintage'];\n    // Uniswap V2 Pair\n    //this.GRAPEMIM_LP = new Contract(externalTokens['GRAPE-MIM-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.GRAPE, this.WINE, this.GBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    //this.GRAPEMIM_LP = this.GRAPEMIM_LP.connect(this.signer);\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchBoardroomVersionOfUser()\n      .then((version) => (this.boardroomVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch boardroom version: ${err.stack}`);\n        this.boardroomVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM APE TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getGrapeXGrapeLPPrice(): Promise<number> {\n    const {GRAPEXGRAPE, xGrapeOracle} = this.contracts;\n    const grapeXGrapeSupply = Number(await GRAPEXGRAPE.totalSupply()) / 1e18;\n    const xGrapePrice = Number(await xGrapeOracle.xGrapePrice()) / 1e18;\n    const xGrapeBalance = Number(await this.XGRAPE.balanceOf(this.GRAPEXGRAPELP.address)) / 1e18;\n    const fixedLPPrice = (xGrapeBalance * xGrapePrice * 2) / grapeXGrapeSupply;\n    return fixedLPPrice;\n  }\n\n  async getWinepressData(): Promise<PressUserInfo> {\n    const {Winepress, priceOracle} = this.contracts;\n    const userInfo = await Winepress.userInfo(this.myAccount);\n    const pendingRewards = await Winepress.pendingRewards(this.myAccount);\n    const wineMIMPrice = await priceOracle.wineMimLPVal();\n    const totalDeposited = await Winepress.totalDeposited();\n    const rewardsPerDay = await Winepress.rewardsPerDay(this.myAccount);\n    const profitRatio = await Winepress.calculateTrackedProfitRatio(this.myAccount);\n    const pendingShares = await Winepress.pendingShares(this.myAccount);\n    const profit = await Winepress.calculateProfit(this.myAccount);\n\n    const price = Number(await Winepress.calculatePrice()) / 1e18;\n    const currentSharesWorthInToken = (userInfo.balance / 1e18) * price;\n    const pendingSharesWorthInToken = (pendingShares / 1e18) * price;\n    const sharesClaimed = userInfo.totalShareBalance / 1e18 - userInfo.balance / 1e18;\n\n    return {\n      totalTracked: Number(userInfo.trackedTokenBalance / 1e18),\n      totalDeposited: Number(userInfo.totalTokenBalance / 1e18),\n      totalClaimable: Number(pendingRewards / 1e18),\n      profitsAssassinated: Number(userInfo.profitsAssassinated) / 1e18,\n      priceOfOneShare: price,\n      depositTokenPrice: Number(wineMIMPrice) / 1e18,\n      pressTotalDeposited: Number(totalDeposited) / 1e18,\n      tvl: (Number(totalDeposited) / 1e18) * (Number(wineMIMPrice) / 1e18),\n      rewardsPerDay: Number(rewardsPerDay) / 1e18,\n      profit: Number(profit) / 1e18,\n      profitRatio: Number(profitRatio) / 1e18,\n      pendingShares: Number(pendingShares) / 1e18,\n      pendingSharesInToken: pendingSharesWorthInToken,\n      currentSharesInToken: currentSharesWorthInToken,\n      currentShares: Number(userInfo.balance) / 1e18,\n      claimedInShares: sharesClaimed,\n    };\n  }\n\n  async getSodapressData(): Promise<PressUserInfo> {\n    const {Sodapress} = this.contracts;\n    const userInfo = await Sodapress.userInfo(this.myAccount);\n    const pendingRewards = await Sodapress.pendingRewards(this.myAccount);\n    const totalDeposited = await Sodapress.totalDeposited();\n    const depositTokenprice = await this.getGrapeXGrapeLPPrice();\n    const rewardsPerDay = await Sodapress.rewardsPerDay(this.myAccount);\n    const profitRatio = await Sodapress.calculateTrackedProfitRatio(this.myAccount);\n    const profit = await Sodapress.calculateProfit(this.myAccount);\n    const pendingShares = await Sodapress.pendingShares(this.myAccount);\n    const price = Number(await Sodapress.calculatePrice()) / 1e18;\n    const currentSharesWorthInToken = (userInfo.balance / 1e18) * price;\n    const pendingSharesWorthInToken = (pendingShares / 1e18) * price;\n    const sharesClaimed = userInfo.totalShareBalance / 1e18 - userInfo.balance / 1e18;\n\n    return {\n      totalTracked: Number(userInfo.trackedTokenBalance / 1e18),\n      totalDeposited: Number(userInfo.totalTokenBalance / 1e18),\n      totalClaimable: Number(pendingRewards / 1e18),\n      priceOfOneShare: price,\n      pressTotalDeposited: Number(totalDeposited) / 1e18,\n      profitsAssassinated: Number(userInfo.profitsAssassinated) / 1e18,\n      depositTokenPrice: Number(depositTokenprice),\n      tvl: (Number(totalDeposited) / 1e18) * Number(depositTokenprice),\n      rewardsPerDay: Number(rewardsPerDay) / 1e18,\n      profitRatio: Number(profitRatio) / 1e18,\n      profit: Number(profit) / 1e18,\n      currentShares: Number(userInfo.balance) / 1e18,\n      pendingShares: Number(pendingShares) / 1e18,\n      pendingSharesInToken: pendingSharesWorthInToken,\n      currentSharesInToken: currentSharesWorthInToken,\n      claimedInShares: sharesClaimed,\n    };\n  }\n\n  async getSolerapressData(): Promise<PressUserInfo> {\n    const {Solerapress} = this.contracts;\n    const userInfo = await Solerapress.userInfo(this.myAccount);\n    const pendingRewards = await Solerapress.pendingRewards(this.myAccount);\n    const totalDeposited = await Solerapress.totalDeposited();\n    const depositTokenprice = await this.getSVintagePrice();\n    const rewardsPerDay = await Solerapress.rewardsPerDay(this.myAccount);\n    const profitRatio = await Solerapress.calculateTrackedProfitRatio(this.myAccount);\n    const profit = await Solerapress.calculateProfit(this.myAccount);\n    const pendingShares = await Solerapress.pendingShares(this.myAccount);\n    const price = Number(await Solerapress.calculatePrice()) / 1e18;\n    const currentSharesWorthInToken = (userInfo.balance / 1e18) * price;\n    const pendingSharesWorthInToken = (pendingShares / 1e18) * price;\n    const sharesClaimed = userInfo.totalShareBalance / 1e18 - userInfo.balance / 1e18;\n\n    return {\n      totalTracked: Number(userInfo.trackedTokenBalance / 1e18),\n      totalDeposited: Number(userInfo.totalTokenBalance / 1e18),\n      totalClaimable: Number(pendingRewards / 1e18),\n      pressTotalDeposited: Number(totalDeposited) / 1e18,\n      priceOfOneShare: price,\n      profitsAssassinated: Number(userInfo.profitsAssassinated) / 1e18,\n      depositTokenPrice: depositTokenprice,\n      tvl: (Number(totalDeposited) / 1e18) * Number(depositTokenprice),\n      rewardsPerDay: Number(rewardsPerDay) / 1e18,\n      profitRatio: Number(profitRatio) / 1e18,\n      profit: Number(profit) / 1e18,\n      currentShares: Number(userInfo.balance) / 1e18,\n      pendingShares: Number(pendingShares) / 1e18,\n      pendingSharesInToken: pendingSharesWorthInToken,\n      currentSharesInToken: currentSharesWorthInToken,\n      claimedInShares: sharesClaimed,\n    };\n  }\n\n  async getPressLottoInfo(pressName: string): Promise<PressLottoInfo> {\n    const pressContract = this.contracts[pressName + 'Lotto'];\n    const largestDaily = await pressContract.largestDaily();\n    const largestDailyPot = await pressContract.largestDailyPot();\n    const dailyDepositPot = await pressContract.dailyDepositPot();\n    const monthlyWinnersPot = await pressContract.monthlyWinnersPot();\n    const timeLeftUntilNewDay = await pressContract.timeLeftUntilNewDay();\n    const lottoTickets = await pressContract.chanceToWinDaily(this.myAccount);\n    const lottoWinnings = await pressContract.userWinnings(this.myAccount);\n    return {\n      largestDaily: Number(largestDaily[1]) / 1e18,\n      largestDailyAddress: largestDaily[0],\n      largestDailyPot: Number(largestDailyPot) / 1e18,\n      dailyDepositPot: Number(dailyDepositPot) / 1e18,\n      monthlyWinnersPot: Number(monthlyWinnersPot) / 1e18,\n      timeLeftUntilNewDay: timeLeftUntilNewDay,\n      lottoTickets: lottoTickets[0],\n      totalLottoTickets: lottoTickets[1],\n      lottoWinnings: Number(lottoWinnings) / 1e18,\n    };\n  }\n\n  async burnGrapePress(poolName: ContractName, batches: number): Promise<TransactionResponse> {\n    const press = this.contracts[poolName + 'Lotto'];\n    return await press.burnGRAPE(batches);\n  }\n\n  async assassinatePress(poolName: ContractName, user: string): Promise<TransactionResponse> {\n    const press = this.contracts[poolName];\n    return await press.assassinate(user);\n  }\n\n  async getAllUsersNearAssassination(press: string): Promise<string[]> {\n    const pressContract = this.contracts[press];\n    const usersNearAssassination = await pressContract.fetchAllUsersNearAssassination(950);\n    return usersNearAssassination;\n  }\n\n  async getXGrapePrice(): Promise<string> {\n    const {xGrapeOracle} = this.contracts;\n    const xGrapePrice = Number(await xGrapeOracle.xGrapePrice()) / 1e18;\n    return xGrapePrice.toFixed(3);\n  }\n\n  async getGrapeStat(): Promise<TokenStat> {\n    const {GrapeRewardPool, GrapeGenesisRewardPool} = this.contracts;\n    const supply = await this.GRAPE.totalSupply();\n    const grapeRewardPoolSupply = await this.GRAPE.balanceOf(GrapeGenesisRewardPool.address);\n    const grapeRewardPoolSupply2 = await this.GRAPE.balanceOf(GrapeRewardPool.address);\n    const grapeCirculatingSupply = supply.sub(grapeRewardPoolSupply).sub(grapeRewardPoolSupply2);\n\n    const minusAirdrop = getDisplayBalance(grapeCirculatingSupply, this.GRAPE.decimal, 0);\n\n    const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.GRAPE);\n\n    const priceOfOneBTC = 1;\n\n    const priceOfGrapeInDollars = (Number(priceInBTC) * Number(priceOfOneBTC)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInBTC?.toString(),\n      priceInDollars: priceOfGrapeInDollars,\n      totalSupply: getDisplayBalance(supply, 18, 0),\n      circulatingSupply: minusAirdrop,\n    };\n  }\n\n  async getHermesStat(): Promise<TokenStat> {\n    const {GrapeRewardPool, GrapeGenesisRewardPool} = this.contracts;\n    const supply = await this.GRAPE.totalSupply();\n    const grapeRewardPoolSupply = await this.GRAPE.balanceOf(GrapeGenesisRewardPool.address);\n    const grapeRewardPoolSupply2 = await this.GRAPE.balanceOf(GrapeRewardPool.address);\n    const grapeCirculatingSupply = supply.sub(grapeRewardPoolSupply).sub(grapeRewardPoolSupply2);\n\n    const minusAirdrop = getDisplayBalance(grapeCirculatingSupply, this.GRAPE.decimal, 0);\n\n    const a = await this.getTokenPriceFromPangolin(this.HSHARE);\n\n    return {\n      tokenInFtm: a.toString(),\n      priceInDollars: a,\n      totalSupply: getDisplayBalance(supply, 18, 0),\n      circulatingSupply: minusAirdrop,\n    };\n  }\n\n  async getBTCPriceUSD(): Promise<Number> {\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\n    return Number(priceOfOneBTC);\n  }\n\n  async sendGrape(amount: string | number, recepient: string): Promise<TransactionResponse> {\n    const {Grape} = this.contracts;\n    return await Grape.transfer(recepient, decimalToBalance(amount));\n  }\n\n  async getNodesRewardWalletBalance(): Promise<NodesRewardWalletBalance> {\n    const nodesRewardWallet = '0xa3C4C965BA6aA9382a8Edd965D13CB495F8da6F5';\n    const grapes = await this.GRAPE.balanceOf(nodesRewardWallet);\n    const wines = await this.WINE.balanceOf(nodesRewardWallet);\n    const grapeMimSWs = await this.SW.balanceOf(nodesRewardWallet);\n    return {\n      grapes: Number(grapes) / 1e18,\n      wines: Number(wines) / 1e18,\n      grapeMimSWs: Number(grapeMimSWs) / 1e18,\n    };\n  }\n\n  async getRaffleStat(account: string, raffleAddress: string): Promise<TokenStat> {\n    let total = 0;\n    const {Grape} = this.contracts;\n\n    const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.GRAPE);\n\n    const balOfRaffle = await this.GRAPE.balanceOf(raffleAddress);\n\n    const currentBlockNumber = await this.provider.getBlockNumber();\n\n    const filterTo = Grape.filters.Transfer(account, raffleAddress);\n\n    const startBlock = currentBlockNumber - 100000;\n\n    let allEvents: any = [];\n\n    for (let i = startBlock; i < currentBlockNumber; i += 2000) {\n      const _startBlock = i;\n      const _endBlock = Math.min(currentBlockNumber, i + 1999);\n      const events = await Grape.queryFilter(filterTo, _startBlock, _endBlock);\n      allEvents = [...allEvents, ...events];\n    }\n\n    if (allEvents.length !== 0 && account !== null) {\n      for (let i = 0; i < allEvents.length; i++) {\n        total = total + Number(allEvents[i].args.value);\n      }\n      total = total / 1e18;\n    } else {\n      total = 0;\n    }\n\n    return {\n      tokenInFtm: priceInBTC?.toString(),\n      priceInDollars: total.toString(),\n      totalSupply: getDisplayBalance(balOfRaffle, 18, 0),\n      circulatingSupply: raffleAddress.toString(),\n    };\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('GRAPE') ? this.GRAPE : this.WINE;\n    const isGrape = name.startsWith('GRAPE');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n    const mimAmountBN =\n      lpToken.symbol === 'GRAPE-WINE-LP'\n        ? await this.WINE.balanceOf(lpToken.address)\n        : await this.MIM.balanceOf(lpToken.address);\n\n    const mimAmount = getDisplayBalance(mimAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const mimAmountInOneLP = Number(mimAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isGrape);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      mimAmount: mimAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  async getLPStatBTC(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n\n    const token0 = name.startsWith('GRAPE') ? this.GRAPE : this.WINE;\n    const isGrape = name.startsWith('GRAPE');\n\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const btcAmountBN = await this.MIM.balanceOf(lpToken.address);\n\n    const btcAmount = getDisplayBalance(btcAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const mimAmountInOneLP = Number(btcAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isGrape);\n\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      mimAmount: mimAmountInOneLP.toFixed(5).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n  /**\n   * Use this method to get price for Grape\n   * @returns TokenStat for GBOND\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const {Treasury} = this.contracts;\n    const grapeStat = await this.getGrapeStat();\n    const grapeBal = await Treasury.getReserve();\n\n    const bondGrapeRatioBN = await Treasury.getBondPremiumRate();\n\n    const modifier = bondGrapeRatioBN / 1e18 > 1 ? bondGrapeRatioBN / 1e18 : 1;\n\n    const priceOfBBondInDollars = (Number(grapeStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.GBOND.displayedTotalSupply();\n\n    return {\n      tokenInFtm: priceOfBBondInDollars,\n      priceInDollars: priceOfBBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n      treasuryGrapes: grapeBal,\n    };\n  }\n\n  /**\n   * @returns TokenStat for WINE\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const {WineRewardPool, priceOracle} = this.contracts;\n\n    const supply = await this.WINE.totalSupply();\n\n    const priceInBNB = await this.getTokenPriceFromPancakeswap(this.WINE);\n\n    const grapeRewardPoolSupply = await this.WINE.balanceOf(WineRewardPool.address);\n\n    const tShareCirculatingSupply = supply.sub(grapeRewardPoolSupply);\n\n    const priceOfSharesInDollars = Number(priceInBNB).toFixed(2);\n\n    const winePrice = ((await priceOracle.winePrice()) / 1e18).toString();\n    return {\n      tokenInFtm: winePrice,\n      priceInDollars: winePrice,\n      totalSupply: getDisplayBalance(supply, this.WINE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.WINE.decimal, 0),\n    };\n  }\n\n  async getVintagePrice(): Promise<number> {\n    const {priceOracle} = this.contracts;\n    const vintagePrice = (await priceOracle.vintagePrice()) / 1e18;\n    return vintagePrice;\n  }\n\n  async getSVintagePrice(): Promise<number> {\n    const {priceOracle} = this.contracts;\n    const sVintagePrice = (await priceOracle.sVintagePrice()) / 1e18;\n    return sVintagePrice;\n  }\n\n  async getWalletStats(banks: Bank[]): Promise<WalletStats> {\n    const vineyardBanks = banks.filter(\n      (bank) => !bank.finished && (bank.sectionInUI === 2 || bank.sectionInUI === 6 || bank.sectionInUI === 7),\n    );\n    const nodeBanks = banks.filter((bank) => !bank.finished && bank.sectionInUI === 3);\n\n    let totalInVineyard = 0,\n      totalInNodes = 0,\n      totalInWinery = 0,\n      totalInWinePress = 0,\n      totalInSodaPress = 0,\n      totalInSoleraPress = 0,\n      rewardsInVineyard = 0,\n      rewardsInWinery = 0,\n      rewardsInNodes = 0,\n      rewardsInWinePress = 0,\n      rewardsInSodaPress = 0,\n      rewardsInSoleraPress = 0;\n\n    const winePriceInDollars = Number(await this.getDepositTokenPriceInDollars('WINE', this.WINE));\n    const grapePriceInDollars = Number(await this.getDepositTokenPriceInDollars('GRAPE', this.GRAPE));\n\n    // WinePress\n    const winepressUserInfo = await this.getWinepressData();\n    rewardsInWinePress = winepressUserInfo.totalClaimable * Number(winepressUserInfo.depositTokenPrice);\n    totalInWinePress =\n      winepressUserInfo.totalTracked * Number(winepressUserInfo.depositTokenPrice) + rewardsInWinePress;\n\n    // SodaPress\n    const sodapressUserInfo = await this.getSodapressData();\n    rewardsInSodaPress = sodapressUserInfo.totalClaimable * Number(sodapressUserInfo.depositTokenPrice);\n    totalInSodaPress =\n      sodapressUserInfo.totalTracked * Number(sodapressUserInfo.depositTokenPrice) + rewardsInSodaPress;\n\n    // SoleraPress\n    const solerapressUserInfo = await this.getSolerapressData();\n    rewardsInSoleraPress = solerapressUserInfo.totalClaimable * Number(solerapressUserInfo.depositTokenPrice);\n    totalInSoleraPress =\n      solerapressUserInfo.totalTracked * Number(solerapressUserInfo.depositTokenPrice) + rewardsInSoleraPress;\n\n    // Vineyard\n    for (let i = 0; i < vineyardBanks.length; i++) {\n      const bank = vineyardBanks[i];\n      // bank Value\n      const stakedBalance = await this.stakedBalanceOnBank(bank.contract, bank.poolId, this.myAccount);\n      const stakedInToken = Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal));\n      const stakedTokenPriceInDollars = Number(\n        await this.getDepositTokenPriceInDollars(bank.depositTokenName, bank.depositToken),\n      );\n      totalInVineyard += stakedTokenPriceInDollars * stakedInToken;\n\n      // bank Earnings\n      const bankEarnings = await this.earnedFromBank(bank.contract, bank.earnTokenName, bank.poolId, this.myAccount);\n      const earningInDollars = winePriceInDollars * Number(getDisplayBalance(bankEarnings, bank.depositToken.decimal));\n      rewardsInVineyard += earningInDollars;\n      totalInVineyard += earningInDollars;\n    }\n\n    // Nodes\n    for (let i = 0; i < nodeBanks.length; i++) {\n      const bank = nodeBanks[i];\n      // Node value\n      const nodes = await this.getNodes(bank.contract, this.myAccount);\n      let nodesCount;\n      try {\n        nodesCount = nodes[0];\n      } catch (e) {}\n      if (!nodesCount) {\n        nodesCount = Number(nodes);\n      }\n      const nodePrice = await this.getNodePrice(bank.contract, bank.poolId);\n      const stakedTokenPriceInDollars = Number(\n        await this.getDepositTokenPriceInDollars(bank.depositTokenName, bank.depositToken),\n      );\n      totalInNodes +=\n        Number(nodesCount) *\n        (stakedTokenPriceInDollars * Number(getDisplayBalance(nodePrice, bank.depositToken.decimal)));\n\n      // Node earnings\n      const nodeEarnings = await this.earnedFromBank(bank.contract, bank.earnTokenName, bank.poolId, this.myAccount);\n      const earningInDollars =\n        stakedTokenPriceInDollars * Number(getDisplayBalance(nodeEarnings, bank.depositToken.decimal));\n      rewardsInNodes += earningInDollars;\n      totalInNodes += earningInDollars;\n    }\n\n    // Winery deposit\n    const wineryStakedBalance = await this.getStakedSharesOnBoardroom();\n    const wineryStakedInToken = Number(getDisplayBalance(wineryStakedBalance));\n    // Winery earnings\n    const earnings = await this.getEarningsOnBoardroom();\n    const wineryEarnings = Number(getDisplayBalance(earnings));\n    rewardsInWinery += grapePriceInDollars * wineryEarnings;\n    totalInWinery = winePriceInDollars * wineryStakedInToken + grapePriceInDollars * wineryEarnings;\n\n    return {\n      rewardsInVineyard: rewardsInVineyard,\n      rewardsInWinery: rewardsInWinery,\n      rewardsInNodes: rewardsInNodes,\n      rewardsInSodaPress: rewardsInSodaPress,\n      rewardsInWinePress: rewardsInWinePress,\n      rewardsInSoleraPress: rewardsInSoleraPress,\n      totalInVineyard: totalInVineyard,\n      totalInWinery: totalInWinery,\n      totalInNodes: totalInNodes,\n      totalInWinePress: totalInWinePress,\n      totalInSodaPress: totalInSodaPress,\n      totalInSoleraPress: totalInSoleraPress,\n    };\n  }\n\n  async getBurntGrape(): Promise<Number> {\n    const {furnace} = this.contracts;\n    const burnt = await furnace.grapeBurnt();\n    return Number(burnt);\n  }\n\n  async getBoardroomPrintRate(): Promise<number> {\n    const {Boardroom} = this.contracts;\n    const snapshotIndex = await Boardroom.latestSnapshotIndex();\n    const currentEpoch = await Boardroom.epoch();\n    return (snapshotIndex * 100) / currentEpoch;\n  }\n\n  async getBoardroomLatestSnapshotIndex(): Promise<number> {\n    const {Boardroom} = this.contracts;\n    return await Boardroom.latestSnapshotIndex();\n  }\n\n  async getWalletNodesAndNFTs(): Promise<WalletNodesAndNFTs> {\n    const grapeNodesCount = await this.getNodes('GrapeNodeV2', this.myAccount);\n    const wineNodesCount = await this.getNodes('WineNode', this.myAccount);\n    const grapeMimSWNodesCount = await this.getNodes('LPNode', this.myAccount);\n\n    let walletNodesAndNFTs = {\n      grapes: Number(grapeNodesCount),\n      wines: wineNodesCount[0].toNumber(),\n      grapeMimSWs: grapeMimSWNodesCount[0].toNumber(),\n      goonBags: 0,\n      glasses: 0,\n      decanters: 0,\n      goblets: 0,\n    };\n\n    const walletNFTs = await this.getWalletNFTs();\n    if (walletNFTs.length !== 0) {\n      const data = require('../nfts.json');\n      walletNFTs.forEach((walletNftId) => {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].Id == walletNftId) {\n            if (data[i].Type === 'GoonBag') {\n              walletNodesAndNFTs.goonBags++;\n            } else if (data[i].Type === 'Glass') {\n              walletNodesAndNFTs.glasses++;\n            } else if (data[i].Type === 'Decanter') {\n              walletNodesAndNFTs.decanters++;\n            } else if (data[i].Type === 'Goblet') {\n              walletNodesAndNFTs.goblets++;\n            }\n          }\n        }\n      });\n    }\n    return walletNodesAndNFTs;\n  }\n\n  async getGrapeStatInEstimatedTWAP(): Promise<TokenStat> {\n    const {Oracle, GrapeRewardPool} = this.contracts;\n    let expectedPrice = await Oracle.twap(this.GRAPE.address, ethers.utils.parseEther('1'));\n\n    const supply = await this.GRAPE.totalSupply();\n    const grapeRewardPoolSupply = await this.GRAPE.balanceOf(GrapeRewardPool.address);\n    const grapeCirculatingSupply = supply.sub(grapeRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.GRAPE.decimal, 0),\n      circulatingSupply: getDisplayBalance(grapeCirculatingSupply, this.GRAPE.decimal, 0),\n    };\n  }\n\n  async getGrapeNodeClaimFee(): Promise<Number> {\n    const claimFee = await this.contracts['GrapeNodeV2'].pegFee();\n    return await Number(claimFee);\n  }\n\n  async getVintageStats(): Promise<TokenStat> {\n    const {cellar} = this.contracts;\n    let balance = await this.MIM.balanceOf(this.VINTAGELP.address);\n    let balance2 = await this.VINTAGE.balanceOf(this.VINTAGELP.address);\n    let price = Number(balance) / Number(balance2);\n\n    let vintageBal = await cellar.vintageWineBalance();\n    let svintageBal = await cellar.totalSupply();\n\n    let ratio = Number(vintageBal) / Number(svintageBal);\n\n    let sPrice = price * ratio;\n    return {\n      tokenInFtm: ratio.toFixed(4),\n      priceInDollars: sPrice.toFixed(4),\n      totalSupply: '1',\n      circulatingSupply: '1',\n    };\n  }\n\n  async getGrapePriceInLastTWAP(): Promise<BigNumber> {\n    const {Treasury} = this.contracts;\n    return Treasury.getGrapeUpdatedPrice();\n  }\n\n  // async getGrapePegTWAP(): Promise<any> {\n  //   const { Treasury } = this.contracts;\n  //   const updatedPrice = Treasury.getGrapeUpdatedPrice();\n  //   const updatedPrice2 = updatedPrice * 10000;\n  //   return updatedPrice2;\n  // }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const {Treasury} = this.contracts;\n    // const burnableGrape = (Number(Treasury.getBurnableGrapeLeft()) * 1000).toFixed(2).toString();\n    return Treasury.getBurnableGrapeLeft();\n  }\n\n  async getNodes(contract: string, user: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].getNodes(user);\n  }\n\n  async getMaxPayout(contract: string, user: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].maxPayout(user);\n  }\n\n  async getDailyDrip(contract: string, user: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].getDayDripEstimate(user);\n  }\n\n  async getUserDetails(contract: string, user: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].users(user);\n  }\n\n  async getTotalNodes(contract: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].getTotalNodes();\n  }\n\n  async getGrapeNodes(): Promise<BigNumber[]> {\n    const {GrapeNodeV2} = this.contracts;\n    return await GrapeNodeV2.getTotalNodes();\n  }\n\n  async getWineNodes(): Promise<BigNumber[]> {\n    const {WineNode} = this.contracts;\n    return await WineNode.getTotalNodes();\n  }\n\n  async getGrapeMimSWNodes(): Promise<BigNumber[]> {\n    const {LPNode} = this.contracts;\n    return await LPNode.getTotalNodes();\n  }\n\n  async getWalletNFTs(): Promise<BigNumber[]> {\n    const {TheWineryNFT} = this.nftContracts;\n    return await TheWineryNFT.walletOfOwner(this.myAccount);\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n\n    const poolContract = this.contracts[bank.contract];\n\n    if (bank.sectionInUI === 3) {\n      const [depositTokenPrice, points, totalPoints, tierAmount, poolBalance, totalBalance, dripRate, dailyUserDrip] =\n        bank.contract == 'GrapeNodeV2'\n          ? await Promise.all([\n              this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken),\n              poolContract.tierAllocPoints(),\n              poolContract.totalAllocPoints(),\n              poolContract.tierAmounts(),\n              poolContract.getBalancePool(),\n              depositToken.balanceOf(bank.address),\n              poolContract.dripRate(),\n              poolContract.getDayDripEstimate(this.myAccount),\n            ])\n          : await Promise.all([\n              this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken),\n              poolContract.tierAllocPoints(bank.poolId),\n              poolContract.totalAllocPoints(),\n              poolContract.tierAmounts(bank.poolId),\n              poolContract.getBalancePool(),\n              depositToken.balanceOf(bank.address),\n              poolContract.dripRate(),\n              poolContract.getDayDripEstimate(this.myAccount),\n            ]);\n      const stakeAmount = Number(getDisplayBalance(tierAmount));\n\n      const dailyDrip =\n        totalPoints && +totalPoints > 0\n          ? getDisplayBalance(poolBalance.mul(BigNumber.from(86400)).mul(points).div(totalPoints).div(dripRate))\n          : 0;\n      const dailyDripAPR = (Number(dailyDrip) / stakeAmount) * 100;\n      const yearlyDripAPR = ((Number(dailyDrip) * 365) / stakeAmount) * 100;\n\n      const dailyDripUser = Number(getDisplayBalance(dailyUserDrip));\n      const yearlyDripUser = Number(dailyDripUser) * 365;\n\n      const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(totalBalance, depositToken.decimal));\n\n      return {\n        userDailyBurst: dailyDripUser.toFixed(2).toString(),\n        userYearlyBurst: yearlyDripUser.toFixed(2).toString(),\n        dailyAPR: dailyDripAPR.toFixed(2).toString(),\n        yearlyAPR: yearlyDripAPR.toFixed(2).toString(),\n        TVL: TVL.toFixed(2).toString(),\n      };\n    } else {\n      const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n\n      const stakeInPool = await depositToken.balanceOf(bank.address);\n\n      const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n\n      let stat = bank.earnTokenName === 'GRAPE' ? await this.getGrapeStat() : await this.getShareStat();\n\n      const tokenPerSecond = await this.getTokenPerSecond(\n        bank.earnTokenName,\n        bank.contract,\n        poolContract,\n        bank.depositTokenName,\n      );\n\n      let tokenPerHour = tokenPerSecond.mul(60).mul(60);\n\n      const totalRewardPricePerYear =\n        Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n\n      const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n\n      const totalStakingTokenInPool =\n        Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n\n      const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n\n      const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n      return {\n        dailyAPR: dailyAPR.toFixed(2).toString(),\n        yearlyAPR: yearlyAPR.toFixed(2).toString(),\n        TVL: TVL.toFixed(2).toString(),\n      };\n    }\n  }\n\n  async getPartnerAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n\n    const poolContract = this.contracts[bank.contract];\n\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n\n    let stat = bank.earnTokenName === 'GRAPE' ? await this.getGrapeStat() : await this.getShareStat();\n    let hermes = await this.getHermesStat();\n\n    const tokenPerSecond1 = await poolContract.token1PerSecond();\n    const tokenPerSecond2 = await poolContract.token2PerSecond();\n\n    let tokenPerHour = tokenPerSecond1.mul(60).mul(60);\n    let tokenPerHour2 = tokenPerSecond2.mul(60).mul(60);\n\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour2.mul(24)));\n    const totalRewardPricePerDay2 = Number(hermes.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n\n    const dailyAPR = ((totalRewardPricePerDay + totalRewardPricePerDay2) / totalStakingTokenInPool) * 100;\n\n    const yearlyAPR = dailyAPR * 365;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === 'GRAPE') {\n      if (!contractName.endsWith('1')) {\n        const rewardPerSecond = await poolContract.grapePerSecond();\n\n        if (depositTokenName === 'WAVAX') {\n          return rewardPerSecond.mul(720).div(2400).div(24);\n        } else if (depositTokenName === 'MIM') {\n          return rewardPerSecond.mul(720).div(2400).div(24);\n        }\n        return rewardPerSecond.div(12);\n      }\n\n      if (depositTokenName === 'WAVAX') {\n        const rewardPerSecond = await poolContract.epochGrapePerSecond(0);\n        return rewardPerSecond.div(100).mul(2);\n      } else if (depositTokenName === 'MIM') {\n        const rewardPerSecond = await poolContract.epochGrapePerSecond(0);\n        return rewardPerSecond.div(100).mul(2);\n      }\n\n      const poolStartTime = await poolContract.poolStartTime();\n      await poolContract.epochGrapePerSecond(1);\n\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochGrapePerSecond(1);\n      }\n      return await poolContract.epochGrapePerSecond(0);\n    }\n\n    //update for new tokens\n\n    const rewardPerSecond = await poolContract.winePerSecond();\n\n    if (depositTokenName.startsWith('WINE-MIM')) {\n      return rewardPerSecond.mul(0).div(41000);\n    } else if (depositTokenName.startsWith('GRAPE-WINE')) {\n      return rewardPerSecond.mul(0).div(41000);\n    } else if (depositTokenName === 'GRAPE') {\n      return rewardPerSecond.mul(0).div(41000);\n    } else if (depositTokenName === 'WAMP') {\n      return rewardPerSecond.mul(0).div(41000);\n    } else if (depositTokenName === 'GRAPE-MIM-SW') {\n      return rewardPerSecond.mul(0).div(41000);\n    } else if (depositTokenName === 'WINE-POPS-LP') {\n      return rewardPerSecond.mul(0).div(41000);\n    } else if (depositTokenName === 'sVintage') {\n      return rewardPerSecond.mul(0).div(41000);\n    } else {\n      return rewardPerSecond.mul(0).div(41000);\n    }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n\n    if (tokenName === 'WAVAX') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'GRAPE-MIM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.GRAPE, true);\n      } else if (tokenName === 'sVintage') {\n        let a = await this.getVintageStats();\n        tokenPrice = a.priceInDollars;\n      } else if (tokenName === 'WINE-MIM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.WINE, false);\n      } else if (tokenName === 'GRAPE-WINE-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.WINE, false);\n      } else if (tokenName === 'HSHARE-WINE-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.WINE, false);\n      } else if (tokenName === 'GRAPE-MIM-SW') {\n        tokenPrice = await this.getLPTokenPrice(token, this.GRAPE, true);\n      } else if (tokenName === 'GRAPE-WLRS-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.GRAPE, true);\n      } else if (tokenName === 'WINE-POPS-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.WINE, false);\n      } else if (tokenName === 'MIM') {\n        tokenPrice = '1';\n      } else if (tokenName === 'WAMP') {\n        const {WAMP} = this.contracts;\n        token = this.VOLT;\n        const getWAMP = await WAMP.wAMPToAMP(1000000000000000);\n        tokenPrice = await this.getDaiPrice(token);\n        tokenPrice = ((Number(tokenPrice) / 1000000000) * (Number(getWAMP) / 1000000)).toString();\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * 1).toString();\n      }\n    }\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const {Treasury} = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getExpansionRate(): Promise<Number> {\n    const {Treasury} = this.contracts;\n    return Treasury.maxExpansionTiers(8);\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const {Treasury} = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const {Treasury} = this.contracts;\n    const treasuryGrapePrice = await Treasury.getGrapePrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryGrapePrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string | number): Promise<TransactionResponse> {\n    const {Treasury} = this.contracts;\n    const priceForGrape = await Treasury.getGrapePrice();\n\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForGrape);\n  }\n\n  async getTotalValueLocked(): Promise<Number> {\n    const {priceOracle} = this.contracts;\n    const totalTVL = (await priceOracle.totalTVL()) / 1e18;\n    return totalTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isGrape sanity check for usage of grape token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isGrape: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n\n    const stat = isGrape === true ? await this.getGrapeStat() : await this.getShareStat();\n\n    const priceOfToken = stat.priceInDollars;\n\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n\n      .toString();\n\n    return tokenPrice;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isGrape sanity check for usage of grape token or tShare\n   * @returns price of the LP token\n   */\n  async getApeLPTokenPrice(lpToken: ERC20, token: ERC20, isGrape: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isGrape === true ? await this.getGrapeStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'GRAPE' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'WINE' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'GRAPE-MIM-LP' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'GRAPE-MIM-SW' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'GRAPE-WLRS-LP' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'GRAPE') {\n        return await pool.pendingGRAPE(poolId, account);\n      } else if (earnTokenName === 'WINE') {\n        return await pool.pendingShare(poolId, account);\n      } else if (earnTokenName === 'HSHARE') {\n        return await pool.pendingToken1(poolId, account);\n      } else {\n        return await pool.pendingToken2(poolId, account);\n      }\n    } catch (err) {\n      // @ts-ignore\n      console.error(`Failed to call pendingShare() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n\n      return await userInfo.amount;\n    } catch (err) {\n      // @ts-ignore\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async claimedBalanceNode(poolName: ContractName, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.users(account);\n      return await userInfo.total_claims;\n    } catch (err) {\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async getNodePrice(poolName: ContractName, poolId: Number): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (poolName == 'GrapeNodeV2') {\n        return await pool.tierAmounts();\n      } else {\n        return await pool.tierAmounts(poolId);\n      }\n    } catch (err) {\n      console.error(`Failed to call tierAmounts on contract ${pool.address}: ${err}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(\n    poolName: ContractName,\n    poolId: Number,\n    sectionInUI: Number,\n    amount: BigNumber,\n  ): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n\n    return sectionInUI !== 3 ? await pool.deposit(poolId, amount) : await pool.create(poolId, amount);\n  }\n\n  async setTierValues(poolName: ContractName): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n\n    return await pool.setTierValues([BigNumber.from('1000000000000000000')], [BigNumber.from('5000000000000000000')]);\n  }\n\n  async getTierValues(poolName: ContractName): Promise<void> {\n    const pool = this.contracts[poolName];\n\n    console.log(await pool.tierAmounts(0), await pool.tierAllocPoints(0));\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number, sectionInUI: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    const tx = sectionInUI !== 3 ? await pool.withdraw(poolId, 0) : await pool.claim();\n    return tx;\n  }\n\n  async claimPress(poolName: ContractName): Promise<TransactionResponse> {\n    const press = this.contracts[poolName];\n    return await press.claim();\n  }\n\n  async compoundPress(poolName: ContractName): Promise<TransactionResponse> {\n    const press = this.contracts[poolName];\n    return await press.compound();\n  }\n\n  async stakePress(poolName: ContractName, amount: BigNumber): Promise<TransactionResponse> {\n    const press = this.contracts[poolName];\n    return await press.deposit(this.myAccount, amount);\n  }\n\n  async zapStakePress(poolName: ContractName, token: string, amount: BigNumber): Promise<TransactionResponse> {\n    const press = this.contracts[poolName];\n    return await press.zapAndDeposit(this.myAccount, this.externalTokens[token].address, amount, 0);\n  }\n\n  async compound(poolName: ContractName, poolId: Number, sectionInUI: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return sectionInUI !== 3 ? await pool.withdraw(poolId, 0) : await pool.compound();\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchBoardroomVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentBoardroom(): Contract {\n    if (!this.boardroomVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n\n    return this.contracts.Boardroom;\n  }\n\n  isOldBoardroomMember(): boolean {\n    return this.boardroomVersionOfUser !== 'latest';\n  }\n\n  async getDaiPrice(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const {DAI} = this.config.externalTokens;\n\n    const wmim = new Token(43114, DAI[0], DAI[1], 'DAI');\n\n    const token = new Token(43114, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wmimToToken = await Fetcher.fetchPairData(wmim, token, this.provider);\n\n      const priceInBUSD = new Route([wmimToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(2);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const {MIM} = this.config.externalTokens;\n\n    const wmim = new Token(43114, MIM[0], MIM[1], 'MIM');\n\n    const token = new Token(43114, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wmimToToken = await Fetcher.fetchPairData(wmim, token, this.provider);\n      const priceInBUSD = new Route([wmimToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPangolin(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const {WAVAX} = this.config.externalTokens;\n    const {USDC} = this.config.externalTokens;\n    const wbnb = new TokenPangolin(43114, WAVAX[0], WAVAX[1], 'WAVAX');\n    const usdc = new TokenPangolin(43114, USDC[0], USDC[1], 'USDC');\n    const token = new TokenPangolin(43114, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wftmToToken = await FetcherPangolin.fetchPairData(wbnb, token, this.provider);\n      const priceInBUSD = new PangolinRoute([wftmToToken], token);\n\n      const wavaxtousd = await FetcherPangolin.fetchPairData(wbnb, usdc, this.provider);\n      const priceInBUSD2 = new PangolinRoute([wavaxtousd], wbnb);\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12));\n      const priceForPeg2 = Number(priceInBUSD2.midPrice.toFixed(12));\n\n      const hsharePrice = priceForPeg * priceForPeg2;\n\n      return hsharePrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBTC(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const {MIM} = this.config.externalTokens;\n\n    const wbnb = new Token(43114, MIM[0], MIM[1], 'MIM');\n    const token = new Token(43114, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wmimToToken = await Fetcher.fetchPairData(wbnb, token, this.provider);\n      const priceInBUSD = new Route([wmimToToken], token);\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12));\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapGRAPEUSD(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const {MIM} = this.config.externalTokens;\n\n    const mim = new Token(43114, MIM[0], MIM[1]);\n    const token = new Token(43114, this.GRAPE.address, this.GRAPE.decimal, 'GRAPE');\n    try {\n      const wmimToToken = await Fetcher.fetchPairData(mim, token, this.provider);\n      const priceInBUSD = new Route([wmimToToken], token);\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12));\n\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of GRAPE: ${err}`);\n    }\n  }\n\n  async getWBNBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const {WAVAX, MIM} = this.externalTokens;\n    try {\n      const fusdt_wmim_lp_pair = this.externalTokens['MIM-WAVAX-LP'];\n      let mim_amount_BN = await WAVAX.balanceOf(fusdt_wmim_lp_pair.address);\n      let mim_amount = Number(getFullDisplayBalance(mim_amount_BN, WAVAX.decimal));\n      let fusdt_amount_BN = await MIM.balanceOf(fusdt_wmim_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, MIM.decimal));\n\n      return (fusdt_amount / mim_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of AVAX: ${err}`);\n    }\n  }\n\n  async getBTCBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const {MIM} = this.externalTokens;\n    try {\n      const btcPriceInBNB = await this.getTokenPriceFromPancakeswap(MIM);\n\n      const wbnbPrice = await this.getWBNBPriceFromPancakeswap();\n\n      const btcprice = (Number(btcPriceInBNB) * Number(wbnbPrice)).toFixed(2).toString();\n\n      return btcprice;\n    } catch (err) {\n      console.error(`Failed to fetch token price of BTCB: ${err}`);\n    }\n  }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getBoardroomLastPrint() {\n    const Boardroom = this.currentBoardroom();\n    const {Treasury} = this.contracts;\n    const currentEpoch = await Treasury.epoch();\n    try {\n      const lastHistory = await Boardroom.boardroomHistory(currentEpoch);\n      return lastHistory[1];\n    } catch (e) {\n      console.error(e);\n    }\n    return 0;\n  }\n\n  async getBoardroomAPR() {\n    const Boardroom = this.currentBoardroom();\n\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\n\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n\n    const GRAPEPrice = (await this.getGrapeStat()).priceInDollars;\n\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(GRAPEPrice) * 4;\n\n    const boardroomtShareBalanceOf = await this.WINE.balanceOf(Boardroom.address);\n\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.WINE.decimal)) * Number(BSHAREPrice);\n\n    const realAPR = ((amountOfRewardsPerDay * 100) / boardroomTVL) * 365;\n\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    const canWithdraw = await Boardroom.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.WINE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromBoardroom(): Promise<BigNumber> {\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.totalSupply();\n  }\n\n  async stakeShareToBoardroom(amount: string): Promise<TransactionResponse> {\n    if (this.isOldBoardroomMember()) {\n      throw new Error(\"you're using old boardroom. please withdraw and deposit the GSHARE again.\");\n    }\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getShareOf(this.myAccount);\n    }\n\n    return await Boardroom.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getCashEarningsOf(this.myAccount);\n    }\n\n    return await Boardroom.earned(this.myAccount);\n  }\n\n  async withdrawShareFromBoardroom(amount: string): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.claimDividends();\n    }\n    return await Boardroom.claimReward();\n  }\n\n  async exitFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const {Treasury} = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return {from: prevAllocation, to: nextAllocation};\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const {Boardroom, Treasury} = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Boardroom.rewardLockupEpochs();\n\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return {from: fromDate, to: fromDate};\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return {from: fromDate, to: toDate};\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return {from: fromDate, to: endDate};\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const {Boardroom, Treasury} = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint();\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Boardroom.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return {from: fromDate, to: fromDate};\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return {from: fromDate, to: toDate};\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n\n      return {from: fromDate, to: endDate};\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const {ethereum} = window as any;\n\n    if (ethereum && ethereum.chainId === '0xa86a') {\n      let asset;\n      let assetUrl;\n      if (assetName === 'GRAPE') {\n        asset = this.GRAPE;\n        assetUrl =\n          'https://raw.githubusercontent.com/grapefi/front-end/77fa78f2b05b9fecfc0ebd43aef4560c0c00890b/src/assets/img/grape.png';\n      } else if (assetName === 'WINE') {\n        asset = this.WINE;\n        assetUrl =\n          'https://raw.githubusercontent.com/grapefi/front-end/77fa78f2b05b9fecfc0ebd43aef4560c0c00890b/src/assets/img/gshare.png';\n      } else if (assetName === 'GBOND') {\n        asset = this.GBOND;\n        assetUrl =\n          'https://raw.githubusercontent.com/grapefi/front-end/77fa78f2b05b9fecfc0ebd43aef4560c0c00890b/src/assets/img/gbond.png';\n      } else if (assetName === 'SW') {\n        asset = this.SW;\n        asset.symbol = 'GRAPE-SW-LP';\n        assetUrl = 'https://raw.githubusercontent.com/grapefi/front-end/main/public/grape-mim.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideGrapeFtmLP(mimAmount: string, grapeAmount: BigNumber): Promise<TransactionResponse> {\n    const {TaxOffice} = this.contracts;\n    let overrides = {\n      value: parseUnits(mimAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(\n      grapeAmount,\n      grapeAmount.mul(992).div(1000),\n      parseUnits(mimAmount, 18).mul(992).div(1000),\n      overrides,\n    );\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const {Treasury} = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryBoardroomFundedFilter = Treasury.filters.BoardroomFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let boardroomFundEvents = await Treasury.queryFilter(treasuryBoardroomFundedFilter);\n    var events: any[] = [];\n    boardroomFundEvents.forEach(function callback(value, index) {\n      events.push({epoch: index + 1});\n      events[index].boardroomFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const {Treasury} = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  sqrt(value: BigNumberish) {\n    const ONE = ethers.BigNumber.from(1);\n    const TWO = ethers.BigNumber.from(2);\n    let x = ethers.BigNumber.from(value);\n    let z = x.add(ONE).div(TWO);\n    let y = x;\n    while (z.sub(y).isNegative()) {\n      y = z;\n      z = x.div(z).add(z).div(TWO);\n    }\n    return y;\n  }\n\n  /**\n   * Estimate the amount of tokens on each side of the pair.\n   * @param tokenName The name of the token\n   * @param lpName The name of the pair\n   * @param amount The amount of tokenName to be zapped in\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async estimateZapIn(\n    tokenName: string,\n    lpName: string,\n    amount: string,\n  ): Promise<{amounts: string[]; actions: string[]}> {\n    // YOU SHOULD NOT BE ABLE TO ZAP USING TOKENS OUTSIDE OF THE LP\n\n    // WARNING: SPAGHETTI CODE AHEAD\n\n    const lpToken = this.externalLPs[lpName];\n\n    let token: ERC20;\n\n    switch (tokenName) {\n      case GRAPE_TICKER: {\n        token = this.GRAPE;\n        break;\n      }\n      case WINE_TICKER: {\n        token = this.WINE;\n        break;\n      }\n      case MIM_TICKER: {\n        token = this.MIM;\n        break;\n      }\n    }\n\n    // Check if token is part of the LP\n    if (!lpToken.pairTokenAddresses.includes(token.address.toLowerCase())) {\n      console.log(lpToken.pairTokenAddresses);\n      throw new Error('Estimate Zapin: Input token not present in pair.');\n    }\n\n    console.log([token.address, lpToken.token.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18)]);\n\n    /* Didn't work\n    estimate = await zapper.estimateZapInToken(\n      token.address,\n      lpToken.address,\n      SPOOKY_ROUTER_ADDR,\n      parseUnits(amount, 18),\n    );*/\n\n    // Perform the swap calculation on client-side, using TraderJoe router\n    // getAmountOut()\n\n    // investment = tokenA investment\n    // half = half of tokenA investment\n    // numerator = corresponding number of tokenB (extcall)\n    // denominator = price quote after adding half to reserve of tokenA and removing numerator from reserve of tokenB\n    // swapAmount = investment - sqrt((half * half * numerator / denominator))\n\n    let otherToken = lpToken.pairTokenAddresses[0] == token.address ? lpToken.pairTokens[1] : lpToken.pairTokens[0];\n\n    let investment = ethers.utils.parseEther(amount);\n    let half = investment.div(2);\n\n    // get pair data: tokenA reserve & tokenB reserve\n    let pair = await Fetcher.fetchPairData(\n      new Token(ChainId.AVALANCHE, token.address, 18),\n      new Token(ChainId.AVALANCHE, otherToken.address, 18),\n      this.provider,\n    );\n    let estimateNum = await this.estimateTrade(token, otherToken, half, pair);\n\n    let numerator = ethers.utils.parseEther(await estimateNum.toSignificant(6));\n    let denominator = ethers.utils.parseEther(\n      (\n        await this.estimateTrade(token, otherToken, half, new Pair(pair.reserve0, pair.reserve1, ChainId.AVALANCHE))\n      ).toSignificant(6),\n    );\n    // investment - sqrt(half^2 * num)\n    let swapAmountIn = investment.sub(this.sqrt(half.mul(half).mul(numerator).div(denominator)));\n\n    let swapAmountOut = (await this.estimateTrade(token, otherToken, half, pair)).toSignificant(6);\n\n    return {\n      amounts: [ethers.utils.formatEther(swapAmountIn), swapAmountOut],\n      actions: [`Swap ${ethers.utils.formatEther(half)} for ${estimateNum.toSignificant(6)}`],\n    };\n  }\n\n  async estimateTrade(tokenFrom: ERC20, tokenTo: ERC20, amount: BigNumberish, pair?: Pair): Promise<CurrencyAmount> {\n    const inputToken = new Token(ChainId.AVALANCHE, tokenFrom.address, 18);\n    const outputToken = new Token(ChainId.AVALANCHE, tokenTo.address, 18);\n\n    // note that you may want/need to handle this async code differently,\n    // for example if top-level await is not an option\n    if (!pair) {\n      pair = await Fetcher.fetchPairData(inputToken, outputToken, this.provider);\n    }\n\n    const route = new Route([pair], inputToken, outputToken);\n\n    const trade = new Trade(\n      route,\n      new TokenAmount(inputToken, amount.toString()),\n      TradeType.EXACT_INPUT,\n      ChainId.AVALANCHE,\n    );\n\n    return trade.outputAmount;\n  }\n\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const {zapper} = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n\n    let token: ERC20;\n\n    switch (tokenName) {\n      case GRAPE_TICKER: {\n        token = this.GRAPE;\n        break;\n      }\n      case WINE_TICKER: {\n        token = this.WINE;\n        break;\n      }\n      case MIM_TICKER: {\n        token = this.MIM;\n        break;\n      }\n    }\n\n    return await zapper.zapInToken(\n      token.address,\n      parseUnits(amount, 18),\n      lpToken.address,\n      SPOOKY_ROUTER_ADDR,\n      this.myAccount,\n    );\n  }\n  async zapIn_sw(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const {sw_zapper} = this.contracts;\n\n    let token: ERC20;\n\n    switch (tokenName) {\n      case GRAPE_TICKER: {\n        token = this.GRAPE;\n        break;\n      }\n      case MIM_TICKER: {\n        token = this.MIM;\n        break;\n      }\n    }\n\n    return await sw_zapper.zapInToken(token.address, parseUnits(amount, 18));\n  }\n  async swapBBondToWine(gbondAmount: BigNumber): Promise<TransactionResponse> {\n    const {WineSwapper} = this.contracts;\n    return await WineSwapper.swapBBondToWine(gbondAmount);\n  }\n  async estimateAmountOfWine(gbondAmount: string): Promise<string> {\n    const {WineSwapper} = this.contracts;\n    try {\n      const estimateBN = await WineSwapper.estimateAmountOfWine(parseUnits(gbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate wine amount: ${err}`);\n    }\n  }\n\n  async getWineSwapperStat(address: string): Promise<WineSwapperStat> {\n    const {WineSwapper} = this.contracts;\n    const wineBalanceBN = await WineSwapper.getWineBalance();\n    const gbondBalanceBN = await WineSwapper.getBBondBalance(address);\n    // const grapePriceBN = await WineSwapper.getGrapePrice();\n    // const winePriceBN = await WineSwapper.getWinePrice();\n    const rateWinePerGrapeBN = await WineSwapper.getWineAmountPerGrape();\n    const wineBalance = getDisplayBalance(wineBalanceBN, 18, 5);\n    const gbondBalance = getDisplayBalance(gbondBalanceBN, 18, 5);\n    return {\n      wineBalance: wineBalance.toString(),\n      gbondBalance: gbondBalance.toString(),\n      // grapePrice: grapePriceBN.toString(),\n      // winePrice: winePriceBN.toString(),\n      rateWinePerGrape: rateWinePerGrapeBN.toString(),\n    };\n  }\n\n  async getPegPool(): Promise<PegPool> {\n    const contract = this.contracts.PegPool;\n    const mim = new ERC20('0x130966628846BFd36ff31a822705796e8cb8C18D', this.signer, 'MIM');\n    const [depositsEnabled, totalDepositTokenAmount, userInfo, approval] = await Promise.all([\n      contract.depositsEnabled(),\n      contract.totalDepositTokenAmount(),\n      this.getPegPoolUserInfo(),\n      mim.allowance(this.myAccount, contract.address),\n    ]);\n\n    return {\n      depositsEnabled,\n      totalDesposits: Number(formatEther(totalDepositTokenAmount)).toFixed(2),\n      depositTokenName: 'MIM',\n      depositToken: mim,\n      userInfo,\n      approved: approval.gt(0),\n    };\n  }\n\n  async getPegPoolUserInfo(): Promise<PegPoolUserInfo> {\n    const amount: BigNumber = await this.contracts.PegPool.userInfo(this.myAccount);\n    return {\n      amountDeposited: getDisplayBalance(amount),\n      isDeposited: amount.gt(0),\n      amountDepositedBN: amount,\n    };\n  }\n\n  async getPegPoolPendingRewards(): Promise<PegPoolToken[]> {\n    const tokenMap: {\n      [key: string]: {\n        name: string;\n        pair: string;\n        injection: number;\n      };\n    } = {\n      '0xC55036B5348CfB45a932481744645985010d3A44': {\n        name: 'WINE',\n        pair: '0x00cb5b42684da62909665d8151ff80d1567722c3',\n        injection: 0,\n      },\n      '0x130966628846BFd36ff31a822705796e8cb8C18D': {\n        name: 'MIM',\n        pair: '0x0b212115882252e3640839feacf6cd45a8f419f5',\n        injection: 0,\n      },\n    };\n\n    const [tks, tokens] = await Promise.all([\n      this.contracts.PegPool.getRewardTokens(),\n      this.contracts.PegPool.pendingRewards(this.myAccount),\n    ]);\n    const addresses = tokens[0];\n    const amounts = tokens[1];\n    const rewards: PegPoolToken[] = [];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const info = tokenMap[addresses[i]];\n      console.log(info);\n      rewards.push({\n        token: new ERC20(addresses[i], this.provider.getSigner(), info.name),\n        name: info.name,\n        pairAddress: info.pair,\n        amount: Number(formatEther(amounts[i])).toFixed(8),\n        pendingValueBN: amounts[i],\n        rewardPerBlock: Number(formatEther(tks[i].rewardPerBlock)),\n        canCompound: info.name != 'AALTO',\n      });\n    }\n\n    return rewards;\n  }\n\n  async depositPegPool(amount: BigNumber) {\n    return this.contracts.PegPool.deposit(amount);\n  }\n\n  async compoundRewardsPegPool() {\n    return this.contracts.PegPool.compound();\n  }\n\n  async compoundTokenPegPool() {\n    return this.contracts.PegPool.compound();\n  }\n\n  async withdrawPegPool(amount: BigNumber) {\n    return this.contracts.PegPool.withdraw(amount);\n  }\n\n  async claimPegPool() {\n    return this.contracts.PegPool.claim();\n  }\n}\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/LaunchCountdown/LaunchCountdown.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/Page.tsx",["947","948","949","950","951","952","953","954","955","956"],"import {Container, useMediaQuery, Grid} from '@material-ui/core';\nimport useEagerConnect from '../../hooks/useEagerConnect';\nimport Tooltip from '@mui/material/Tooltip';\nimport {ReactComponent as IconDiscord} from '../../assets/img/discord-plain.svg';\n\nimport {ReactComponent as IconTwitter} from '../../assets/img/twitter.svg';\n\nimport Footer from '../Footer';\n\nimport React from 'react';\nimport {styled, useTheme, Theme, CSSObject} from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport MuiDrawer from '@mui/material/Drawer';\nimport MuiAppBar, {AppBarProps as MuiAppBarProps} from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport List from '@mui/material/List';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Link} from 'react-router-dom';\nimport AccountButton from './AccountButton';\n\nimport soleraIcon from '../../assets/img/solera.png';\nimport grapeLogo from '../../assets/img/logo1.png';\nimport coinsImg from '../../assets/img/casinocoins.png';\nimport fantomHouseImg from '../../assets/img/houseflip.png';\nimport grapeImg from '../../assets/img/grape.png';\nimport xGrapeImg from '../../assets/img/xgrape-small.png';\nimport sodaImg from '../../assets/img/soda.png';\nimport nodesImg from '../../assets/img/gnode.png';\nimport bondImg from '../../assets/img/gbond.png';\nimport wineImg from '../../assets/img/gshare.png';\nimport vintageImg from '../../assets/img/vintage-token.png';\nimport magikImg from '../../assets/img/magik.png';\nimport beefyImg from '../../assets/img/beefy.png';\nimport yieldwolfImg from '../../assets/img/yieldwolf.png';\nimport debankImg from '../../assets/img/debank.png';\nimport rebatesImg from '../../assets/img/rebates.png';\nimport winemaker from '../../assets/img/vintage-token.png';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport vinium from '../../assets/img/vinium.png';\nimport pressimg from '../../assets/img/press.png';\n\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Collapse from '@mui/material/Collapse';\n\nimport MenuIcon from '@mui/icons-material/Menu';\nimport AppsIcon from '@mui/icons-material/Apps';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport FeedIcon from '@mui/icons-material/Feed';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport SavingsIcon from '@mui/icons-material/Savings';\nimport AccountBalanceWalletSharpIcon from '@mui/icons-material/AccountBalanceWalletSharp';\nimport LinkIcon from '@mui/icons-material/Link';\nimport MenuBookIcon from '@mui/icons-material/MenuBook';\nimport MapIcon from '@mui/icons-material/Map';\nimport StorefrontIcon from '@mui/icons-material/Storefront';\nimport YouTubeIcon from '@mui/icons-material/YouTube';\nimport pressIcon from '../../assets/img/barrel.png';\nimport ledgerIcon from '../../assets/img/ledger.png';\nimport ImportContactsIcon from '@mui/icons-material/ImportContacts';\nimport PriceItems from './PriceItems';\nimport TokenSymbol from '../TokenSymbol';\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\nimport ImageSearchIcon from '@mui/icons-material/ImageSearch';\n\nconst drawerWidth = 280;\n\nconst openedMixin = (theme: Theme): CSSObject => ({\n  width: drawerWidth,\n  overflow: 'hidden',\n  overflowY: 'auto',\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen,\n  }),\n});\n\nconst closedMixin = (theme: Theme): CSSObject => ({\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  overflowX: 'hidden',\n  width: 0,\n  [theme.breakpoints.up('sm')]: {\n    width: `calc(${theme.spacing(7)} + 1px)`,\n  },\n});\n\nconst DrawerHeader = styled('div')(({theme}) => ({\n  display: 'flex',\n  marginTop: '25px',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n}));\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({theme, open}) => ({\n  color: '#322f32 !important',\n  background: 'linear-gradient(144deg, rgb(59,17, 59) 10%, rgba(120, 19, 120, 0.9) 50%, rgba(50, 50, 50, 0.8))',\n  boxShadow: '50px 4px 26px -18px rgba(0,0,0,0.99) !important',\n  backdropFilter: 'blur(4px)',\n  borderRadius: '0 !important',\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nconst Drawer = styled(MuiDrawer, {shouldForwardProp: (prop) => prop !== 'open'})(({theme, open}) => ({\n  width: drawerWidth,\n  overflow: 'hidden',\n  height: '100%',\n  flexShrink: 0,\n  whiteSpace: 'nowrap',\n  boxSizing: 'border-box',\n  ...(open && {\n    ...openedMixin(theme),\n    '& .MuiDrawer-paper': openedMixin(theme),\n  }),\n  ...(!open && {\n    ...closedMixin(theme),\n    '& .MuiDrawer-paper': closedMixin(theme),\n  }),\n}));\n\nconst Page: React.FC = ({children}) => {\n  useEagerConnect();\n\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const [appsOpen, setAppsOpen] = React.useState(false);\n  const handleAppsClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setAppsOpen(!appsOpen);\n  };\n\n  const [vaultsOpen, setVaultsOpen] = React.useState(false);\n  const handleVaultsClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setVaultsOpen(!vaultsOpen);\n  };\n\n  const [walletsOpen, setWalletsOpen] = React.useState(false);\n  const handleWalletsClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setWalletsOpen(!walletsOpen);\n  };\n\n  // const [tokensOpen, setTokensOpen] = React.useState(false);\n  // const handleTokensClick = () => {\n  //   if (!open) {\n  //     handleDrawerOpen();\n  //   }\n  //   setTokensOpen(!tokensOpen);\n  // };\n\n  const [usefullLinksOpen, setUsefulllinksOpen] = React.useState(false);\n  const handleUsefullLinksClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setUsefulllinksOpen(!usefullLinksOpen);\n  };\n\n  const [buyOpen, setBuyOpen] = React.useState(false);\n  const handleBuyClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setBuyOpen(!buyOpen);\n  };\n\n  const [buyNFTsOpen, setBuyNFTsOpen] = React.useState(false);\n  const handleBuyNFTsClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setBuyNFTsOpen(!buyNFTsOpen);\n  };\n\n  const screenMD = useMediaQuery('(min-width:1050px)');\n  const screen800 = useMediaQuery('(min-width:800px)');\n\n  return (\n    <div style={{position: 'relative', minHeight: '100vh'}}>\n      <Box sx={{display: 'flex'}}>\n        <CssBaseline />\n        <AppBar position=\"fixed\" open={open}>\n          <Toolbar>\n            {!screen800 && (\n              <IconButton\n                aria-label=\"open drawer\"\n                onClick={handleDrawerOpen}\n                edge=\"start\"\n                sx={{\n                  marginRight: '0 !important',\n                  ...(open && {display: 'none'}),\n                }}\n              >\n                <MenuIcon\n                  sx={{\n                    color: 'white',\n                    fill: 'white',\n                  }}\n                />\n              </IconButton>\n            )}\n            <Link to=\"/\" color=\"inherit\">\n              <img alt=\"Grape Finance\" src={grapeLogo} width={!screen800 ? 150 : 220} style={{paddingTop: '5px'}} />\n            </Link>\n            {screen800 && (\n              <div style={{paddingLeft: '15px'}}>\n                <PriceItems />\n              </div>\n            )}\n            <Box\n              style={{\n                flexGrow: '1',\n                display: 'flex',\n              }}\n            ></Box>\n\n            <Box\n              style={{\n                display: 'flex',\n                gridGap: '20px',\n              }}\n            >\n              {screenMD && (\n                <div>\n                  <div className=\"animated-underline\" style={{height: '40px', lineHeight: '40px'}}>\n                    <a\n                      href=\"https://grape-finance.gitbook.io/grape-finance-docs/\"\n                      target=\"_blank\"\n                      rel=\"noreferrer noopener\"\n                      style={{textDecoration: 'none', color: 'inherit'}}\n                    >\n                      <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                        <Grid item>\n                          <ImportContactsIcon style={{verticalAlign: 'text-bottom'}} />\n                        </Grid>\n                        <Grid item>Docs</Grid>\n                      </Grid>\n                    </a>\n                  </div>\n                </div>\n              )}\n              <AccountButton text=\"Connect\" />\n            </Box>\n          </Toolbar>\n          {!screen800 && (\n            <div style={{paddingLeft: '15px', paddingRight: '15px', paddingBottom: '5px'}}>\n              <PriceItems />\n            </div>\n          )}\n        </AppBar>\n        <Drawer\n          onMouseEnter={handleDrawerOpen}\n          onMouseLeave={handleDrawerClose}\n          variant=\"permanent\"\n          open={open}\n          style={{\n            color: '#322f32 !important',\n            backgroundColor: '#fff !important',\n            boxShadow: 'none !important',\n            borderRadius: '0 !important',\n          }}\n        >\n          <DrawerHeader>\n            <IconButton\n              onClick={handleDrawerClose}\n              sx={{\n                marginTop: '-45px',\n                color: 'white',\n                fill: 'white',\n                ...(!open && {display: 'none'}),\n              }}\n            >\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n            </IconButton>\n          </DrawerHeader>\n          <Grid container direction=\"column\" justifyContent=\"space-between\">\n            <Grid item>\n              <List>\n              <Tooltip arrow followCursor title={open ? '' : 'Dashboard'} placement=\"top-start\">\n                  <ListItem\n                    className=\"menu-item\"\n                    component={Link}\n                    to=\"/dashboard\"\n                    disablePadding\n                    sx={{display: 'block'}}\n                  >\n                    <ListItemButton\n                      sx={{\n                        minHeight: 48,\n                        justifyContent: open ? 'initial' : 'center',\n                      }}\n                    >\n                      <ListItemIcon\n                        sx={{\n                          color: 'white',\n                          minWidth: 0,\n                          mr: open ? 3 : 'auto',\n                          justifyContent: 'center',\n                        }}\n                      >\n                        <AttachMoneyIcon />\n                      </ListItemIcon>\n                      <ListItemText primary=\"Dashboard\" sx={{opacity: open ? 1 : 0}} />\n                    </ListItemButton>\n                  </ListItem>\n                </Tooltip>\n                <Tooltip arrow followCursor title={open ? '' : 'DeFi Products'} placement=\"top-start\">\n                  <ListItemButton onClick={handleAppsClick}>\n                    <ListItemIcon\n                      sx={{\n                        color: 'white',\n                        minWidth: 0,\n                        mr: open ? 3 : 'auto',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <AppsIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"DeFi Products\" sx={{opacity: open ? 1 : 0}} />\n                    {open ? appsOpen ? <ExpandLess /> : <ExpandMore /> : null}\n                  </ListItemButton>\n                </Tooltip>     \n                {open && (\n                  <Collapse in={appsOpen} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://main.vinium.finance/#/markets\"\n                        target=\"_blank\"\n                        rel=\"noreferrer noopener\"\n                        style={{display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={vinium} alt=\"Vinium\" height={23} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"Vinium\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://winemaker.grapefinance.app/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={winemaker} alt=\"winemaker\" height={30} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"Wine Maker\" />\n                        </ListItemButton>\n                      </a>\n            \n                      <ListItem\n                        className=\"menu-item\"\n                        component={Link}\n                        to=\"/dashboard#farms\"\n                        disablePadding\n                        sx={{display: 'block'}}\n                      >\n                        <ListItemButton\n                          sx={{\n                            pl: 4,\n                            minHeight: 48,\n                            justifyContent: open ? 'initial' : 'center',\n                          }}\n                        >\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img alt=\"grape\" height={30} src={grapeImg} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Vineyard\" sx={{opacity: open ? 1 : 0}} />\n                        </ListItemButton>\n                      </ListItem>\n\n                      <ListItem\n                        className=\"menu-item\"\n                        component={Link}\n                        to=\"/dashboard#winery\"\n                        disablePadding\n                        sx={{display: 'block'}}\n                      >\n                        <ListItemButton\n                          sx={{\n                            pl: 4,\n                            minHeight: 48,\n                            justifyContent: open ? 'initial' : 'center',\n                          }}\n                        >\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img alt=\"Wine\" height={30} src={wineImg} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Winery\" sx={{opacity: open ? 1 : 0}} />\n                        </ListItemButton>\n                      </ListItem>\n                      <ListItem\n                        className=\"menu-item\"\n                        component={Link}\n                        to=\"/dashboard#presses\"\n                        disablePadding\n                        sx={{display: 'block'}}\n                      >\n                        <ListItemButton\n                          sx={{\n                            pl: 4,\n                            minHeight: 48,\n                            justifyContent: open ? 'initial' : 'center',\n                          }}\n                        >\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img alt=\"grape\" height={30} src={sodaImg} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Soda Press\" sx={{opacity: open ? 1 : 0}} />\n                        </ListItemButton>\n                      </ListItem>\n                      <ListItem\n                        className=\"menu-item\"\n                        component={Link}\n                        to=\"/dashboard#presses\"\n                        disablePadding\n                        sx={{display: 'block'}}\n                      >\n                        <ListItemButton\n                          sx={{\n                            pl: 4,\n                            minHeight: 48,\n                            justifyContent: open ? 'initial' : 'center',\n                          }}\n                        >\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img alt=\"grape\" height={30} src={soleraIcon} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Solera Press\" sx={{opacity: open ? 1 : 0}} />\n                        </ListItemButton>\n                      </ListItem>\n                      \n                      <ListItem\n                        className=\"menu-item\"\n                        component={Link}\n                        to=\"/dashboard#presses\"\n                        disablePadding\n                        sx={{display: 'block'}}\n                      >\n                        <ListItemButton\n                          sx={{\n                            pl: 4,\n                            minHeight: 48,\n                            justifyContent: open ? 'initial' : 'center',\n                          }}\n                        >\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img alt=\"grape\" height={30} src={pressIcon} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"WinePress\" sx={{opacity: open ? 1 : 0}} />\n                        </ListItemButton>\n                      </ListItem>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://xgrape.grapefinance.app/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={xGrapeImg} alt=\"xGrape\" width={30} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"Mint xGrape\" />\n                        </ListItemButton>\n                      </a>\n\n                      {/*<ListItem\n                        className=\"menu-item\"\n                        component={Link}\n                        to=\"/dashboard#nodes\"\n                        disablePadding\n                        sx={{display: 'block'}}\n                      >\n                        <ListItemButton\n                          sx={{\n                            pl: 4,\n                            minHeight: 48,\n                            justifyContent: open ? 'initial' : 'center',\n                          }}\n                        >\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img alt=\"Nodes\" height={30} src={nodesImg} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Nodes\" sx={{opacity: open ? 1 : 0}} />\n                        </ListItemButton>\n                          </ListItem>\n\n                      <ListItem\n                        className=\"menu-item\"\n                        component={Link}\n                        to=\"/rebates\"\n                        disablePadding\n                        sx={{display: 'block'}}\n                      >\n                        <ListItemButton\n                          sx={{\n                            pl: 4,\n                            minHeight: 48,\n                            justifyContent: open ? 'initial' : 'center',\n                          }}\n                        >\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img alt=\"Rebates\" height={30} src={rebatesImg} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Peg Health Campaign\" sx={{opacity: open ? 1 : 0}} />\n                        </ListItemButton>\n                      </ListItem>*/}\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://casino.grapefinance.app/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={coinsImg} alt=\"Grape Casino\" height={30} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"Grape Casino\" />\n                        </ListItemButton>\n                      </a>\n\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://avax.fantom.house/grapeflip\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={fantomHouseImg} alt=\"Fantom House\" height={30} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"Fantom House\" />\n                        </ListItemButton>\n                      </a>\n                      <ListItem\n                        className=\"menu-item\"\n                        component={Link}\n                        to=\"/bond\"\n                        disablePadding\n                        sx={{display: 'block'}}\n                      >\n                        <ListItemButton\n                          sx={{\n                            pl: 4,\n                            minHeight: 48,\n                            justifyContent: open ? 'initial' : 'center',\n                          }}\n                        >\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img alt=\"bonds\" height={30} src={bondImg} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Bonds\" sx={{opacity: open ? 1 : 0}} />\n                        </ListItemButton>\n                      </ListItem>\n                    </List>\n                  </Collapse>\n                )}\n              </List>\n\n              <Divider color=\"#aaa\" />\n\n              <List>\n                <Tooltip arrow followCursor title={open ? '' : 'Buy Tokens'} placement=\"top-start\">\n                  <ListItemButton onClick={handleBuyClick}>\n                    <ListItemIcon\n                      sx={{\n                        color: 'white',\n                        minWidth: 0,\n                        mr: open ? 3 : 'auto',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <ShoppingCartIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Buy Tokens\" sx={{opacity: open ? 1 : 0}} />\n                    {open ? buyOpen ? <ExpandLess /> : <ExpandMore /> : null}\n                  </ListItemButton>\n                </Tooltip>\n                {open && (\n                  <Collapse in={buyOpen} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://app.bogged.finance/avax/swap?tokenIn=0x130966628846BFd36ff31a822705796e8cb8C18D&tokenOut=0x5541D83EFaD1f281571B343977648B75d95cdAC2\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={grapeImg} alt=\"Grape\" height={22} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"GRAPE\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://app.bogged.finance/avax/swap?tokenIn=0x130966628846BFd36ff31a822705796e8cb8C18D&tokenOut=0xC55036B5348CfB45a932481744645985010d3A44\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={wineImg} alt=\"Wine\" height={22} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"WINE\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://xgrape.grapefinance.app/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={xGrapeImg} alt=\"xGRAPE\" height={22} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"xGRAPE\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://www.swapsicle.io/swap?inputCurrency=0x130966628846bfd36ff31a822705796e8cb8c18d&outputCurrency=0x01Af64EF39AEB5612202AA07B3A3829f20c395fd#/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={vintageImg} alt=\"Vintage\" height={22} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"VINTAGE\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://winemaker.grapefinance.app/app/Cellar\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <img src={soleraIcon} alt=\"sVintage\" height={22} />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary=\"sVINTAGE (in Cellar)\" />\n                        </ListItemButton>\n                      </a>\n                    </List>\n                  </Collapse>\n                )}\n              </List>\n\n              <List>\n                <Tooltip arrow followCursor title={open ? '' : 'Buy NFTs'} placement=\"top-start\">\n                  <ListItemButton onClick={handleBuyNFTsClick}>\n                    <ListItemIcon\n                      sx={{\n                        color: 'white',\n                        minWidth: 0,\n                        mr: open ? 3 : 'auto',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <ImageSearchIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Buy NFTs\" sx={{opacity: open ? 1 : 0}} />\n                    {open ? buyNFTsOpen ? <ExpandLess /> : <ExpandMore /> : null}\n                  </ListItemButton>\n                </Tooltip>\n                {open && (\n                  <Collapse in={buyNFTsOpen} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://hexagon.market/collections/0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df?sort=-highestPrice\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <TokenSymbol symbol=\"GOBLET\" height={25} width={25} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Winery (Grape)\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://hexagon.market/collections/0xe26168f45030e1eb7477fa5f9a4a28d93c0658b4\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <TokenSymbol symbol=\"VINTNERS\" height={25} width={25} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Vintners (Grape)\" />\n                        </ListItemButton>\n                      </a>\n\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://nftrade.com/assets/avalanche/0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <TokenSymbol symbol=\"GOBLET\" height={25} width={25} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Winery (NFTrade)\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://nftrade.com/collection/the-vintners-v1?search=&sort=min_listed_desc&contractAddress=0xe26168f45030e1eb7477fa5f9a4a28d93c0658b4&chainName=\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <TokenSymbol symbol=\"VINTNERS\" height={25} width={25} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Vintners (NFTrade)\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://www.alphashares.io/explore/0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <TokenSymbol symbol=\"GOBLET\" height={25} width={25} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Winery (AlphaShares)\" />\n                        </ListItemButton>\n                      </a>\n                      <a\n                        className=\"menu-item\"\n                        href=\"https://www.alphashares.io/explore/0xe26168f45030e1eb7477fa5f9a4a28d93c0658b4\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{padding: 0, display: 'block'}}\n                      >\n                        <ListItemButton sx={{pl: 4}}>\n                          <ListItemIcon\n                            sx={{\n                              color: 'white',\n                              minWidth: 0,\n                              mr: open ? 3 : 'auto',\n                              justifyContent: 'center',\n                            }}\n                          >\n                            <TokenSymbol symbol=\"VINTNERS\" height={25} width={25} />\n                          </ListItemIcon>\n                          <ListItemText primary=\"Vintners (AlphaShares)\" />\n                        </ListItemButton>\n                      </a>\n                    </List>\n                  </Collapse>\n                )}\n              </List>\n\n              {/*<List>\n                <Tooltip arrow followCursor title={open ? '' : 'AC Vaults'} placement=\"top-start\">\n                  <ListItemButton onClick={handleVaultsClick}>\n                    <ListItemIcon\n                      sx={{\n                        color: 'white',\n                        minWidth: 0,\n                        mr: open ? 3 : 'auto',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <SavingsIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"AC Vaults\" sx={{opacity: open ? 1 : 0}} />\n                    {open ? vaultsOpen ? <ExpandLess /> : <ExpandMore /> : null}\n                  </ListItemButton>\n                </Tooltip>\n                {open && (\n                  <Collapse in={vaultsOpen} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                      <Tooltip arrow followCursor title={open ? '' : 'Magik'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://magik.farm/#/avax\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton sx={{pl: 4}}>\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <img src={magikImg} alt=\"Magik\" height={30} />{' '}\n                            </ListItemIcon>\n                            <ListItemText primary=\"Magik\" />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n\n                      <Tooltip arrow followCursor title={open ? '' : 'Beefy'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://app.beefy.finance/#/\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton sx={{pl: 4}}>\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <img src={beefyImg} alt=\"Beefy\" height={30} />{' '}\n                            </ListItemIcon>\n                            <ListItemText primary=\"Beefy\" />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n                      <Tooltip arrow followCursor title={open ? '' : 'Yield Wolf'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://yieldwolf.finance/avalanche\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton sx={{pl: 4}}>\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <img src={yieldwolfImg} alt=\"YieldWolf\" height={30} />{' '}\n                            </ListItemIcon>\n                            <ListItemText primary=\"Yield Wolf\" />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n                    </List>\n                  </Collapse>\n                )}\n              </List>*/}\n\n              <List>\n                <Tooltip arrow followCursor title={open ? '' : 'Grape Wallets'} placement=\"top-start\">\n                  <ListItemButton onClick={handleWalletsClick}>\n                    <ListItemIcon\n                      sx={{\n                        color: 'white',\n                        minWidth: 0,\n                        mr: open ? 3 : 'auto',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <AccountBalanceWalletSharpIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Grape Wallets\" sx={{opacity: open ? 1 : 0}} />\n                    {open ? walletsOpen ? <ExpandLess /> : <ExpandMore /> : null}\n                  </ListItemButton>\n                </Tooltip>\n                {open && (\n                  <Collapse in={walletsOpen} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                      <Tooltip arrow followCursor title={open ? '' : 'Treasury'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://debank.com/profile/0xEB755b81A786832705a3c0658127216eD36fE898\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton sx={{pl: 4}}>\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <img src={debankImg} alt=\"Debank\" height={22} />{' '}\n                            </ListItemIcon>\n                            <ListItemText primary=\"Treasury\" />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n                      <Tooltip arrow followCursor title={open ? '' : 'DAO'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://debank.com/profile/0xf29fD03Df2Cb7F81d8Ae4d10A76f8b1C898786BD\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton sx={{pl: 4}}>\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <img src={debankImg} alt=\"Debank\" height={22} />{' '}\n                            </ListItemIcon>\n                            <ListItemText primary=\"DAO\" />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n                      {/*<Tooltip arrow followCursor title={open ? '' : 'Node Rewards'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://debank.com/profile/0xa3C4C965BA6aA9382a8Edd965D13CB495F8da6F5\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton sx={{pl: 4}}>\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <img src={debankImg} alt=\"Debank\" height={22} />{' '}\n                            </ListItemIcon>\n                            <ListItemText primary=\"Node Rewards\" />\n                          </ListItemButton>\n                        </a>\n                        </Tooltip>*/}\n                    </List>\n                  </Collapse>\n                )}\n              </List>\n\n              <Divider color=\"#aaa\" />\n\n              <List>\n                <Tooltip arrow followCursor title={open ? '' : 'Other Links'} placement=\"top-start\">\n                  <ListItemButton onClick={handleUsefullLinksClick}>\n                    <ListItemIcon\n                      sx={{\n                        color: 'white',\n                        minWidth: 0,\n                        mr: open ? 3 : 'auto',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <LinkIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Other Links\" sx={{opacity: open ? 1 : 0}} />\n                    {open ? usefullLinksOpen ? <ExpandLess /> : <ExpandMore /> : null}\n                  </ListItemButton>\n                </Tooltip>\n                {open && (\n                  <Collapse in={usefullLinksOpen} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                      <Tooltip arrow followCursor title={open ? '' : 'Docs'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://grapefinance.gitbook.io/grape-finance-docs/\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton\n                            sx={{\n                              minHeight: 48,\n                              justifyContent: open ? 'initial' : 'center',\n                              pl: 4,\n                            }}\n                          >\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <MenuBookIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Docs\" sx={{opacity: open ? 1 : 0}} />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n                      <Tooltip arrow followCursor title={open ? '' : 'Contracts'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://app.gitbook.com/s/NUqRuqfjnQX78cGRsBTc/protocol/contracts\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton\n                            sx={{\n                              minHeight: 48,\n                              justifyContent: open ? 'initial' : 'center',\n                              pl: 4,\n                            }}\n                          >\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <FeedIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Contracts\" sx={{opacity: open ? 1 : 0}} />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n                      <Tooltip arrow followCursor title={open ? '' : 'Education'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://www.youtube.com/channel/UCaArraLhGOOzR1vZKr4y4Tw\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton\n                            sx={{\n                              minHeight: 48,\n                              justifyContent: open ? 'initial' : 'center',\n                              pl: 4,\n                            }}\n                          >\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <YouTubeIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Education\" sx={{opacity: open ? 1 : 0}} />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n                      <Tooltip arrow followCursor title={open ? '' : 'Buy Ledger'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://shop.ledger.com/?r=ba80c2f11e62\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton\n                            sx={{\n                              minHeight: 48,\n                              justifyContent: open ? 'initial' : 'center',\n                              pl: 4,\n                            }}\n                          >\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <img src={ledgerIcon} alt=\"Buy Ledger\" width={24} height={24} />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Buy Ledger\" sx={{opacity: open ? 1 : 0}} />\n                          </ListItemButton>\n                        </a>\n                      </Tooltip>\n\n                      {/*<Tooltip arrow followCursor title={open ? '' : 'Roadmap'} placement=\"top-start\">\n                        <ListItem\n                          className=\"menu-item\"\n                          button\n                          component={Link}\n                          to=\"/roadmap\"\n                          disablePadding\n                          sx={{display: 'block'}}\n                        >\n                          <ListItemButton sx={{pl: 4}}>\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <MapIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Roadmap\" />\n                          </ListItemButton>\n                        </ListItem>\n                      </Tooltip>\n                      <Tooltip arrow followCursor title={open ? '' : 'Merch'} placement=\"top-start\">\n                        <a\n                          className=\"menu-item\"\n                          href=\"https://shop.grapefinance.app/\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{padding: 0, display: 'block'}}\n                        >\n                          <ListItemButton sx={{pl: 4}}>\n                            <ListItemIcon\n                              sx={{\n                                color: 'white',\n                                minWidth: 0,\n                                mr: open ? 3 : 'auto',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <StorefrontIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Merch\" />\n                          </ListItemButton>\n                        </a>\n                            </Tooltip>*/}\n                    </List>\n                  </Collapse>\n                )}\n              </List>\n            </Grid>\n            {open && (\n              <Grid item style={{marginTop: '50px'}}>\n                <Grid container spacing={2} justifyContent={'center'} alignItems=\"center\">\n                  <Grid item>\n                    <a href=\"https://discord.gg/grapefinance\" rel=\"noopener noreferrer\" target=\"_blank\">\n                      <IconDiscord style={{fill: '#fff', width: '50px', transform: 'scale(0.6)'}} />\n                    </a>\n                  </Grid>\n                  <Grid item>\n                    <a\n                      href=\"https://www.youtube.com/channel/UCaArraLhGOOzR1vZKr4y4Tw\"\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\"\n                    >\n                      <YouTubeIcon style={{fill: 'white', width: '50px', transform: 'scale(1.5)'}} />\n                    </a>\n                  </Grid>\n                  <Grid item>\n                    {' '}\n                    <a href=\"https://twitter.com/grape_finance\" rel=\"noopener noreferrer\" target=\"_blank\">\n                      <IconTwitter style={{fill: '#fff', width: '50px', transform: 'scale(1.0)'}} />\n                    </a>\n                  </Grid>\n                </Grid>\n              </Grid>\n            )}\n          </Grid>\n        </Drawer>\n        <Box component=\"main\" sx={{flexGrow: 1}}>\n          <DrawerHeader />\n          <Container maxWidth=\"lg\" style={{paddingBottom: '30px'}}>\n            <div\n              style={{\n                marginTop: screenMD ? '20px' : '40px',\n              }}\n            >\n              {children}\n            </div>\n            <div style={{marginTop: '50px'}}>\n              <Footer />\n            </div>\n          </Container>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default Page;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/UnlockWallet/UnlockWallet.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Label/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/CardContent/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Spacer/Spacer.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useAllowance.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useHandleTransactionReceipt.ts",["957"],"import {useCallback} from 'react';\nimport {JsonRpcProvider, TransactionResponse} from '@ethersproject/providers';\nimport {useTransactionAdder} from '../state/transactions/hooks';\nimport {useAddPopup} from '../state/application/hooks';\nimport {publish} from '../state/txEvent';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => {\n          addTransaction(tx, {summary});\n        })\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            const message = `User Denied`;\n            addPopup({error: {message, stack: err.message || err.stack}});\n            publish('failedTx');\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({error: {message, stack: err.message || err.stack}});\n          publish('failedTx');\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useBurnGrapePress.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useAssassinatePress.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGetPressUsersNearAssassination.ts",["958","959"],"import {useEffect, useState} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport {PressUserInfo} from '../grape-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useGetPressUsersNearAssassination = (press: string) => {\n  const [users, setUsers] = useState<string[]>();\n  const {slowRefresh} = useRefresh();\n  const grapeFinance = useGrapeFinance();\n\n  useEffect(() => {\n    async function fetchUsers() {\n      try {\n        if (grapeFinance.myAccount) {\n          setUsers(await grapeFinance.getAllUsersNearAssassination(press));\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchUsers();\n  }, [setUsers, grapeFinance, slowRefresh, grapeFinance.myAccount]);\n\n  return users;\n};\n\nexport default useGetPressUsersNearAssassination;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStatsForPool.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/grape-finance/ERC20.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/PressClaimModal.jsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Bank/components/ZapModal.tsx",["960","961","962","963","964","965","966","967","968","969","970","971","972","973","974"],"//@ts-nocheck\nimport React, {useState, useMemo} from 'react';\n\nimport {Button, Select, MenuItem, InputLabel, withStyles} from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, {ModalProps} from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport {getDisplayBalance} from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useGrapeFinance from '../../../hooks/useGrapeFinance';\nimport useApproveZapper, {ApprovalState} from '../../../hooks/useApproveZapper';\nimport {GRAPE_TICKER, WINE_TICKER, MIM_TICKER} from '../../../utils/constants';\nimport {Alert} from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  LPtokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({onConfirm, onDismiss, LPtokenName = '', decimals = 18}) => {\n  const grapeFinance = useGrapeFinance();\n  //const {balance} = useWallet();\n\n  const grapeBalance = useTokenBalance(grapeFinance.GRAPE);\n  const wineBalance = useTokenBalance(grapeFinance.WINE);\n  const mimBalance = useTokenBalance(grapeFinance.MIM);\n\n  let [showZapData, setShowZapData] = useState(false);\n  //const avaxDisplayBalance = (Number(balance) / 1e18).toFixed(4).toString();\n\n  const [val, setVal] = useState('');\n  // The token to be swapped from.\n  const [zappingToken, setZappingToken] = useState(MIM_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(getDisplayBalance(mimBalance, decimals));\n  const [estimate, setEstimate] = useState({token0: '0', token1: '0'});\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const grapemimLpStats = useLpStats('GRAPE-MIM-LP');\n  const wineSharemimLpStats = useLpStats('WINE-MIM-LP');\n  const grapeLPStats = useMemo(() => (grapemimLpStats ? grapemimLpStats : null), [grapemimLpStats]);\n  const wineLPStats = useMemo(() => (wineSharemimLpStats ? wineSharemimLpStats : null), [wineSharemimLpStats]);\n  const mimAmountPerLP = LPtokenName.startsWith(GRAPE_TICKER) ? grapeLPStats?.mimAmount : wineLPStats?.mimAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    if (value == 'NONE') {\n      setShowZapData(false);\n    } else {\n      setVal('0');\n      setEstimate({token0: '0', token1: '0'});\n      setZappingToken(value);\n      setZappingTokenBalance(getDisplayBalance(mimBalance, decimals));\n      if (event.target.value === WINE_TICKER) {\n        setZappingTokenBalance(getDisplayBalance(wineBalance, decimals));\n      }\n      if (event.target.value === GRAPE_TICKER) {\n        setZappingTokenBalance(getDisplayBalance(grapeBalance, decimals));\n      }\n      if (event.target.value === MIM_TICKER) {\n        setZappingTokenBalance(getDisplayBalance(mimBalance, decimals));\n      }\n      setShowZapData(true);\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    // the - is to stop negatives\n    if (!isNumeric(e.currentTarget.value) || e.currentTarget.value.includes('-')) return;\n    if (e.currentTarget.value === '' || Number(e.currentTarget.value) == 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({token0: '0', token1: '0'});\n    } else {\n      setVal(e.currentTarget.value);\n      const estimateZap = await grapeFinance.estimateZapIn(\n        zappingToken,\n        LPtokenName,\n        String(e.currentTarget.value).trim(),\n      );\n\n      setEstimate({token0: estimateZap.amounts[0], token1: estimateZap.amounts[1]});\n    }\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await grapeFinance.estimateZapIn(zappingToken, LPtokenName, String(zappingTokenBalance));\n    setEstimate({token0: estimateZap.amounts[0].toString(), token1: estimateZap.amounts[1].toString()});\n  };\n\n  function getOrderLPName(lpName: string): string[] {\n    if (lpName.includes('GRAPE-MIM-LP')) return [GRAPE_TICKER, MIM_TICKER];\n    if (lpName.includes('WINE-MIM-LP')) return [WINE_TICKER, MIM_TICKER];\n    if (lpName.includes('GRAPE-WINE-LP')) return [GRAPE_TICKER, WINE_TICKER];\n    return;\n  }\n\n  function getOrderLPBalanceThing(token0: string, token1: string): string[] {\n    if (token0 == WINE_TICKER) return [token0, token1];\n    if (token0 == GRAPE_TICKER) return [token0, token1];\n    if (token0 == MIM_TICKER) return [token1, token0];\n    return;\n  }\n\n  function normalizeOrder(token0: string, tokenAmount0: string, tokenAmount1: string) {\n    if (token0 == WINE_TICKER) return [tokenAmount0, tokenAmount1];\n    if (token0 == GRAPE_TICKER) return [tokenAmount0, tokenAmount1];\n    if (token0 == MIM_TICKER) return [tokenAmount1, tokenAmount0];\n    return;\n  }\n\n  let [token0Name, token1Name] = getOrderLPName(LPtokenName);\n  let [tokenA, tokenB] = getOrderLPBalanceThing(token0Name, token1Name);\n  return (\n    <Modal>\n      <ModalTitle text={`Zap in ${LPtokenName}`} />\n\n      <StyledActionSpacer />\n      <InputLabel style={{color: '#fff'}} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{color: '#fff'}}\n        labelId=\"label\"\n        id=\"select\"\n        value={showZapData ? zappingToken : 'NONE'}\n      >\n        <StyledMenuItem value=\"NONE\">Choose asset</StyledMenuItem>\n        {LPtokenName.includes(MIM_TICKER) && <StyledMenuItem value={MIM_TICKER}>MIM</StyledMenuItem>}\n        {LPtokenName.includes(WINE_TICKER) && <StyledMenuItem value={WINE_TICKER}>WINE</StyledMenuItem>}\n        {/*LPtokenName.includes(GRAPE_TICKER) && <StyledMenuItem value={GRAPE_TICKER}>GRAPE</StyledMenuItem>*/}\n      </Select>\n      {showZapData && (\n        <>\n          <TokenInput\n            onSelectMax={handleSelectMax}\n            onChange={handleChange}\n            value={val}\n            max={zappingTokenBalance}\n            symbol={zappingToken}\n          />\n          {/*<Label text=\"Zap Estimations\" />\n          <StyledDescriptionText>\n            {' '}\n            {LPtokenName} tokens: {Number(estimate.token0) / Number(mimAmountPerLP)}\n      </StyledDescriptionText>*/}\n          {/*<StyledDescriptionText>\n          (\n            {Number(normalizeOrder(zappingToken, estimate.token0, estimate.token1)[0])} {tokenA} /{' '}\n            {Number(normalizeOrder(zappingToken, estimate.token0, estimate.token1)[1])} {tokenB}){' '}\n          </StyledDescriptionText>*/}\n          <ModalActions>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() =>\n                approveZapperStatus !== ApprovalState.APPROVED\n                  ? approveZapper()\n                  : onConfirm(zappingToken, LPtokenName, val)\n              }\n            >\n              {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : 'Zap'}\n            </Button>\n          </ModalActions>\n        </>\n      )}\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"info\">\n        You need to manually stake the LP tokens after zapping. Maximum slippage is 1%.{' '}\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/PriceItems.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/AccountButton.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/ModalTitle/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/TokenInput/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Button/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/ModalActions/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Label/Label.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Modal/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/CardContent/CardContent.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useApproveZapper.ts",["975"],"import {BigNumber, ethers} from 'ethers';\nimport {useCallback, useMemo} from 'react';\nimport {useHasPendingApproval, useTransactionAdder} from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../grape-finance/ERC20';\nimport {GRAPE_TICKER, WINE_TICKER, MIM_TICKER, ZAPPER_ROUTER_ADDR} from '../utils/constants';\nimport useGrapeFinance from './useGrapeFinance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\n  const grapeFinance = useGrapeFinance();\n  let token: ERC20;\n\n  if (zappingToken === GRAPE_TICKER) token = grapeFinance.GRAPE;\n  else if (zappingToken === WINE_TICKER) token = grapeFinance.WINE;\n  else if (zappingToken === MIM_TICKER) token = grapeFinance.externalTokens[MIM_TICKER];\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, grapeFinance]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: ZAPPER_ROUTER_ADDR,\n      },\n    });\n  }, [approvalState, token, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApproveZapper;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useENS.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Page/AccountModal.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/TokenInput/TokenInput.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Button/Button.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/ModalActions/ModalActions.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/ModalTitle/ModalTitle.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Modal/Modal.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Input/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Container/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Card/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Input/Input.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Card/Card.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Container/Container.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useXGrapePrice.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGetBurntGrape.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useVintagePrice.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useEagerConnect.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWithdraw.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useZap.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStake.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakedBalance.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useHarvest.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useEarnings.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/WalletProviderModal/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useZapStakePress.ts",["976"],"import {useCallback} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport {Bank} from '../grape-finance';\nimport {BigNumber} from 'ethers';\nimport {parseUnits} from 'ethers/lib/utils';\n\nconst useZapStakePress = (bank: Bank) => {\n  const grapeFinance = useGrapeFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleZapStake = useCallback(\n    (amount: string, token: string) => {\n      handleTransactionReceipt(\n        grapeFinance.zapStakePress(bank.contract, token, parseUnits(amount, bank.depositToken.decimal)),\n        `Zap ${token} and Stake in ${bank.contract}`,\n      );\n    },\n    [bank, grapeFinance, handleTransactionReceipt],\n  );\n\n  return {onZapAndStake: handleZapStake};\n};\n\nexport default useZapStakePress;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/usePoolBalance.ts",["977"],"import {useCallback, useEffect, useState} from 'react';\nimport {BigNumber} from 'ethers';\nimport ERC20 from '../grape-finance/ERC20';\nimport useGrapeFinance from './useGrapeFinance';\nimport config from '../config';\n\nconst usePoolBalance = (token: ERC20, poolAddress: string) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const grapeFinance = useGrapeFinance();\n  const isUnlocked = grapeFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    setBalance(await token.balanceOf(poolAddress));\n  }, [token, grapeFinance.myAccount]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(`Failed to fetch token balance: ${err.stack}`));\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [isUnlocked, token, fetchBalance, grapeFinance]);\n\n  return balance;\n};\n\nexport default usePoolBalance;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/usePressLottoInfo.ts",["978"],"import {useEffect, useState} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport {PressLottoInfo} from '../grape-finance/types';\nimport useRefresh from './useRefresh';\n\nconst usePressLottoInfo = (pressName: string) => {\n  const [pressLottoInfo, setPressLottoInfo] = useState<PressLottoInfo>();\n  const {slowRefresh} = useRefresh();\n  const grapeFinance = useGrapeFinance();\n\n  useEffect(() => {\n    async function fetchPressLottoInfo() {\n      try {\n        setPressLottoInfo(await grapeFinance.getPressLottoInfo(pressName));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchPressLottoInfo();\n  }, [setPressLottoInfo, grapeFinance, slowRefresh]);\n\n  return pressLottoInfo;\n};\n\nexport default usePressLottoInfo;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWinepressUserInfo.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Footer/index.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakePress.ts",["979"],"import {useCallback} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport {Bank} from '../grape-finance';\nimport {BigNumber} from 'ethers';\nimport { parseUnits } from 'ethers/lib/utils';\n\nconst useStakePress = (bank: Bank) => {\n  const grapeFinance = useGrapeFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleStake = useCallback(\n    (amount: string) => {\n      handleTransactionReceipt(\n        grapeFinance.stakePress(bank.contract, parseUnits(amount, bank.depositToken.decimal)),\n        `Stake in ${bank.contract}`,\n      );\n    },\n    [bank, grapeFinance, handleTransactionReceipt],\n  );\n\n  return {onStake: handleStake};\n};\n\nexport default useStakePress;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCompoundPress.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useClaimPress.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/ProgressCountdown.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/WalletProviderModal/WalletProviderModal.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Footer/Footer.js",["980","981"],"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Grid, Link, useMediaQuery} from '@material-ui/core';\n\nimport {ReactComponent as IconDiscord} from '../../assets/img/discord-plain.svg';\nimport YouTubeIcon from '@mui/icons-material/YouTube';\nimport {ReactComponent as IconTwitter} from '../../assets/img/twitter.svg';\nimport ImportContactsIcon from '@mui/icons-material/ImportContacts';\nimport MapIcon from '@mui/icons-material/Map';\nimport StorefrontIcon from '@mui/icons-material/Storefront';\nimport FeedIcon from '@mui/icons-material/Feed';\nimport ledgerIcon from '../../assets/img/ledger.png';\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    width: '100%',\n    color: '#fcfcfc',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    backdropFilter: 'blur(4px)',\n    borderRadius: '6px',\n  },\n}));\n\nconst Footer = () => {\n  const screenSM = useMediaQuery('(max-width:600px)');\n\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <Grid container justifyContent=\"space-between\" alignItems=\"center\" style={{padding: '10px 30px'}}>\n        <Grid item xs={12} style={{marginBottom: '20px'}}>\n          <Grid container spacing={3} justifyContent=\"space-between\" style={{padding: '0 10px'}}>\n            <Grid item>\n              <div className=\"animated-underline\" style={{height: '40px', lineHeight: '40px'}}>\n                <a\n                  href=\"https://grape-finance.gitbook.io/grape-finance-docs/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  style={{textDecoration: 'none', color: 'inherit'}}\n                >\n                  <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                    <Grid item>\n                      <ImportContactsIcon style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item>Docs</Grid>\n                  </Grid>\n                </a>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"animated-underline\" style={{height: '40px', lineHeight: '40px'}}>\n                <a\n                  href=\"https://grape-finance.gitbook.io/grape-finance-docs/protocol/contracts\"\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  style={{textDecoration: 'none', color: 'inherit'}}\n                >\n                  <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                    <Grid item>\n                      <FeedIcon style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item>Contracts</Grid>\n                  </Grid>\n                </a>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"animated-underline\" style={{height: '40px', lineHeight: '40px'}}>\n                <a\n                  href=\"https://www.youtube.com/channel/UCaArraLhGOOzR1vZKr4y4Tw\"\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  style={{textDecoration: 'none', color: 'inherit'}}\n                >\n                  <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                    <Grid item>\n                      <YouTubeIcon style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item>Education</Grid>\n                  </Grid>\n                </a>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"animated-underline\" style={{height: '40px', lineHeight: '40px'}}>\n                <a\n                  href=\"https://shop.ledger.com/?r=ba80c2f11e62\"\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  style={{textDecoration: 'none', color: 'inherit'}}\n                >\n                  <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                    <Grid item>\n                      <img\n                        src={ledgerIcon}\n                        style={{verticalAlign: 'text-bottom'}}\n                        alt=\"Buy Ledger\"\n                        width={22}\n                        height={22}\n                      />\n                    </Grid>\n                    <Grid item>Buy Ledger</Grid>\n                  </Grid>\n                </a>\n              </div>\n            </Grid>\n            {/*<Grid item>\n              <div className=\"animated-underline\" style={{height: '40px', lineHeight: '40px'}}>\n                <a href=\"/roadmap\" style={{textDecoration: 'none', color: 'inherit'}}>\n                  <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                    <Grid item>\n                      <MapIcon style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item>Roadmap</Grid>\n                  </Grid>\n                </a>\n              </div>\n            </Grid>\n\n            <Grid item>\n              <div className=\"animated-underline\" style={{height: '40px', lineHeight: '40px'}}>\n                <a\n                  href=\"https://shop.grapefinance.app/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  style={{textDecoration: 'none', color: 'inherit'}}\n                >\n                  <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                    <Grid item>\n                      <StorefrontIcon style={{verticalAlign: 'text-bottom'}} />\n                    </Grid>\n                    <Grid item>Merch</Grid>\n                  </Grid>\n                </a>\n              </div>\n  </Grid>*/}\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sm={6} style={{textAlign: screenSM ? 'center' : 'left'}}>\n          {'Copyright © '}\n          <Link color=\"inherit\" href=\"/\">\n            Grape Finance\n          </Link>{' '}\n          {new Date().getFullYear()}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Grid container spacing={2} justifyContent={screenSM ? 'center' : 'flex-end'} alignItems=\"center\">\n            <Grid item>\n              <a href=\"https://discord.gg/grapefinance\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <IconDiscord style={{fill: '#fff', width: '50px', transform: 'scale(0.6)'}} />\n              </a>\n            </Grid>\n            <Grid item>\n              <a\n                href=\"https://www.youtube.com/channel/UCaArraLhGOOzR1vZKr4y4Tw\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                <YouTubeIcon style={{fill: 'white', width: '50px', transform: 'scale(1.5)'}} />\n              </a>\n            </Grid>\n            <Grid item>\n              {' '}\n              <a href=\"https://twitter.com/grape_finance\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <IconTwitter style={{fill: '#fff', width: '50px', transform: 'scale(1.0)'}} />\n              </a>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </footer>\n  );\n};\n\nexport default Footer;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/WalletProviderModal/WalletCard.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useSodapressUserInfo.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useSolerapressUserInfo.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/boardroom/useWithdrawCheck.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/boardroom/useClaimRewardCheck.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useFetchBoardroomAPR.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCashPriceInEstimatedTWAP.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useTotalStakedOnBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useCurrentEpoch.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useGetBoardroomPrintRate.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useStakedBalanceOnBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useRedeemOnBoardroom.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/TokenSymbol/TokenSymbol.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useNodesRewardBalance.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWalletNodesAndNFTs.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useSVintagePrice.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useWalletStats.ts",["982"],"import {useEffect, useState} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport {Bank, WalletStats} from '../grape-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useWalletStats = (banks: Bank[]) => {\n  const [stat, setStat] = useState<WalletStats>();\n  const {slowRefresh} = useRefresh();\n  const grapeFinance = useGrapeFinance();\n\n  useEffect(() => {\n    async function fetchWalletStats() {\n      try {\n        setStat(await grapeFinance.getWalletStats(banks));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchWalletStats();\n  }, [setStat, grapeFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useWalletStats;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Winery/components/ProgressCountdown.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Dashboard/DashboardTokenBox.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useRebateTreasury.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Rebates/CemeteryCard.js",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Home/HomeCard.js",["983"],"import React from 'react';\nimport cx from 'clsx';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {Stack} from '@mui/material';\nimport {Row, Item} from '@mui-treasury/components/flex';\nimport {Link} from 'react-router-dom';\n\nimport solera from '../../assets/img/solera.png';\nimport xGrape from '../../assets/img/xGrape.png';\nimport vinium from '../../assets/img/vinium.png';\nimport grapeWine from '../../assets/img/grape-wine.png';\nimport gnode from '../../assets/img/gnode.png';\nimport soda from '../../assets/img/soda.png';\nimport barrel from '../../assets/img/barrel.png';\nimport winemaker from '../../assets/img/Winemaker.png';\nimport rebates from '../../assets/img/rebates.png';\nimport casinocoins from '../../assets/img/casinocoins.png';\nimport burninggrape from '../../assets/img/burninggrape.png';\nimport goblet from '../../assets/img/goblet.png';\nimport ribbonImg from '../../assets/img/new-ribbon.png';\nimport AnimatedButton from '../../components/Button/AnimatedButton';\n\nconst nameToImage = {\n  solera: solera,\n  xGrape: xGrape,\n  grapeWine: grapeWine,\n  gnode: gnode,\n  soda: soda,\n  barrel: barrel,\n  winemaker: winemaker,\n  rebates: rebates,\n  casinocoins: casinocoins,\n  burninggrape: burninggrape,\n  goblet: goblet,\n  vinium: vinium,\n};\n\nconst useStyles = makeStyles(({palette}) => ({\n  root: ({color}) => ({\n    borderRadius: '5px !important',\n    border: '1px solid rgba(230, 230, 230, 0.1)',\n    background: `rgba(0, 0, 0, 0.3)`,\n    backdropFilter: 'blur(6px)',\n  }),\n\n  content: ({color}) => ({\n    zIndex: 1,\n    bottom: 0,\n  }),\n  title: {\n    transition: '0.3s',\n    fontSize: '1.6rem !important',\n    margin: 0,\n    color: '#e647e6',\n  },\n\n  subtitle: {\n    fontSize: '1.1rem !important',\n    margin: 0,\n    padding: 0,\n    color: '#fff',\n  },\n  description: {\n    fontSize: '1rem !important',\n    color: '#e3e3e3 !important',\n    margin: 0,\n  },\n  logo: {\n    marginTop: '20px',\n    transition: '0.3s',\n    height: 110,\n    objectFit: 'contain !important',\n  },\n  contentText: {\n    fontSize: '0.8rem !important',\n    color: '#fff',\n  },\n}));\n\nconst CustomCard = ({item, styles, title, subTitle, subItems}) => {\n  return (\n    <Stack direction=\"column\" className={cx(styles.root, styles.color)} justifyContent=\"space-between\" spacing={0}>\n      {item.isNew && <img alt=\"New\" className=\"new-ribbon\" src={ribbonImg}></img>}\n\n      <Row p={2} style={{marginTop: item.isNew ? '-55px' : null}}>\n        <Grid container justifyContent=\"space-between\" style={{textAlign: 'center'}}>\n          <Grid item xs={12}>\n            <h1 className={styles.title} style={{color: item.color}}>\n              {title}\n            </h1>\n            <h3 className={styles.subtitle}>{subTitle}</h3>\n          </Grid>\n          <Grid item xs={12}>\n            <img alt={item.image} className={styles.logo} src={nameToImage[item.image]} />\n          </Grid>\n        </Grid>\n      </Row>\n\n      <div\n        style={{\n          borderBottomLeftRadius: '5px',\n          borderBottomRightRadius: '5px',\n          backgroundColor: 'rgba(230, 230, 230, 0.1)',\n        }}\n      >\n        <Row px={2} pt={2}>\n          <Item>\n            <div className={styles.contentText}>{item.description}</div>\n          </Item>\n        </Row>\n\n        <Grid container style={{padding: '15px'}} justifyContent=\"space-evenly\" spacing={2}>\n          {subItems == null && (\n            <Grid item style={{width: '100%'}}>\n              {item.isInternalLink === true ? (\n                <Link to={item.linkTo} style={{textDecoration: 'none'}}>\n                  <AnimatedButton backgroundColor=\"#9309937c\" icon={null} title={`Go to ${item.label}`} fullWidth />\n                </Link>\n              ) : (\n                <a\n                  rel=\"noreferrer\"\n                  style={{textDecoration: 'none'}}\n                  target={item.isInternalLink === false ? '_blank' : ''}\n                  href={item.linkTo}\n                >\n                  <AnimatedButton backgroundColor=\"#9309937c\" icon={null} title={`Go to ${item.label}`} fullWidth />\n                </a>\n              )}\n            </Grid>\n          )}\n\n          {subItems != null && subItems.length > 0\n            ? subItems.map((subItem) => (\n                <Grid item xs={subItems.length === 1 ? 12 : subItems.length % 2 ? 4 : 6}>\n                  {subItem.isInternalLink === true ? (\n                    <Link to={subItem.linkTo} style={{textDecoration: 'none'}}>\n                      <AnimatedButton backgroundColor=\"#9309937c\" icon={null} title={subItem.label} fullWidth />\n                    </Link>\n                  ) : (\n                    <a\n                      style={{textDecoration: 'none'}}\n                      target={subItem.isInternalLink === false ? '_blank' : ''}\n                      href={subItem.linkTo}\n                    >\n                      <AnimatedButton backgroundColor=\"#9309937c\" icon={null} title={subItem.label} fullWidth />\n                    </a>\n                  )}\n                </Grid>\n              ))\n            : null}\n        </Grid>\n      </div>\n    </Stack>\n  );\n};\n\nexport const HomeCard = ({item}) => {\n  const styles1 = useStyles({color: item.color});\n  return (\n    <Grid key={item.label} item xs={12} sm={12} md={6} lg={4}>\n      <CustomCard\n        key={item.label}\n        item={item}\n        styles={styles1}\n        subItems={item.items}\n        title={item.label}\n        subTitle={item.subLabel}\n      />\n    </Grid>\n  );\n};\n\nexport default HomeCard;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useLpStatsBTC.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useTotalValueLocked.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useIsWindowVisible.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useDebounce.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/views/Rebates/components/DepositModal.tsx",["984"],"import React, {useCallback, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {Button} from '@material-ui/core';\nimport Modal, {ModalProps} from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport useRebateTreasury from '../../../hooks/useRebateTreasury';\nimport useTombFinance from '../../../hooks/useGrapeFinance';\nimport useFantomPrice from '../../../hooks/useFantomPrice';\nimport useTombStats from '../../../hooks/useWineStats';\n\nimport {getFullDisplayBalance} from '../../../utils/formatBalance';\nimport {BigNumber} from 'ethers';\n\ninterface DepositModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: Number) => void;\n  tokenName?: string;\n  token?: any;\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({max, onConfirm, onDismiss, tokenName = '', token}) => {\n  const tombStats = useTombStats();\n  const [val, setVal] = useState('');\n\n  const tombFinance = useTombFinance();\n  const rebateStats = useRebateTreasury();\n  const {price: ftmPrice} = useFantomPrice();\n\n  const tombPriceInDollars = useMemo(\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\n    [tombStats],\n  );\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, 18);\n  }, [max, tokenName]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(rebateStats.tombAvailable > +fullBalance ? fullBalance : fullBalance);\n  }, [fullBalance, setVal, rebateStats]);\n\n  function getAssetPrice(token: String) {\n    const address = tombFinance.externalTokens[tokenName].address;\n    const assetPrice = rebateStats.assets.find((a: any) => a.token === address).price;\n    return assetPrice;\n  }\n\n  function getOutAmount() {\n    const toBondPrice = getAssetPrice(tokenName);\n    const outAmount =\n      +val *\n      ((toBondPrice / rebateStats.tombPrice) *\n        (1 + rebateStats.bondPremium / 100) *\n        (token.params.multiplier / 1000000));\n    return outAmount;\n  }\n\n  function formatOutAmount() {\n    const outAmount = getOutAmount();\n    return `Receiving: ${outAmount.toFixed(4)} WINE ($${(outAmount * Number(tombPriceInDollars)).toFixed(2)})`;\n  }\n\n  function formatInAmount() {\n    return `Input: ${(+val).toFixed(4)} ${tokenName} ($${(+val * getAssetPrice(tokenName) * ftmPrice).toFixed(2)})`;\n  }\n\n  return (\n    <Modal>\n      <ModalTitle text={`Bond ${tokenName}`} />\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <StyledMaxText style={{marginTop: '14px'}}>{formatInAmount()}</StyledMaxText>\n      <StyledMaxText>{formatOutAmount()}</StyledMaxText>\n      <StyledMaxText>\n        Estimated Return:{' '}\n        {(\n          ((getOutAmount() * Number(tombPriceInDollars) - +val * getAssetPrice(tokenName) * ftmPrice) /\n            (+val * getAssetPrice(tokenName) * ftmPrice)) *\n          100\n        ).toFixed(2)}\n        %\n      </StyledMaxText>\n      <StyledMaxText style={{color: getOutAmount() < rebateStats.tombAvailable ? 'white' : 'var(--accent)'}}>\n        {rebateStats.tombAvailable > 0 ? `${rebateStats.tombAvailable.toFixed(4)} Wine Available` : 'Wine Sold Out'}\n      </StyledMaxText>\n      <ModalActions>\n        <Button\n          color={getOutAmount() < rebateStats.tombAvailable ? 'primary' : 'secondary'}\n          variant=\"contained\"\n          disabled={getOutAmount() >= rebateStats.tombAvailable}\n          onClick={() => onConfirm(+val)}\n        >\n          Confirm\n        </Button>\n      </ModalActions>\n    </Modal>\n  );\n};\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[600]};\n  display: flex;\n  font-size: 18px;\n  margin-top: 2px;\n  font-weight: 700;\n  justify-content: flex-start;\n`;\n\nexport default DepositModal;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Popups/PopupItem.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/InfoCard/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/LPInfoCard/index.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/hooks/useFantomPrice.ts",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Popups/ErrorPopup.tsx",["985","986"],"import React, {useCallback} from 'react';\nimport {AlertCircle} from 'react-feather';\nimport styled from 'styled-components';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function ErrorPopup({message, stack}: {message: string; stack: string}) {\n  const copyErrorDetails = useCallback(async () => {\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\n  }, [message, stack]);\n\n  return (\n    <RowNoFlex>\n      <div>\n        <AlertCircle color=\"#FF6871\" size={24} /> <StyledPopupDesc>{message}</StyledPopupDesc>\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/Popups/TransactionPopup.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/LPInfoCard/LPInfoCard.tsx",[],"/Users/coredev0927/WorkSpace/Upwork/tombfinance/front-end/src/components/InfoCard/InfoCard.tsx",[],{"ruleId":"987","severity":1,"message":"988","line":6,"column":8,"nodeType":"989","messageId":"990","endLine":6,"endColumn":17},{"ruleId":"987","severity":1,"message":"991","line":20,"column":8,"nodeType":"989","messageId":"990","endLine":20,"endColumn":28},{"ruleId":"992","severity":1,"message":"993","line":1,"column":16,"nodeType":"989","messageId":"990","endLine":1,"endColumn":25},{"ruleId":"992","severity":1,"message":"994","line":1,"column":27,"nodeType":"989","messageId":"990","endLine":1,"endColumn":38},{"ruleId":"992","severity":1,"message":"995","line":1,"column":40,"nodeType":"989","messageId":"990","endLine":1,"endColumn":48},{"ruleId":"992","severity":1,"message":"996","line":1,"column":50,"nodeType":"989","messageId":"990","endLine":1,"endColumn":56},{"ruleId":"987","severity":1,"message":"997","line":2,"column":9,"nodeType":"989","messageId":"990","endLine":2,"endColumn":13},{"ruleId":"987","severity":1,"message":"998","line":2,"column":15,"nodeType":"989","messageId":"990","endLine":2,"endColumn":19},{"ruleId":"987","severity":1,"message":"999","line":7,"column":7,"nodeType":"989","messageId":"990","endLine":7,"endColumn":31},{"ruleId":"987","severity":1,"message":"1000","line":14,"column":9,"nodeType":"989","messageId":"990","endLine":14,"endColumn":26},{"ruleId":"1001","severity":1,"message":"1002","line":39,"column":9,"nodeType":"1003","endLine":39,"endColumn":59},{"ruleId":"992","severity":1,"message":"1004","line":36,"column":9,"nodeType":"989","messageId":"990","endLine":36,"endColumn":23},{"ruleId":"1001","severity":1,"message":"1005","line":47,"column":6,"nodeType":"1006","endLine":47,"endColumn":8,"suggestions":"1007"},{"ruleId":"992","severity":1,"message":"1008","line":4,"column":8,"nodeType":"989","messageId":"990","endLine":4,"endColumn":15},{"ruleId":"987","severity":1,"message":"1009","line":8,"column":8,"nodeType":"989","messageId":"990","endLine":8,"endColumn":15},{"ruleId":"987","severity":1,"message":"1000","line":4,"column":9,"nodeType":"989","messageId":"990","endLine":4,"endColumn":26},{"ruleId":"987","severity":1,"message":"1010","line":5,"column":9,"nodeType":"989","messageId":"990","endLine":5,"endColumn":14},{"ruleId":"987","severity":1,"message":"1011","line":5,"column":24,"nodeType":"989","messageId":"990","endLine":5,"endColumn":37},{"ruleId":"987","severity":1,"message":"1012","line":25,"column":8,"nodeType":"989","messageId":"990","endLine":25,"endColumn":17},{"ruleId":"987","severity":1,"message":"1000","line":3,"column":9,"nodeType":"989","messageId":"990","endLine":3,"endColumn":26},{"ruleId":"987","severity":1,"message":"1012","line":6,"column":8,"nodeType":"989","messageId":"990","endLine":6,"endColumn":17},{"ruleId":"987","severity":1,"message":"1000","line":3,"column":9,"nodeType":"989","messageId":"990","endLine":3,"endColumn":26},{"ruleId":"987","severity":1,"message":"1012","line":12,"column":8,"nodeType":"989","messageId":"990","endLine":12,"endColumn":17},{"ruleId":"1001","severity":1,"message":"1013","line":21,"column":6,"nodeType":"1006","endLine":21,"endColumn":42,"suggestions":"1014"},{"ruleId":"992","severity":1,"message":"1015","line":1,"column":22,"nodeType":"989","messageId":"990","endLine":1,"endColumn":30},{"ruleId":"987","severity":1,"message":"1016","line":4,"column":15,"nodeType":"989","messageId":"990","endLine":4,"endColumn":25},{"ruleId":"987","severity":1,"message":"1017","line":5,"column":8,"nodeType":"989","messageId":"990","endLine":5,"endColumn":19},{"ruleId":"987","severity":1,"message":"1018","line":14,"column":8,"nodeType":"989","messageId":"990","endLine":14,"endColumn":16},{"ruleId":"987","severity":1,"message":"1019","line":15,"column":8,"nodeType":"989","messageId":"990","endLine":15,"endColumn":16},{"ruleId":"987","severity":1,"message":"1008","line":16,"column":8,"nodeType":"989","messageId":"990","endLine":16,"endColumn":15},{"ruleId":"987","severity":1,"message":"1020","line":17,"column":8,"nodeType":"989","messageId":"990","endLine":17,"endColumn":12},{"ruleId":"987","severity":1,"message":"1021","line":130,"column":9,"nodeType":"989","messageId":"990","endLine":130,"endColumn":26},{"ruleId":"1001","severity":1,"message":"1022","line":146,"column":6,"nodeType":"1006","endLine":155,"endColumn":4,"suggestions":"1023"},{"ruleId":"1001","severity":1,"message":"1024","line":173,"column":6,"nodeType":"1006","endLine":173,"endColumn":28,"suggestions":"1025"},{"ruleId":"987","severity":1,"message":"1026","line":19,"column":8,"nodeType":"989","messageId":"990","endLine":19,"endColumn":20},{"ruleId":"987","severity":1,"message":"1027","line":2,"column":9,"nodeType":"989","messageId":"990","endLine":2,"endColumn":16},{"ruleId":"987","severity":1,"message":"1028","line":29,"column":8,"nodeType":"989","messageId":"990","endLine":29,"endColumn":28},{"ruleId":"1029","severity":1,"message":"1030","line":692,"column":76,"nodeType":"1031","messageId":"1032","endLine":692,"endColumn":78},{"ruleId":"1029","severity":1,"message":"1033","line":696,"column":92,"nodeType":"1031","messageId":"1032","endLine":696,"endColumn":94},{"ruleId":"1029","severity":1,"message":"1033","line":737,"column":95,"nodeType":"1031","messageId":"1032","endLine":737,"endColumn":97},{"ruleId":"1029","severity":1,"message":"1030","line":705,"column":76,"nodeType":"1031","messageId":"1032","endLine":705,"endColumn":78},{"ruleId":"1029","severity":1,"message":"1033","line":709,"column":92,"nodeType":"1031","messageId":"1032","endLine":709,"endColumn":94},{"ruleId":"1029","severity":1,"message":"1033","line":750,"column":95,"nodeType":"1031","messageId":"1032","endLine":750,"endColumn":97},{"ruleId":"987","severity":1,"message":"1034","line":33,"column":9,"nodeType":"989","messageId":"990","endLine":33,"endColumn":14},{"ruleId":"987","severity":1,"message":"1035","line":108,"column":10,"nodeType":"989","messageId":"990","endLine":108,"endColumn":27},{"ruleId":"987","severity":1,"message":"1036","line":108,"column":29,"nodeType":"989","messageId":"990","endLine":108,"endColumn":49},{"ruleId":"1029","severity":1,"message":"1030","line":695,"column":76,"nodeType":"1031","messageId":"1032","endLine":695,"endColumn":78},{"ruleId":"1029","severity":1,"message":"1033","line":699,"column":92,"nodeType":"1031","messageId":"1032","endLine":699,"endColumn":94},{"ruleId":"1029","severity":1,"message":"1033","line":740,"column":95,"nodeType":"1031","messageId":"1032","endLine":740,"endColumn":97},{"ruleId":"1029","severity":1,"message":"1033","line":318,"column":114,"nodeType":"1031","messageId":"1032","endLine":318,"endColumn":116},{"ruleId":"1029","severity":1,"message":"1033","line":375,"column":116,"nodeType":"1031","messageId":"1032","endLine":375,"endColumn":118},{"ruleId":"987","severity":1,"message":"1037","line":17,"column":3,"nodeType":"989","messageId":"990","endLine":17,"endColumn":21},{"ruleId":"987","severity":1,"message":"1038","line":18,"column":3,"nodeType":"989","messageId":"990","endLine":18,"endColumn":24},{"ruleId":"987","severity":1,"message":"1039","line":24,"column":3,"nodeType":"989","messageId":"990","endLine":24,"endColumn":17},{"ruleId":"987","severity":1,"message":"1040","line":33,"column":9,"nodeType":"989","messageId":"990","endLine":33,"endColumn":24},{"ruleId":"987","severity":1,"message":"1041","line":37,"column":9,"nodeType":"989","messageId":"990","endLine":37,"endColumn":16},{"ruleId":"987","severity":1,"message":"1042","line":529,"column":11,"nodeType":"989","messageId":"990","endLine":529,"endColumn":33},{"ruleId":"1029","severity":1,"message":"1033","line":701,"column":26,"nodeType":"1031","messageId":"1032","endLine":701,"endColumn":28},{"ruleId":"1029","severity":1,"message":"1033","line":829,"column":23,"nodeType":"1031","messageId":"1032","endLine":829,"endColumn":25},{"ruleId":"1029","severity":1,"message":"1033","line":1221,"column":20,"nodeType":"1031","messageId":"1032","endLine":1221,"endColumn":22},{"ruleId":"1029","severity":1,"message":"1033","line":1871,"column":52,"nodeType":"1031","messageId":"1032","endLine":1871,"endColumn":54},{"ruleId":"1029","severity":1,"message":"1030","line":2069,"column":32,"nodeType":"1031","messageId":"1032","endLine":2069,"endColumn":34},{"ruleId":"987","severity":1,"message":"1019","line":28,"column":8,"nodeType":"989","messageId":"990","endLine":28,"endColumn":16},{"ruleId":"987","severity":1,"message":"1043","line":32,"column":8,"nodeType":"989","messageId":"990","endLine":32,"endColumn":16},{"ruleId":"987","severity":1,"message":"1044","line":33,"column":8,"nodeType":"989","messageId":"990","endLine":33,"endColumn":16},{"ruleId":"987","severity":1,"message":"1045","line":34,"column":8,"nodeType":"989","messageId":"990","endLine":34,"endColumn":20},{"ruleId":"987","severity":1,"message":"1046","line":36,"column":8,"nodeType":"989","messageId":"990","endLine":36,"endColumn":18},{"ruleId":"987","severity":1,"message":"1047","line":41,"column":8,"nodeType":"989","messageId":"990","endLine":41,"endColumn":16},{"ruleId":"987","severity":1,"message":"1048","line":58,"column":8,"nodeType":"989","messageId":"990","endLine":58,"endColumn":19},{"ruleId":"987","severity":1,"message":"1049","line":62,"column":8,"nodeType":"989","messageId":"990","endLine":62,"endColumn":15},{"ruleId":"987","severity":1,"message":"1050","line":63,"column":8,"nodeType":"989","messageId":"990","endLine":63,"endColumn":22},{"ruleId":"987","severity":1,"message":"1051","line":174,"column":9,"nodeType":"989","messageId":"990","endLine":174,"endColumn":26},{"ruleId":"987","severity":1,"message":"1052","line":2,"column":9,"nodeType":"989","messageId":"990","endLine":2,"endColumn":24},{"ruleId":"987","severity":1,"message":"1053","line":3,"column":9,"nodeType":"989","messageId":"990","endLine":3,"endColumn":22},{"ruleId":"1001","severity":1,"message":"1054","line":22,"column":6,"nodeType":"1006","endLine":22,"endColumn":67,"suggestions":"1055"},{"ruleId":"987","severity":1,"message":"1056","line":13,"column":8,"nodeType":"989","messageId":"990","endLine":13,"endColumn":13},{"ruleId":"987","severity":1,"message":"1057","line":42,"column":10,"nodeType":"989","messageId":"990","endLine":42,"endColumn":18},{"ruleId":"987","severity":1,"message":"1058","line":48,"column":9,"nodeType":"989","messageId":"990","endLine":48,"endColumn":23},{"ruleId":"1029","severity":1,"message":"1033","line":59,"column":15,"nodeType":"1031","messageId":"1032","endLine":59,"endColumn":17},{"ruleId":"1029","severity":1,"message":"1033","line":82,"column":71,"nodeType":"1031","messageId":"1032","endLine":82,"endColumn":73},{"ruleId":"1029","severity":1,"message":"1033","line":111,"column":16,"nodeType":"1031","messageId":"1032","endLine":111,"endColumn":18},{"ruleId":"1029","severity":1,"message":"1033","line":112,"column":16,"nodeType":"1031","messageId":"1032","endLine":112,"endColumn":18},{"ruleId":"1029","severity":1,"message":"1033","line":113,"column":16,"nodeType":"1031","messageId":"1032","endLine":113,"endColumn":18},{"ruleId":"987","severity":1,"message":"1059","line":117,"column":12,"nodeType":"989","messageId":"990","endLine":117,"endColumn":26},{"ruleId":"1029","severity":1,"message":"1033","line":118,"column":16,"nodeType":"1031","messageId":"1032","endLine":118,"endColumn":18},{"ruleId":"1029","severity":1,"message":"1033","line":119,"column":16,"nodeType":"1031","messageId":"1032","endLine":119,"endColumn":18},{"ruleId":"1029","severity":1,"message":"1033","line":120,"column":16,"nodeType":"1031","messageId":"1032","endLine":120,"endColumn":18},{"ruleId":"987","severity":1,"message":"1060","line":125,"column":8,"nodeType":"989","messageId":"990","endLine":125,"endColumn":14},{"ruleId":"987","severity":1,"message":"1061","line":125,"column":16,"nodeType":"989","messageId":"990","endLine":125,"endColumn":22},{"ruleId":"987","severity":1,"message":"1062","line":194,"column":7,"nodeType":"989","messageId":"990","endLine":194,"endColumn":28},{"ruleId":"1001","severity":1,"message":"1063","line":41,"column":6,"nodeType":"1006","endLine":41,"endColumn":62,"suggestions":"1064"},{"ruleId":"987","severity":1,"message":"1065","line":5,"column":9,"nodeType":"989","messageId":"990","endLine":5,"endColumn":18},{"ruleId":"1001","severity":1,"message":"1066","line":14,"column":6,"nodeType":"1006","endLine":14,"endColumn":37,"suggestions":"1067"},{"ruleId":"1001","severity":1,"message":"1068","line":20,"column":6,"nodeType":"1006","endLine":20,"endColumn":52,"suggestions":"1069"},{"ruleId":"987","severity":1,"message":"1065","line":5,"column":9,"nodeType":"989","messageId":"990","endLine":5,"endColumn":18},{"ruleId":"992","severity":1,"message":"1049","line":9,"column":8,"nodeType":"989","messageId":"990","endLine":9,"endColumn":15},{"ruleId":"992","severity":1,"message":"1050","line":10,"column":8,"nodeType":"989","messageId":"990","endLine":10,"endColumn":22},{"ruleId":"1001","severity":1,"message":"1070","line":20,"column":6,"nodeType":"1006","endLine":20,"endColumn":42,"suggestions":"1071"},{"ruleId":"1072","severity":1,"message":"1073","line":141,"column":21,"nodeType":"1074","messageId":"1075","endLine":145,"endColumn":22,"fix":"1076"},{"ruleId":"1001","severity":1,"message":"1077","line":39,"column":6,"nodeType":"1006","endLine":39,"endColumn":22,"suggestions":"1078"},{"ruleId":"987","severity":1,"message":"1079","line":10,"column":9,"nodeType":"989","messageId":"990","endLine":10,"endColumn":25},{"ruleId":"987","severity":1,"message":"1080","line":28,"column":7,"nodeType":"989","messageId":"990","endLine":28,"endColumn":17},"@typescript-eslint/no-unused-vars","'useWallet' is defined but never used.","Identifier","unusedVar","'BackgroundDecoration' is defined but never used.","no-unused-vars","'useEffect' is defined but never used.","'useCallback' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'save' is defined but never used.","'load' is defined but never used.","'PERSISTED_KEYS' is assigned a value but never used.","'createGlobalStyle' is defined but never used.","react-hooks/exhaustive-deps","The 'transactions' conditional could make the dependencies of useEffect Hook (at line 94) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'transactions' in its own useMemo() Hook.","VariableDeclarator","'tombPriceInFTM' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateVesting'. Either include it or remove the dependency array.","ArrayExpression",["1081"],"'wineImg' is defined but never used.","'useBank' is defined but never used.","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","'HomeImage' is defined but never used.","React Hook useEffect has missing dependencies: 'account' and 'raffleAddress'. Either include them or remove the dependency array. If 'setStat' needs the current value of 'account', you can also switch to useReducer instead of useState and read 'account' in the reducer.",["1082"],"'GridItem' is defined but never used.","'Typography' is defined but never used.","'TokenSymbol' is defined but never used.","'grapeImg' is defined but never used.","'nodesImg' is defined but never used.","'soda' is defined but never used.","'totalTicketsWorth' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'getTotalPriceForNodes'. Either include it or remove the dependency array.",["1083"],"React Hook useMemo has missing dependencies: 'displayGrapeBalance', 'displayVintageBalance', 'displayWineBalance', 'displayXGrapeBalance', 'grapePriceInDollars', 'vintagePrice', 'winePriceInDollars', and 'xGrapePrice'. Either include them or remove the dependency array.",["1084"],"'useBondStats' is defined but never used.","'ChainId' is defined but never used.","'useSodapressUserInfo' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'batch' is defined but never used.","'showClaimingModal' is assigned a value but never used.","'setShowClaimingModal' is assigned a value but never used.","'ExtinctionPoolInfo' is defined but never used.","'ExtinctionRewardToken' is defined but never used.","'LightPoolStats' is defined but never used.","'bankDefinitions' is defined but never used.","'Console' is defined but never used.","'priceOfSharesInDollars' is assigned a value but never used.","'magikImg' is defined but never used.","'beefyImg' is defined but never used.","'yieldwolfImg' is defined but never used.","'rebatesImg' is defined but never used.","'pressimg' is defined but never used.","'SavingsIcon' is defined but never used.","'MapIcon' is defined but never used.","'StorefrontIcon' is defined but never used.","'handleVaultsClick' is assigned a value but never used.","'JsonRpcProvider' is defined but never used.","'PressUserInfo' is defined but never used.","React Hook useEffect has a missing dependency: 'press'. Either include it or remove the dependency array. If 'setUsers' needs the current value of 'press', you can also switch to useReducer instead of useState and read 'press' in the reducer.",["1085"],"'Label' is defined but never used.","'estimate' is assigned a value but never used.","'mimAmountPerLP' is assigned a value but never used.","'normalizeOrder' is defined but never used.","'tokenA' is assigned a value but never used.","'tokenB' is assigned a value but never used.","'StyledDescriptionText' is assigned a value but never used.","React Hook useMemo has unnecessary dependencies: 'grapeFinance' and 'token'. Either exclude them or remove the dependency array.",["1086"],"'BigNumber' is defined but never used.","React Hook useCallback has a missing dependency: 'poolAddress'. Either include it or remove the dependency array. If 'setBalance' needs the current value of 'poolAddress', you can also switch to useReducer instead of useState and read 'poolAddress' in the reducer.",["1087"],"React Hook useEffect has a missing dependency: 'pressName'. Either include it or remove the dependency array. If 'setPressLottoInfo' needs the current value of 'pressName', you can also switch to useReducer instead of useState and read 'pressName' in the reducer.",["1088"],"React Hook useEffect has a missing dependency: 'banks'. Either include it or remove the dependency array. If 'setStat' needs the current value of 'banks', you can also switch to useReducer instead of useState and read 'banks' in the reducer.",["1089"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"1090","text":"1091"},"React Hook useMemo has an unnecessary dependency: 'tokenName'. Either exclude it or remove the dependency array.",["1092"],"'copyErrorDetails' is assigned a value but never used.","'StyledLink' is assigned a value but never used.",{"desc":"1093","fix":"1094"},{"desc":"1095","fix":"1096"},{"desc":"1097","fix":"1098"},{"desc":"1099","fix":"1100"},{"desc":"1101","fix":"1102"},{"desc":"1103","fix":"1104"},{"desc":"1105","fix":"1106"},{"desc":"1107","fix":"1108"},{"desc":"1109","fix":"1110"},[4844,4844]," rel=\"noreferrer\"",{"desc":"1111","fix":"1112"},"Update the dependencies array to be: [updateVesting]",{"range":"1113","text":"1114"},"Update the dependencies array to be: [setStat, grapeFinance, fastRefresh, account, raffleAddress]",{"range":"1115","text":"1116"},"Update the dependencies array to be: [nodeRewardPoolStats, grapePriceInDollars, allTicketsFromNodes, winePriceInDollars, grapeMimSWPriceInDollars, userNftTickets, userNodeTickets, account, getTotalPriceForNodes]",{"range":"1117","text":"1118"},"Update the dependencies array to be: [walletStats, account, displayGrapeBalance, grapePriceInDollars, displayWineBalance, winePriceInDollars, displayXGrapeBalance, xGrapePrice, displayVintageBalance, vintagePrice]",{"range":"1119","text":"1120"},"Update the dependencies array to be: [setUsers, grapeFinance, slowRefresh, grapeFinance.myAccount, press]",{"range":"1121","text":"1122"},"Update the dependencies array to be: [currentAllowance, pendingApproval]",{"range":"1123","text":"1124"},"Update the dependencies array to be: [token, poolAddress]",{"range":"1125","text":"1126"},"Update the dependencies array to be: [setPressLottoInfo, grapeFinance, slowRefresh, pressName]",{"range":"1127","text":"1128"},"Update the dependencies array to be: [setStat, grapeFinance, slowRefresh, banks]",{"range":"1129","text":"1130"},"Update the dependencies array to be: [max]",{"range":"1131","text":"1132"},[1551,1553],"[updateVesting]",[628,664],"[setStat, grapeFinance, fastRefresh, account, raffleAddress]",[6125,6313],"[nodeRewardPoolStats, grapePriceInDollars, allTicketsFromNodes, winePriceInDollars, grapeMimSWPriceInDollars, userNftTickets, userNodeTickets, account, getTotalPriceForNodes]",[6927,6949],"[walletStats, account, displayGrapeBalance, grapePriceInDollars, displayWineBalance, winePriceInDollars, displayXGrapeBalance, xGrapePrice, displayVintageBalance, vintagePrice]",[657,718],"[setUsers, grapeFinance, slowRefresh, grapeFinance.myAccount, press]",[1749,1805],"[currentAllowance, pendingApproval]",[537,568],"[token, poolAddress]",[640,686],"[setPressLottoInfo, grapeFinance, slowRefresh, pressName]",[590,626],"[setStat, grapeFinance, slowRefresh, banks]",[1409,1425],"[max]"]