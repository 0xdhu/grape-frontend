{"version":3,"sources":["assets/img/1.jpg","assets/img/2.jpg","assets/img/3.jpg","assets/img/Autocompounder.png","assets/img/wamp-strat.jpg","views/Strategies/Strategies.tsx","hooks/useCashPriceInLastTWAP.ts"],"names":["Strategies","strat","cashPrice","useCashPriceInLastTWAP","bondScale","Number","toFixed","zone1","zone2","zone3","_jsx","Switch","children","Page","_jsxs","Grid","item","xs","md","lg","style","fontSize","textAlign","color","target","rel","href","marginTop","paddingBottom","src","alt","width","auto","wampStrat","_useState","useState","BigNumber","from","_useState2","_slicedToArray","price","setPrice","grapeFinance","useGrapeFinance","fetchCashPrice","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","t0","getGrapePriceInLastTWAP","t1","sent","stop","useEffect","catch","err","console","error","concat","stack","refreshInterval","setInterval","config","clearInterval"],"mappings":"oMAAe,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,2CCA1B,MAA0B,uC,iBCyD1BA,EA9Cc,WAC3B,IAIIC,EAJEC,EAAYC,cAEZC,GAAaC,OAAOH,GAAa,MAAMI,QAAQ,GAYrD,OAPEL,EADEI,OAAOD,IAAc,EACfG,EACCF,OAAOD,GAAa,GAAKC,OAAOD,IAAc,EAC/CI,EAEAC,EAIRC,cAACC,IAAM,CAAAC,SACLF,cAACG,IAAI,CAAAD,SACHE,eAACC,IAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAGP,SAAA,CAChCF,cAAA,MAAIU,MAAO,CAACC,SAAU,OAAQC,UAAW,UAAUV,SAAC,eACpDE,eAAA,KAAGM,MAAO,CAACC,SAAU,OAAQC,UAAW,SAAUC,MAAO,QAAQX,SAAA,CAAC,oGACiCF,cAAA,SAAS,qCACvE,IACnCA,cAAA,KACEc,OAAQ,SACRC,IAAI,sBACJC,KAAK,yEAAwEd,SAC9E,kBAIHE,eAAA,KAAGM,MAAO,CAACC,SAAU,OAAQC,UAAW,SAAUC,MAAO,QAAQX,SAAA,CAAC,gBAAcR,KAChFM,cAAA,MAAIU,MAAO,CAACE,UAAW,SAAUK,UAAW,OAAQC,cAAe,QAAQhB,SAAC,6BAC5EF,cAAA,OAAKmB,IAAK5B,EAAO6B,IAAK,2BAA4BC,MAAO,SACzDrB,cAAA,MAAIU,MAAO,CAACE,UAAW,SAAUK,UAAW,QAASC,cAAe,QAAQhB,SAAC,6BAC7EF,cAAA,OAAKmB,IAAKG,EAAMF,IAAK,yBAA0BC,MAAO,SACtDrB,cAAA,MAAIU,MAAO,CAACE,UAAW,SAAUK,UAAW,QAASC,cAAe,QAAQhB,SAAC,mCAG7EF,cAAA,OAAKmB,IAAKI,EAAWH,IAAK,gBAAiBC,MAAO,eAK5D,C,8FCjCe5B,IAjBgB,WAC7B,IAAA+B,EAA0BC,mBAAoBC,IAAUC,KAAK,IAAGC,EAAAC,YAAAL,EAAA,GAAzDM,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAChBI,EAAeC,cAEfC,EAAiBC,sBAAWC,YAAAC,cAAAC,MAAC,SAAAC,IAAA,OAAAF,cAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACzB,OADyBF,EAAAG,GACjCb,EAAQU,EAAAE,KAAA,EAAOX,EAAaa,0BAAyB,OAAAJ,EAAAK,GAAAL,EAAAM,MAAA,EAAAN,EAAAG,IAAAH,EAAAK,IAAE,KAAF,mBAAAL,EAAAO,OAAA,GAAAT,EAAE,KACtD,CAACP,IAQJ,OANAiB,qBAAU,WACRf,IAAiBgB,OAAM,SAACC,GAAG,OAAKC,QAAQC,MAAM,gCAADC,OAAiCH,EAAII,OAAQ,IAC1F,IAAMC,EAAkBC,YAAYvB,EAAgBwB,IAAOF,iBAC3D,OAAO,kBAAMG,cAAcH,EAAiB,CAC9C,GAAG,CAACzB,EAAUC,EAAcE,IAErBJ,CACT,C","file":"static/js/35.f35ceee6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/1.ea839133.jpg\";","export default __webpack_public_path__ + \"static/media/2.61cc9c6e.jpg\";","export default __webpack_public_path__ + \"static/media/3.96eaa827.jpg\";","export default __webpack_public_path__ + \"static/media/Autocompounder.40966ca6.png\";","export default __webpack_public_path__ + \"static/media/wamp-strat.01c0df09.jpg\";","import React from 'react';\nimport Page from '../../components/Page';\nimport {Switch} from 'react-router-dom';\nimport useCashPriceInLastTWAP from '../../hooks/useCashPriceInLastTWAP';\nimport zone1 from '../../assets/img/1.jpg';\nimport zone2 from '../../assets/img/2.jpg';\nimport zone3 from '../../assets/img/3.jpg';\nimport auto from '../../assets/img/Autocompounder.png';\nimport wampStrat from '../../assets/img/wamp-strat.jpg';\nimport {Grid} from '@material-ui/core';\n\nconst Strategies: React.FC = () => {\n  const cashPrice = useCashPriceInLastTWAP();\n\n  const bondScale = (Number(cashPrice) / 1e18).toFixed(2);\n\n  let strat: string;\n\n  if (Number(bondScale) >= 2) {\n    strat = zone1;\n  } else if (Number(bondScale) < 2 && Number(bondScale) >= 1) {\n    strat = zone2;\n  } else {\n    strat = zone3;\n  }\n\n  return (\n    <Switch>\n      <Page>\n        <Grid item xs={12} md={12} lg={12}>\n          <h1 style={{fontSize: '80px', textAlign: 'center'}}>Strategies</h1>\n          <p style={{fontSize: '20px', textAlign: 'center', color: '#fff'}}>\n            Depending on the TWAP price of Grape there are different optimal strategies for protocol health. <br></br>\n            All strategies can be found in our{' '}\n            <a\n              target={'_blank'}\n              rel=\"noopener noreferrer\"\n              href=\"https://grapefinance.gitbook.io/grape-finance-docs/protocol/strategies\"\n            >\n              docs here.\n            </a>\n          </p>\n          <p style={{fontSize: '20px', textAlign: 'center', color: '#fff'}}>Grape TWAP: ${bondScale}</p>\n          <h1 style={{textAlign: 'center', marginTop: '60px', paddingBottom: '50px'}}>Current Optimal Strategy</h1>\n          <img src={strat} alt={'Current Optimal Strategy'} width={'100%'} />\n          <h1 style={{textAlign: 'center', marginTop: '100px', paddingBottom: '50px'}}>Auto-Compounder Strategy</h1>\n          <img src={auto} alt={'Auto compound Strategy'} width={'100%'} />\n          <h1 style={{textAlign: 'center', marginTop: '100px', paddingBottom: '50px'}}>\n            Asgard DAO Multiplier Strategy\n          </h1>\n          <img src={wampStrat} alt={'WAMP Strategy'} width={'100%'} />\n        </Grid>\n      </Page>\n    </Switch>\n  );\n};\n\nexport default Strategies;\n","import {useCallback, useEffect, useState} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport config from '../config';\nimport {BigNumber} from 'ethers';\n\nconst useCashPriceInLastTWAP = () => {\n  const [price, setPrice] = useState<BigNumber>(BigNumber.from(0));\n  const grapeFinance = useGrapeFinance();\n\n  const fetchCashPrice = useCallback(async () => {\n    setPrice(await grapeFinance.getGrapePriceInLastTWAP());\n  }, [grapeFinance]);\n\n  useEffect(() => {\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch GRAPE price: ${err.stack}`));\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\n    return () => clearInterval(refreshInterval);\n  }, [setPrice, grapeFinance, fetchCashPrice]);\n\n  return price;\n};\n\nexport default useCashPriceInLastTWAP;\n"],"sourceRoot":""}